(function() {
    var type_impls = Object.fromEntries([["zng_app",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AnyVarSubscribe-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1435-1439\">Source</a><a href=\"#impl-AnyVarSubscribe-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>&gt; <a class=\"trait\" href=\"zng_app/widget/trait.AnyVarSubscribe.html\" title=\"trait zng_app::widget::AnyVarSubscribe\">AnyVarSubscribe</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.subscribe\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1436-1438\">Source</a><a href=\"#method.subscribe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.AnyVarSubscribe.html#tymethod.subscribe\" class=\"fn\">subscribe</a>(&amp;self, op: <a class=\"enum\" href=\"zng_app/update/enum.UpdateOp.html\" title=\"enum zng_app::update::UpdateOp\">UpdateOp</a>, widget_id: <a class=\"struct\" href=\"zng_app/widget/struct.WidgetId.html\" title=\"struct zng_app::widget::WidgetId\">WidgetId</a>) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class='docblock'>Register the widget to receive an <a href=\"zng_app/update/enum.UpdateOp.html\" title=\"enum zng_app::update::UpdateOp\"><code>UpdateOp</code></a> when this variable is new. <a href=\"zng_app/widget/trait.AnyVarSubscribe.html#tymethod.subscribe\">Read more</a></div></details></div></details>","AnyVarSubscribe","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#22\">Source</a><a href=\"#impl-Clone-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#23\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#54\">Source</a><a href=\"#impl-Debug-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#55\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#42\">Source</a><a href=\"#impl-Deref-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#43\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#45\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CContextVar%3CT%3E%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/context_var.rs.html#175\">Source</a><a href=\"#impl-From%3CContextVar%3CT%3E%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zng_var/var_impl/context_var/struct.ContextVar.html\" title=\"struct zng_var::var_impl::context_var::ContextVar\">ContextVar</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/context_var.rs.html#176\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"zng_var/var_impl/context_var/struct.ContextVar.html\" title=\"struct zng_var::var_impl::context_var::ContextVar\">ContextVar</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ContextVar<T>>","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CResponderVar%3CT%3E%3E-for-Var%3CResponse%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/response_var.rs.html#43\">Source</a><a href=\"#impl-From%3CResponderVar%3CT%3E%3E-for-Var%3CResponse%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zng_var/var_impl/response_var/struct.ResponderVar.html\" title=\"struct zng_var::var_impl::response_var::ResponderVar\">ResponderVar</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"enum\" href=\"zng_var/var_impl/response_var/enum.Response.html\" title=\"enum zng_var::var_impl::response_var::Response\">Response</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/response_var.rs.html#44\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(var: <a class=\"struct\" href=\"zng_var/var_impl/response_var/struct.ResponderVar.html\" title=\"struct zng_var::var_impl::response_var::ResponderVar\">ResponderVar</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"enum\" href=\"zng_var/var_impl/response_var/enum.Response.html\" title=\"enum zng_var::var_impl::response_var::Response\">Response</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ResponderVar<T>>","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CResponseVar%3CT%3E%3E-for-Var%3CResponse%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/response_var.rs.html#66\">Source</a><a href=\"#impl-From%3CResponseVar%3CT%3E%3E-for-Var%3CResponse%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zng_var/var_impl/response_var/struct.ResponseVar.html\" title=\"struct zng_var::var_impl::response_var::ResponseVar\">ResponseVar</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"enum\" href=\"zng_var/var_impl/response_var/enum.Response.html\" title=\"enum zng_var::var_impl::response_var::Response\">Response</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/response_var.rs.html#67\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(var: <a class=\"struct\" href=\"zng_var/var_impl/response_var/struct.ResponseVar.html\" title=\"struct zng_var::var_impl::response_var::ResponseVar\">ResponseVar</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"enum\" href=\"zng_var/var_impl/response_var/enum.Response.html\" title=\"enum zng_var::var_impl::response_var::Response\">Response</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ResponseVar<T>>","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoVar%3CT%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/const_var.rs.html#34\">Source</a><a href=\"#impl-IntoVar%3CT%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"zng_var/var_impl/const_var/trait.IntoVar.html\" title=\"trait zng_var::var_impl::const_var::IntoVar\">IntoVar</a>&lt;T&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.into_var\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/const_var.rs.html#35\">Source</a><a href=\"#method.into_var\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_var/var_impl/const_var/trait.IntoVar.html#tymethod.into_var\" class=\"fn\">into_var</a>(self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></div></details>","IntoVar<T>","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LightDarkVarExt-for-Var%3CLightDark%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1029\">Source</a><a href=\"#impl-LightDarkVarExt-for-Var%3CLightDark%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zng_color/trait.LightDarkVarExt.html\" title=\"trait zng_color::LightDarkVarExt\">LightDarkVarExt</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"struct\" href=\"zng_color/struct.LightDark.html\" title=\"struct zng_color::LightDark\">LightDark</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rgba\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1030\">Source</a><a href=\"#method.rgba\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.rgba\" class=\"fn\">rgba</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>&gt;</h4></section></summary><div class='docblock'>Gets a contextualized var that maps to <a href=\"zng_color/struct.LightDark.html#method.rgba\" title=\"method zng_color::LightDark::rgba\"><code>LightDark::rgba</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rgba_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1041\">Source</a><a href=\"#method.rgba_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.rgba_map\" class=\"fn\">rgba_map</a>&lt;T&gt;(&amp;self, map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class='docblock'>Gets a contextualized var that maps to <a href=\"zng_color/struct.LightDark.html#method.rgba\" title=\"method zng_color::LightDark::rgba\"><code>LightDark::rgba</code></a> and <code>map</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rgba_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1052\">Source</a><a href=\"#method.rgba_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.rgba_into\" class=\"fn\">rgba_into</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>&gt;,</div></h4></section></summary><div class='docblock'>Gets a contextualized var that maps to <a href=\"zng_color/struct.LightDark.html#method.rgba\" title=\"method zng_color::LightDark::rgba\"><code>LightDark::rgba</code></a> converted into <code>T</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_rgba\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1056\">Source</a><a href=\"#method.map_rgba\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.map_rgba\" class=\"fn\">map_rgba</a>(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"zng_color/struct.LightDark.html\" title=\"struct zng_color::LightDark\">LightDark</a>) -&gt; <a class=\"struct\" href=\"zng_color/struct.LightDark.html\" title=\"struct zng_color::LightDark\">LightDark</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>&gt;</h4></section></summary><div class='docblock'>Gets a contextualized var that maps using <code>map</code> and then to <a href=\"zng_color/struct.LightDark.html#method.rgba\" title=\"method zng_color::LightDark::rgba\"><code>LightDark::rgba</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_rgba_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1067\">Source</a><a href=\"#method.map_rgba_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.map_rgba_into\" class=\"fn\">map_rgba_into</a>&lt;T&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"zng_color/struct.LightDark.html\" title=\"struct zng_color::LightDark\">LightDark</a>) -&gt; <a class=\"struct\" href=\"zng_color/struct.LightDark.html\" title=\"struct zng_color::LightDark\">LightDark</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>&gt;,</div></h4></section></summary><div class='docblock'>Gets a contextualized var that maps using <code>map</code> and then into <code>T</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shade_fct\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1078\">Source</a><a href=\"#method.shade_fct\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.shade_fct\" class=\"fn\">shade_fct</a>(&amp;self, fct: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>&gt;</h4></section></summary><div class='docblock'>Gets a contextualized var that maps to <a href=\"zng_color/struct.LightDark.html#method.shade_fct\" title=\"method zng_color::LightDark::shade_fct\"><code>LightDark::shade_fct</code></a> and then to <a href=\"zng_color/struct.LightDark.html#method.rgba\" title=\"method zng_color::LightDark::rgba\"><code>LightDark::rgba</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shade\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1090\">Source</a><a href=\"#method.shade\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.shade\" class=\"fn\">shade</a>(&amp;self, shade: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>&gt;</h4></section></summary><div class='docblock'>Gets a contextualized var that maps to <a href=\"zng_color/struct.LightDark.html#method.shade\" title=\"method zng_color::LightDark::shade\"><code>LightDark::shade</code></a> and then to <a href=\"zng_color/struct.LightDark.html#method.rgba\" title=\"method zng_color::LightDark::rgba\"><code>LightDark::rgba</code></a>. <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.shade\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shade_fct_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1101\">Source</a><a href=\"#method.shade_fct_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.shade_fct_into\" class=\"fn\">shade_fct_into</a>&lt;T&gt;(&amp;self, fct: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>&gt;,</div></h4></section></summary><div class='docblock'>Gets a contextualized var that maps to <a href=\"zng_color/struct.LightDark.html#method.shade_fct\" title=\"method zng_color::LightDark::shade_fct\"><code>LightDark::shade_fct</code></a> and then to <a href=\"zng_color/struct.LightDark.html#method.rgba\" title=\"method zng_color::LightDark::rgba\"><code>LightDark::rgba</code></a> and then into <code>T</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shade_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_color/lib.rs.html#1113\">Source</a><a href=\"#method.shade_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_color/trait.LightDarkVarExt.html#tymethod.shade_into\" class=\"fn\">shade_into</a>&lt;T&gt;(&amp;self, shade: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zng_unit/color/struct.Rgba.html\" title=\"struct zng_unit::color::Rgba\">Rgba</a>&gt;,</div></h4></section></summary><div class='docblock'>Gets a contextualized var that maps to <a href=\"zng_color/struct.LightDark.html#method.shade\" title=\"method zng_color::LightDark::shade\"><code>LightDark::shade</code></a> and then to <a href=\"zng_color/struct.LightDark.html#method.rgba\" title=\"method zng_color::LightDark::rgba\"><code>LightDark::rgba</code></a> and then into <code>T</code>.</div></details></div></details>","LightDarkVarExt","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CAnyVar%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#35\">Source</a><a href=\"#impl-TryFrom%3CAnyVar%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a>&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#36\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#38\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(var: <a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;, &lt;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<AnyVar>","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1440\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Value type.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1442\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.as_any\" class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a></h4></section></summary><div class=\"docblock\"><p>Reference the variable without the strong value type.</p>\n</div></details></div></details>",0,"zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1447\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Variable type.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1449\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.downgrade\" class=\"fn\">downgrade</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.WeakVar.html\" title=\"struct zng_var::var::WeakVar\">WeakVar</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a weak reference to this variable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_only\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1459\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.read_only\" class=\"fn\">read_only</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a clone of the var that is always read-only.</p>\n<p>The returned variable can still update if <code>self</code> is modified, but it does not have the <code>MODIFY</code> capability.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cow\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1468\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.cow\" class=\"fn\">cow</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a var that redirects to this variable until the first value update, then it disconnects as a separate variable.</p>\n<p>The return variable is <em>clone-on-write</em> and has the <code>MODIFY</code> capability independent of the source capabilities, when\na modify request is made the source value is cloned and offered for modification, if modified the source variable is dropped,\nif the modify closure does not update the source variable is retained.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_context\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1478\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.current_context\" class=\"fn\">current_context</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the underlying var in the current calling context.</p>\n<p>If this variable is <a href=\"zng_var/var_impl/struct.VarCapability.html#associatedconstant.CONTEXT\" title=\"associated constant zng_var::var_impl::VarCapability::CONTEXT\"><code>CONTEXT</code></a> returns a clone of the inner variable,\notherwise returns a clone of this variable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.var_eq\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1487\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.var_eq\" class=\"fn\">var_eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets if this variable is the same as <code>other</code>.</p>\n<p>If this variable is <a href=\"zng_var/var_impl/struct.VarCapability.html#associatedconstant.SHARE\" title=\"associated constant zng_var::var_impl::VarCapability::SHARE\"><code>SHARE</code></a> compares the <em>pointer</em>. If this variable is local this is always <code>false</code>.</p>\n</div></details></div></details>",0,"zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#232\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Value mapping.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#269\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map\" class=\"fn\">map</a>&lt;O&gt;(&amp;self, map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a read-only mapping variable.</p>\n<p>The <code>map</code> closure must produce a mapped value from this variable’s value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n_var = var(<span class=\"number\">0u32</span>);\n<span class=\"kw\">let </span>n_10_var = n_var.map(|n| <span class=\"kw-2\">*</span>n * <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>txt_var = n_10_var.map(|n| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>n &lt; <span class=\"number\">100 </span>{ <span class=\"macro\">formatx!</span>(<span class=\"string\">\"{n}!\"</span>) } <span class=\"kw\">else </span>{ <span class=\"macro\">formatx!</span>(<span class=\"string\">\"Done!\"</span>) });</code></pre></div>\n<p>In the example above the <code>txt_var</code> will update every time the <code>n_var</code> updates.</p>\n<h5 id=\"capabilities\"><a class=\"doc-anchor\" href=\"#capabilities\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped, the mapping variable is also static.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable and\nis called again for every update of this variable. The mapping variable is another shared reference and it holds\na strong reference to this variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n<p>The mapping variable is read-only, see <a href=\"zng_var/var/struct.Var.html#method.map_bidi\" title=\"method zng_var::var::Var::map_bidi\"><code>map_bidi</code></a> for read-write mapping.</p>\n<p>If the <code>map</code> closure produce an equal value the mapping variable will not update, see also <a href=\"zng_var/var/struct.Var.html#method.filter_map\" title=\"method zng_var::var::Var::filter_map\"><code>filter_map</code></a>\nto skip updating for some input values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_into\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#276-279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_into\" class=\"fn\">map_into</a>&lt;O&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;O&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> that converts from <code>T</code> to <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\"><code>Into&lt;O&gt;</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_to_txt\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#289-291\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_to_txt\" class=\"fn\">map_to_txt</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"struct\" href=\"zng_txt/struct.Txt.html\" title=\"struct zng_txt::Txt\">Txt</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_txt/trait.ToTxt.html\" title=\"trait zng_txt::ToTxt\">ToTxt</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> that converts from <code>T</code> to <a href=\"zng_txt/struct.Txt.html\" title=\"struct zng_txt::Txt\"><code>Txt</code></a> using <a href=\"zng_txt/trait.ToTxt.html\" title=\"trait zng_txt::ToTxt\"><code>ToTxt</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_deref\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#302-305\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_deref\" class=\"fn\">map_deref</a>&lt;O&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = O&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> that references and clones <code>O</code> from <code>T</code> using <code>std::ops::Deref&lt;Target = O&gt;</code>.</p>\n<p>The mapping variable is read-only, see <a href=\"zng_var/var/struct.Var.html#method.map_deref_mut\" title=\"method zng_var::var::Var::map_deref_mut\"><code>map_deref_mut</code></a> for mutable referencing.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#344-348\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_map\" class=\"fn\">filter_map</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    fallback_init: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a mapping variable that can skip updates.</p>\n<p>The <code>map</code> closure is called for every update this variable and if it returns a new value the mapping variable updates.</p>\n<p>If the <code>map</code> closure does not produce a value on init the <code>fallback_init</code> closure is called.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n_var = var(<span class=\"number\">100u32</span>);\n<span class=\"kw\">let </span>txt_var = n_var.filter_map(|n| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>n &lt; <span class=\"number\">100 </span>{ <span class=\"prelude-val\">Some</span>(<span class=\"macro\">formatx!</span>(<span class=\"string\">\"{n}!\"</span>)) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">None </span>}, || <span class=\"string\">\"starting...\"</span>.into());</code></pre></div>\n<p>In the example above the <code>txt_var</code> will update every time the <code>n_var</code> updates with value <code>n &lt; 100</code>. Because\nthe <code>n_var</code> initial value does not match the filter the fallback value <code>\"starting...\"</code> is used.</p>\n<h5 id=\"capabilities-1\"><a class=\"doc-anchor\" href=\"#capabilities-1\">§</a>Capabilities</h5>\n<p>If this variable is static the closures are called immediately and dropped, the mapping variable is also static.</p>\n<p>If this variable is a shared reference the closures are called immediately to init the mapping variable and\nare called again for every update of this variable. The mapping variable is another shared reference and it holds\na strong reference to this variable.</p>\n<p>If this variable is contextual the initial closures call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n<p>The mapping variable is read-only, see <a href=\"zng_var/var/struct.Var.html#method.filter_map_bidi\" title=\"method zng_var::var::Var::filter_map_bidi\"><code>filter_map_bidi</code></a> for read-write mapping.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_try_into\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#355-359\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_try_into\" class=\"fn\">filter_try_into</a>&lt;O, I&gt;(&amp;self, fallback_init: I) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\">TryInto</a>&lt;O&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.filter_map\" title=\"method zng_var::var::Var::filter_map\"><code>filter_map</code></a> that tries to convert from <code>T</code> to <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\"><code>TryInto&lt;O&gt;</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_parse\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#368-372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_parse\" class=\"fn\">filter_parse</a>&lt;O, I&gt;(&amp;self, fallback_init: I) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.str.html\">str</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.filter_map\" title=\"method zng_var::var::Var::filter_map\"><code>filter_map</code></a> that tries to convert from <code>T</code> to <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\"><code>FromStr</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#405-409\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_bidi\" class=\"fn\">map_bidi</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    map_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a bidirectional mapping variable.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n_var = var(<span class=\"number\">0u32</span>);\n<span class=\"kw\">let </span>n_100_var = n_var.map_bidi(|n| n * <span class=\"number\">100</span>, |n_100| n_100 / <span class=\"number\">100</span>);</code></pre></div>\n<p>In the example above the <code>n_100_var</code> will update every time the <code>n_var</code> updates and the <code>n_var</code> will\nupdate every time the <code>n_100_var</code> updates.</p>\n<h5 id=\"capabilities-2\"><a class=\"doc-anchor\" href=\"#capabilities-2\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped, the mapping variable is also static,\nthe <code>map_back</code> closure is ignored.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable.\nThe mapping variable is another shared reference and it holds a strong reference to this variable.\nThe <code>map</code> closure is called again for every update of this variable that is not caused by the mapping variable.\nThe <code>map_back</code> closure is called for every update of the mapping variable that was not caused by this variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_bidi_modify\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#457-461\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_bidi_modify\" class=\"fn\">map_bidi_modify</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    modify_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a bidirectional mapping variable that modifies back instead of mapping back.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>list_var = var(<span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\n<span class=\"kw\">let </span>first_var = list_var.map_bidi_modify(\n    <span class=\"comment\">// map:\n    </span>|l| l.first().copied().unwrap_or(<span class=\"string\">'_'</span>),\n    <span class=\"comment\">// modify_back:\n    </span>|c, l| <span class=\"kw\">if </span>l.is_empty() { l.push(<span class=\"kw-2\">*</span>c) } <span class=\"kw\">else </span>{ l[<span class=\"number\">0</span>] = <span class=\"kw-2\">*</span>c },\n);</code></pre></div>\n<p>In the example above the <code>first_var</code> represents the first item on the vector in <code>list_var</code>. Note that the <code>map</code> closure\nworks the same as in <a href=\"zng_var/var/struct.Var.html#method.map_bidi\" title=\"method zng_var::var::Var::map_bidi\"><code>map_bidi</code></a>, but the <code>modify_back</code> closure modifies the list. This is not a mapping that can be declared\nwith <a href=\"zng_var/var/struct.Var.html#method.map_bidi\" title=\"method zng_var::var::Var::map_bidi\"><code>map_bidi</code></a> as the mapping variable does not have the full list to map back.</p>\n<h5 id=\"capabilities-3\"><a class=\"doc-anchor\" href=\"#capabilities-3\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped, the mapping variable is also static,\nthe <code>modify_back</code> closure is ignored.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable.\nThe mapping variable is another shared reference and it holds a strong reference to this variable.\nThe <code>map</code> closure is called again for every update of this variable that is not caused by the mapping variable.\nThe <code>modify_back</code> closure is called for every update of the mapping variable that was not caused by this variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n<p>Like other mappings and bindings cyclic updates are avoided automatically, if the <code>modify_back</code> closure touches/updates the value\na var instance tag is inserted after the closure returns, you do not need to mark it manually.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_into_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#473-476\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_into_bidi\" class=\"fn\">map_into_bidi</a>&lt;O&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;O&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map_bidi\" title=\"method zng_var::var::Var::map_bidi\"><code>map_bidi</code></a> that converts between <code>T</code> and <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\"><code>Into</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_deref_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#485-489\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_deref_mut\" class=\"fn\">map_deref_mut</a>&lt;O&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = O, Target = O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map_bidi_modify\" title=\"method zng_var::var::Var::map_bidi_modify\"><code>map_bidi_modify</code></a> that references and clones <code>O</code> from <code>T</code> using <code>std::ops::Deref&lt;Target = O&gt;</code> and\nmodifies back using <code>std::ops::DerefMut&lt;Target = O&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#534-539\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_map_bidi\" class=\"fn\">filter_map_bidi</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    map_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    fallback_init: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a bidirectional mapping variable that can skip updates.</p>\n<p>If the <code>map</code> closure does not produce a value on init the <code>fallback_init</code> closure is called.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n_var = var(<span class=\"number\">0u32</span>);\n<span class=\"kw\">let </span>n_100_var = n_var.filter_map_bidi(\n    |n| <span class=\"prelude-val\">Some</span>(n * <span class=\"number\">100</span>),\n    |n_100| {\n        <span class=\"kw\">let </span>r = n_100 / <span class=\"number\">100</span>;\n        <span class=\"kw\">if </span>r &lt; <span class=\"number\">100 </span>{ <span class=\"prelude-val\">Some</span>(r) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">None </span>}\n    },\n    || <span class=\"number\">0</span>,\n);</code></pre></div>\n<p>In the example above the <code>n_100_var</code> will update every time the <code>n_var</code> updates with any value and the <code>n_var</code> will\nupdate every time the <code>n_100_var</code> updates with a value that <code>(n_100 / 100) &lt; 100</code>.</p>\n<h5 id=\"capabilities-4\"><a class=\"doc-anchor\" href=\"#capabilities-4\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped, the mapping variable is also static,\nthe <code>map_back</code> closure is ignored.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable.\nThe mapping variable is another shared reference and it holds a strong reference to this variable.\nThe <code>map</code> closure is called again for every update of this variable that is not caused by the mapping variable.\nThe <code>map_back</code> closure is called for every update of the mapping variable that was not caused by this variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_try_into_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#552-557\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_try_into_bidi\" class=\"fn\">filter_try_into_bidi</a>&lt;O, I&gt;(&amp;self, fallback_init: I) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\">TryInto</a>&lt;T&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\">TryInto</a>&lt;O&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.filter_map_bidi\" title=\"method zng_var::var::Var::filter_map_bidi\"><code>filter_map_bidi</code></a> that tries to convert between <code>T</code> to <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\"><code>TryInto</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#580\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.flat_map\" class=\"fn\">flat_map</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a flat mapping variable that <em>unwraps</em> an inner variable stored in the the value of this variable.</p>\n<h5 id=\"capabilities-5\"><a class=\"doc-anchor\" href=\"#capabilities-5\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped and the inner variable is returned.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable and\nis called again for every update of this variable. The mapping variable is another shared reference and it holds\na strong reference to this variable and to the inner variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n<p>The mapping variable has the same capabilities of the inner variable, plus <a href=\"zng_var/var_impl/struct.VarCapability.html#associatedconstant.MODIFY_CHANGES\" title=\"associated constant zng_var::var_impl::VarCapability::MODIFY_CHANGES\"><code>MODIFY_CHANGES</code></a>. When the inner variable\nis writeable the return variable is too.</p>\n</div></details></div></details>",0,"zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#593\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Binding</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#622\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind\" class=\"fn\">bind</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new values from this variable.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = var(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>b = var(<span class=\"number\">0</span>);\n\na.bind(<span class=\"kw-2\">&amp;</span>b).perm();</code></pre></div>\n<p>In the example above the variable <code>b</code> will be set every time the variable <code>a</code> updates. Note that the current\nvalue is not propagated, only updates. You can use <a href=\"zng_var/var/struct.Var.html#method.set_bind\" title=\"method zng_var::var::Var::set_bind\"><code>set_bind</code></a> to assign the current value and bind.</p>\n<h5 id=\"capabilities\"><a class=\"doc-anchor\" href=\"#capabilities\">§</a>Capabilities</h5>\n<p>If this variable is const or the other variable is always read-only does nothing and returns a dummy handle.</p>\n<p>If any variable is contextual the binding is set on the current context inner variable.</p>\n<p>Neither variable holds the other, only a weak reference is used, if either variable or the handle is dropped the binding\nis dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_bind\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#653\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_bind\" class=\"fn\">set_bind</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class=\"docblock\"><p>Like <a href=\"zng_var/var/struct.Var.html#method.bind\" title=\"method zng_var::var::Var::bind\"><code>bind</code></a> but also sets <code>other</code> to the current value.</p>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = var(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>b = var(<span class=\"number\">0</span>);\n\na.set_bind(<span class=\"kw-2\">&amp;</span>b).perm();</code></pre></div>\n<p>In the example above the variable <code>b</code> will be set to the current value of <code>a</code> and every time the variable <code>a</code> updates.</p>\n<h5 id=\"capabilities-1\"><a class=\"doc-anchor\" href=\"#capabilities-1\">§</a>Capabilities</h5>\n<p>If this variable is const or the other variable is always read-only does nothing and returns a dummy handle.</p>\n<p>If any variable is contextual the binding is set on the current context inner variable.</p>\n<p>Neither variable holds the other, only a weak reference is used, if either variable or the handle is dropped the binding\nis dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#677\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_map\" class=\"fn\">bind_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new values mapped from this variable.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind\" title=\"method zng_var::var::Var::bind\"><code>bind</code></a>, but the <code>map</code> closure is called to produce the new value for <code>other</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = var(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>b = var(Txt::from(<span class=\"string\">\"\"</span>));\n\na.bind_map(<span class=\"kw-2\">&amp;</span>b, |<span class=\"kw-2\">&amp;</span>a| <span class=\"macro\">formatx!</span>(<span class=\"string\">\"{:?}\"</span>, a * <span class=\"number\">2</span>)).perm();</code></pre></div>\n<p>In the example above every time the variable <code>a</code> updates the variable <code>b</code> will be set to the text representation of the value times two.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_bind_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#687\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_bind_map\" class=\"fn\">set_bind_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <a href=\"zng_var/var/struct.Var.html#method.bind_map\" title=\"method zng_var::var::Var::bind_map\"><code>bind_map</code></a> but also sets <code>other</code> to the current value.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.set_bind\" title=\"method zng_var::var::Var::set_bind\"><code>set_bind</code></a>, but the <code>map</code> closure is called to produce the new value for <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_modify\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#717\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_modify\" class=\"fn\">bind_modify</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    modify: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, O&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to be modified when this variable updates.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind\" title=\"method zng_var::var::Var::bind\"><code>bind</code></a>, but the <code>modify</code> closure is called to modify <code>other</code> using a reference to the new value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = var(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>b = var(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\na.bind_modify(<span class=\"kw-2\">&amp;</span>b, |<span class=\"kw-2\">&amp;</span>a, b| {\n    <span class=\"kw\">if </span>b.is_empty() {\n        b.push(a);\n    } <span class=\"kw\">else </span>{\n        b[<span class=\"number\">0</span>] = a;\n    }\n})\n.perm();</code></pre></div>\n<p>In the example above the variable <code>b</code> first element is set to the updated value of <code>a</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#730\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_bidi\" class=\"fn\">bind_bidi</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandles.html\" title=\"struct zng_var::var_impl::VarHandles\">VarHandles</a></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new values from this variable and this variable to receive new values from <code>other</code>.</p>\n<h5 id=\"capabilities-2\"><a class=\"doc-anchor\" href=\"#capabilities-2\">§</a>Capabilities</h5>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind\" title=\"method zng_var::var::Var::bind\"><code>bind</code></a>, it is equivalent of setting two bindings.</p>\n<p>The bindings are protected against cyclic updates, like all other mappings and bindings.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_map_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#740-745\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_map_bidi\" class=\"fn\">bind_map_bidi</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    map_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandles.html\" title=\"struct zng_var::var_impl::VarHandles\">VarHandles</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new mapped values from this variable and this variable to receive new mapped values from <code>other</code>.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind_bidi\" title=\"method zng_var::var::Var::bind_bidi\"><code>bind_bidi</code></a>, but the <code>map</code> closure is called to produce the new value for <code>other</code>\nand <code>map_back</code> is called to produce the new value for this variable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_modify_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#759-764\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_modify_bidi\" class=\"fn\">bind_modify_bidi</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    modify: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, O&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    modify_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandles.html\" title=\"struct zng_var::var_impl::VarHandles\">VarHandles</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to be modified when this variable updates and this variable to be modified when <code>other</code> updates.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind_bidi\" title=\"method zng_var::var::Var::bind_bidi\"><code>bind_bidi</code></a>, but the <code>modify</code> closure is called to modify <code>other</code>\nand <code>modify_back</code> is called to modify this variable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_filter_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#777\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_filter_map\" class=\"fn\">bind_filter_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new values filtered mapped from this variable.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind_map\" title=\"method zng_var::var::Var::bind_map\"><code>bind_map</code></a>, except that <code>other</code> will only receive a new value if <code>map</code> returns a value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_filter_map_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#783-788\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_filter_map_bidi\" class=\"fn\">bind_filter_map_bidi</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    map_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandles.html\" title=\"struct zng_var::var_impl::VarHandles\">VarHandles</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new filtered mapped values from this variable and this variable to receive\nnew filtered mapped values from <code>other</code>.</p>\n</div></details></div></details>",0,"zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#61\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Value.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#63\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.with\" class=\"fn\">with</a>&lt;O&gt;(&amp;self, visitor: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O) -&gt; O</h4></section></summary><div class=\"docblock\"><p>Visit a reference to the current value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#73\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.get\" class=\"fn\">get</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Get a clone of the current value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_into\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#80\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.get_into\" class=\"fn\">get_into</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\"><p>Get a clone of the current value into <code>value</code>.</p>\n<p>This uses <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" title=\"method core::clone::Clone::clone_from\"><code>Clone::clone_from</code></a> to reuse the <code>value</code> memory if supported.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_new\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#87\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.with_new\" class=\"fn\">with_new</a>&lt;O&gt;(&amp;self, visitor: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt;</h4></section></summary><div class=\"docblock\"><p>Visit a reference to the current value if it <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_new\" title=\"method zng_var::var_any::AnyVar::is_new\"><code>is_new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_new\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#94\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.get_new\" class=\"fn\">get_new</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a clone of the current value if it <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_new\" title=\"method zng_var::var_any::AnyVar::is_new\"><code>is_new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_new_into\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#103\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.get_new_into\" class=\"fn\">get_new_into</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets a clone of the current value into <code>value</code> if it <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_new\" title=\"method zng_var::var_any::AnyVar::is_new\"><code>is_new</code></a>.</p>\n<p>This uses <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" title=\"method core::clone::Clone::clone_from\"><code>Clone::clone_from</code></a> to reuse the <code>value</code> memory if supported.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_set\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#108\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.try_set\" class=\"fn\">try_set</a>(&amp;self, new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"zng_var/var_impl/struct.VarIsReadOnlyError.html\" title=\"struct zng_var::var_impl::VarIsReadOnlyError\">VarIsReadOnlyError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule <code>new_value</code> to be assigned next update.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#118\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set\" class=\"fn\">set</a>(&amp;self, new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Schedule <code>new_value</code> to be assigned next update.</p>\n<p>If the variable is read-only this is ignored and a DEBUG level log is recorded.\nUse <a href=\"zng_var/var/struct.Var.html#method.try_set\" title=\"method zng_var::var::Var::try_set\"><code>try_set</code></a> to get an error for read-only vars.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_modify\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#125\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.try_modify\" class=\"fn\">try_modify</a>(\n    &amp;self,\n    modify: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"zng_var/var_impl/struct.VarIsReadOnlyError.html\" title=\"struct zng_var::var_impl::VarIsReadOnlyError\">VarIsReadOnlyError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule <code>modify</code> to be called on the value for the next update.</p>\n<p>If the <a href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\"><code>VarModify</code></a> value is deref mut the variable will notify an update.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.modify\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#139\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.modify\" class=\"fn\">modify</a>(\n    &amp;self,\n    modify: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n)</h4></section></summary><div class=\"docblock\"><p>Schedule <code>modify</code> to be called on the value for the next update.</p>\n<p>If the <a href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\"><code>VarModify</code></a> value is deref mut the variable will notify an update.</p>\n<p>If the variable is read-only this is ignored and a DEBUG level log is recorded.\nUse <a href=\"zng_var/var/struct.Var.html#method.try_modify\" title=\"method zng_var::var::Var::try_modify\"><code>try_modify</code></a> to get an error for read-only vars.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_set_from\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#147\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.try_set_from\" class=\"fn\">try_set_from</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"zng_var/var_impl/struct.VarIsReadOnlyError.html\" title=\"struct zng_var::var_impl::VarIsReadOnlyError\">VarIsReadOnlyError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a new <code>value</code> for the variable, it will be set in the end of the current app update to the updated\nvalue of <code>other</code>, so if the other var has already scheduled an update, the updated value will be used.</p>\n<p>This can be used just before creating a binding to start with synchronized values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_from\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#160\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_from\" class=\"fn\">set_from</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Schedule a new <code>value</code> for the variable, it will be set in the end of the current app update to the updated\nvalue of <code>other</code>, so if the other var has already scheduled an update, the updated value will be used.</p>\n<p>This can be used just before creating a binding to start with synchronized values.</p>\n<p>If the variable is read-only this is ignored and a DEBUG level log is recorded.\nUse <a href=\"zng_var/var/struct.Var.html#method.try_set_from\" title=\"method zng_var::var::Var::try_set_from\"><code>try_set_from</code></a> to get an error for read-only vars.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_set_from_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#167-171\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.try_set_from_map\" class=\"fn\">try_set_from_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"zng_var/var_impl/struct.VarIsReadOnlyError.html\" title=\"struct zng_var::var_impl::VarIsReadOnlyError\">VarIsReadOnlyError</a>&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <a href=\"zng_var/var/struct.Var.html#method.try_set_from\" title=\"method zng_var::var::Var::try_set_from\"><code>try_set_from</code></a>, but uses <code>map</code> to produce the new value from the updated value of <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_from_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#183\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_from_map\" class=\"fn\">set_from_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n)<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <a href=\"zng_var/var/struct.Var.html#method.set_from\" title=\"method zng_var::var::Var::set_from\"><code>set_from</code></a>, but uses <code>map</code> to produce the new value from the updated value of <code>other</code>.</p>\n<p>If the variable is read-only this is ignored and a DEBUG level log is recorded.\nUse <a href=\"zng_var/var/struct.Var.html#method.try_set_from_map\" title=\"method zng_var::var::Var::try_set_from_map\"><code>try_set_from_map</code></a> to get an error for read-only vars.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hook\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.hook\" class=\"fn\">hook</a>(\n    &amp;self,\n    on_update: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;<a class=\"struct\" href=\"zng_var/var/struct.VarHookArgs.html\" title=\"struct zng_var::var::VarHookArgs\">VarHookArgs</a>&lt;'_, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class=\"docblock\"><p>Setups a callback for just after the variable value update is applied, the closure runs in the root app context, just like\nthe <code>modify</code> closure. The closure must return <code>true</code> to be retained and <code>false</code> to be dropped.</p>\n<p>If you modify another variable in the closure modification applies in the same update, variable mapping and\nbinding is implemented using hooks.</p>\n<p>The variable store a weak reference to the callback if it has the <code>MODIFY</code> or <code>CAPS_CHANGE</code> capabilities, otherwise\nthe callback is discarded and <a href=\"zng_var/var_impl/struct.VarHandle.html#method.dummy\" title=\"associated function zng_var::var_impl::VarHandle::dummy\"><code>VarHandle::dummy</code></a> returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_match\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#202\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.wait_match\" class=\"fn\">wait_match</a>(\n    &amp;self,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a></h4></section></summary><div class=\"docblock\"><p>Awaits for a value that passes the <code>predicate</code>, including the current value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_next\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#210\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.wait_next\" class=\"fn\">wait_next</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a></h4></section></summary><div class=\"docblock\"><p>Awaits for an update them <a href=\"zng_var/var/struct.Var.html#method.get\" title=\"method zng_var::var::Var::get\"><code>get</code></a> the value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace_value\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#227\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.trace_value\" class=\"fn\">trace_value</a>&lt;S&gt;(\n    &amp;self,\n    enter_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;<a class=\"struct\" href=\"zng_var/var/struct.VarHookArgs.html\" title=\"struct zng_var::var::VarHookArgs\">VarHookArgs</a>&lt;'_, T&gt;) -&gt; S + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Debug helper for tracing the lifetime of a value in this variable.</p>\n<p>The <code>enter_value</code> closure is called every time the variable updates, it can return\nan implementation agnostic <em>scope</em> or <em>span</em> <code>S</code> that is only dropped when the variable updates again.</p>\n<p>The <code>enter_value</code> is also called immediately when this method is called to start tracking the first value.</p>\n<p>Returns a <a href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\"><code>VarHandle</code></a> that can be used to stop tracing.</p>\n<p>If this variable can never update the span is immediately dropped and a dummy handle is returned.</p>\n</div></details></div></details>",0,"zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#797\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Animation</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.animate\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#838\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.animate\" class=\"fn\">animate</a>(\n    &amp;self,\n    animate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Animation.html\" title=\"struct zng_var::animation::Animation\">Animation</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Schedule a custom animation that targets this variable.</p>\n<p>The <code>animate</code> closure is called every frame, starting after next frame, the closure inputs are\nthe <a href=\"zng_var/animation/struct.Animation.html\" title=\"struct zng_var::animation::Animation\"><code>Animation</code></a> args and <em>modify</em> access to the variable value, the args\ncan be used to calculate the new variable value and to control or stop the animation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Customs animation that displays the animation elapsed time:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>status = var(Txt::from(<span class=\"string\">\"not animating\"</span>));\n\nstatus\n    .animate(|animation, value| {\n        <span class=\"kw\">let </span>elapsed = animation.elapsed_dur();\n        <span class=\"kw\">if </span>elapsed &lt; <span class=\"number\">5</span>.secs() {\n            value.set(<span class=\"macro\">formatx!</span>(<span class=\"string\">\"animating: elapsed {}ms\"</span>, elapsed.as_millis()));\n        } <span class=\"kw\">else </span>{\n            animation.stop();\n            value.set(<span class=\"string\">\"not animating\"</span>);\n        }\n    })\n    .perm();</code></pre></div>\n<h5 id=\"capabilities\"><a class=\"doc-anchor\" href=\"#capabilities\">§</a>Capabilities</h5>\n<p>If the variable is always read-only no animation is created and a dummy handle returned.</p>\n<p>If this var is contextual the animation targets the current context var.</p>\n<p>The animation is stopped if this variable is dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sequence\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#880\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.sequence\" class=\"fn\">sequence</a>(\n    &amp;self,\n    animate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class=\"docblock\"><p>Schedule animations started by <code>animate</code>, the closure is called once at the start to begin, then again every time\nthe variable stops animating.</p>\n<p>This can be used to create a sequence of animations or to repeat an animation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Running multiple animations in sequence:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>status = var(Txt::from(<span class=\"string\">\"not animating\"</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stage = <span class=\"number\">0</span>;\nstatus\n    .sequence(<span class=\"kw\">move </span>|status| {\n        stage += <span class=\"number\">1</span>;\n        <span class=\"kw\">if </span>stage &lt; <span class=\"number\">5 </span>{\n            status.animate(<span class=\"kw\">move </span>|animation, value| {\n                <span class=\"kw\">let </span>elapsed = animation.elapsed_stop(<span class=\"number\">5</span>.secs());\n                value.set(<span class=\"macro\">formatx!</span>(<span class=\"string\">\"animation {stage}: {}\"</span>, elapsed.pct()));\n            })\n        } <span class=\"kw\">else </span>{\n            status.set(<span class=\"string\">\"not animating\"</span>);\n            AnimationHandle::dummy()\n        }\n    })\n    .perm();</code></pre></div>\n<h5 id=\"capabilities-1\"><a class=\"doc-anchor\" href=\"#capabilities-1\">§</a>Capabilities</h5>\n<p>The sequence stops when <code>animate</code> returns a dummy handle, or the variable is modified outside of <code>animate</code>,\nor animations are disabled, or the returned handle is dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#909-917\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease\" class=\"fn\">set_ease</a>(\n    &amp;self,\n    start_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    end_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule an easing transition from the <code>start_value</code> to <code>end_value</code>.</p>\n<p>The variable updates every time the <a href=\"zng_var/animation/easing/type.EasingStep.html\" title=\"type zng_var::animation::easing::EasingStep\"><code>EasingStep</code></a> for each frame changes and a different value is sampled.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>progress = var(<span class=\"number\">0</span>.pct());\n\nprogress.set_ease(<span class=\"number\">0</span>.pct(), <span class=\"number\">100</span>.pct(), <span class=\"number\">5</span>.secs(), easing::linear).perm();</code></pre></div>\n<p>Variable is reset to 0% at the start and them transition to 100% in 5 seconds with linear progression.</p>\n<h5 id=\"capabilities-2\"><a class=\"doc-anchor\" href=\"#capabilities-2\">§</a>Capabilities</h5>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animation capabilities.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_oci\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#930-938\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_oci\" class=\"fn\">set_ease_oci</a>(\n    &amp;self,\n    start_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    end_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Oscillate between <code>start_value</code> to <code>end_value</code> with an easing transition.</p>\n<p>The <code>duration</code> defines the easing duration between the two values. The animation will continue running\nuntil the handle or the variable is dropped.</p>\n<p>Note that you can use <a href=\"zng_var/var/struct.Var.html#method.sequence\" title=\"method zng_var::var::Var::sequence\"><code>sequence</code></a> to create more complex looping animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#950-959\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_with\" class=\"fn\">set_ease_with</a>(\n    &amp;self,\n    start_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    end_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule an easing transition from the <code>start_value</code> to <code>end_value</code> using a custom value sampler.</p>\n<p>The variable updates every time the <a href=\"zng_var/animation/easing/type.EasingStep.html\" title=\"type zng_var::animation::easing::EasingStep\"><code>EasingStep</code></a> for each frame changes and a different value is sampled.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animation capabilities.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_oci_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#971-980\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_oci_with\" class=\"fn\">set_ease_oci_with</a>(\n    &amp;self,\n    start_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    end_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Oscillate between <code>start_value</code> to <code>end_value</code> with an easing transition using a custom value sampler.</p>\n<p>The <code>duration</code> defines the easing duration between the two values.</p>\n<p>Note that you can use <a href=\"zng_var/var/struct.Var.html#method.sequence\" title=\"method zng_var::var::Var::sequence\"><code>sequence</code></a> to create more complex looping animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#992-999\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease\" class=\"fn\">ease</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule an easing transition from the current value to <code>new_value</code>.</p>\n<p>The variable updates every time the <a href=\"zng_var/animation/easing/type.EasingStep.html\" title=\"type zng_var::animation::easing::EasingStep\"><code>EasingStep</code></a> for each frame changes and a different value is sampled.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animation capabilities.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_oci\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1011-1018\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_oci\" class=\"fn\">ease_oci</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Oscillate between the current value and <code>new_value</code> with an easing transition.</p>\n<p>The <code>duration</code> defines the easing duration between the two values.</p>\n<p>Note that you can use <a href=\"zng_var/var/struct.Var.html#method.sequence\" title=\"method zng_var::var::Var::sequence\"><code>sequence</code></a> to create more complex looping animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1030-1038\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_with\" class=\"fn\">ease_with</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule an easing transition from the current value to <code>new_value</code> using a custom value sampler.</p>\n<p>The variable updates every time the <a href=\"zng_var/animation/easing/type.EasingStep.html\" title=\"type zng_var::animation::easing::EasingStep\"><code>EasingStep</code></a> for each frame changes and a different value is sampled.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animation capabilities.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_oci_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1050-1058\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_oci_with\" class=\"fn\">ease_oci_with</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Oscillate between the current value and <code>new_value</code> with an easing transition and a custom value sampler.</p>\n<p>The <code>duration</code> defines the easing duration between the two values.</p>\n<p>Note that you can use <a href=\"zng_var/var/struct.Var.html#method.sequence\" title=\"method zng_var::var::Var::sequence\"><code>sequence</code></a> to create more complex looping animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_keyed\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1070-1077\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_keyed\" class=\"fn\">set_ease_keyed</a>(\n    &amp;self,\n    keys: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule a keyframed transition animation for the variable, starting from the first key.</p>\n<p>The variable will be set to the first keyframe, then animated across all other keys.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_keyed_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1089-1097\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_keyed_with\" class=\"fn\">set_ease_keyed_with</a>(\n    &amp;self,\n    keys: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.TransitionKeyed.html\" title=\"struct zng_var::animation::TransitionKeyed\">TransitionKeyed</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule a keyframed transition animation for the variable, starting from the first key, using a custom value sampler.</p>\n<p>The variable will be set to the first keyframe, then animated across all other keys.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_keyed\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1113-1120\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_keyed\" class=\"fn\">ease_keyed</a>(\n    &amp;self,\n    keys: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule a keyframed transition animation for the variable, starting from the current value.</p>\n<p>The variable will be set to the first keyframe, then animated across all other keys.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_keyed_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1132-1140\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_keyed_with\" class=\"fn\">ease_keyed_with</a>(\n    &amp;self,\n    keys: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.TransitionKeyed.html\" title=\"struct zng_var::animation::TransitionKeyed\">TransitionKeyed</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule a keyframed transition animation for the variable, starting from the current value, using a custom value sampler.</p>\n<p>The variable will be set to the first keyframe, then animated across all other keys.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1156\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.step\" class=\"fn\">step</a>(&amp;self, new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;, delay: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Set the variable to <code>new_value</code> after a <code>delay</code>.</p>\n<p>The variable <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_animating\" title=\"method zng_var::var_any::AnyVar::is_animating\"><code>is_animating</code></a> until the delay elapses and the value is set.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step_oci\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1161\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.step_oci\" class=\"fn\">step_oci</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    delay: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Oscillate between the current value and <code>new_value</code>, every time the <code>delay</code> elapses the variable is set to the next value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_step_oci\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1167\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_step_oci\" class=\"fn\">set_step_oci</a>(\n    &amp;self,\n    from: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    to: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    delay: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Oscillate between <code>from</code> and <code>to</code>, the variable is set to <code>from</code> to start and every time the <code>delay</code> elapses\nthe variable is set to the next value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1200-1205\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.steps\" class=\"fn\">steps</a>(\n    &amp;self,\n    steps: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Set the variable to a sequence of values as a time <code>duration</code> elapses.</p>\n<p>An animation curve is used to find the first factor in <code>steps</code> above or at the curve line at the current time,\nthe variable is set to this step value, continuing animating across the next steps until the last or the animation end.\nThe variable <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_animating\" title=\"method zng_var::var_any::AnyVar::is_animating\"><code>is_animating</code></a> from the start, even if no step applies and stays <em>animating</em> until the last <em>step</em> applies\nor the duration is reached.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Creates a variable that outputs text every 5% of a 5 seconds animation, advanced linearly.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>steps = (<span class=\"number\">0</span>..=<span class=\"number\">100</span>).step_by(<span class=\"number\">5</span>).map(|i| (i.pct().fct(), <span class=\"macro\">formatx!</span>(<span class=\"string\">\"{i}%\"</span>))).collect();\ntext_var.steps(steps, <span class=\"number\">5</span>.secs(), easing::linear)</code></pre></div>\n<p>The variable is set to <code>\"0%\"</code>, after 5% of the <code>duration</code> elapses it is set to <code>\"5%\"</code> and so on\nuntil the value is set to <code>\"100%</code> at the end of the animation.</p>\n<p>Returns an <a href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\"><code>AnimationHandle</code></a>. See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>Var::animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chase\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1219-1226\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.chase\" class=\"fn\">chase</a>(\n    &amp;self,\n    first_target: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.ChaseAnimation.html\" title=\"struct zng_var::animation::ChaseAnimation\">ChaseAnimation</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Starts an easing animation that <em>chases</em> a target value that can be changed using the <a href=\"zng_var/animation/struct.ChaseAnimation.html\" title=\"struct zng_var::animation::ChaseAnimation\"><code>ChaseAnimation&lt;T&gt;</code></a> handle.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.easing\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1255-1257\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.easing\" class=\"fn\">easing</a>(\n    &amp;self,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a vars that <a href=\"zng_var/var/struct.Var.html#method.ease\" title=\"method zng_var::var::Var::ease\"><code>ease</code></a> to each new value of <code>self</code>.</p>\n<p>Note that the mapping var can be <a href=\"zng_var/var_impl/contextual_var/fn.contextual_var.html\" title=\"fn zng_var::var_impl::contextual_var::contextual_var\">contextualized</a>, see <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> for more details.</p>\n<p>If <code>self</code> can change the output variable will keep it alive.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.easing_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1269-1276\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.easing_with\" class=\"fn\">easing_with</a>(\n    &amp;self,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a vars that <a href=\"zng_var/var/struct.Var.html#method.ease_with\" title=\"method zng_var::var::Var::ease_with\"><code>ease_with</code></a> to each new value of <code>self</code>.</p>\n<p>Note that the mapping var can be contextualized, see <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> for more details.\nIf <code>self</code> is shared the output variable will hold a strong reference to it.</p>\n</div></details></div></details>",0,"zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CVarEq%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#584\">Source</a><a href=\"#impl-Var%3CVarEq%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"struct\" href=\"zng_var/var_value/struct.VarEq.html\" title=\"struct zng_var::var_value::VarEq\">VarEq</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.flatten\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#588\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.flatten\" class=\"fn\">flatten</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.flat_map\" title=\"method zng_var::var::Var::flat_map\"><code>flat_map</code></a> to the inner variable.</p>\n</div></details></div></details>",0,"zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarLayout%3CT%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1658-1714\">Source</a><a href=\"#impl-VarLayout%3CT%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>&gt; <a class=\"trait\" href=\"zng_app/widget/trait.VarLayout.html\" title=\"trait zng_app::widget::VarLayout\">VarLayout</a>&lt;T&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1659-1664\">Source</a><a href=\"#method.layout\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout\" class=\"fn\">layout</a>(&amp;self) -&gt; T::<a class=\"associatedtype\" href=\"zng_layout/unit/trait.Layout2d.html#associatedtype.Px\" title=\"type zng_layout::unit::Layout2d::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout2d.html\" title=\"trait zng_layout::unit::Layout2d\">Layout2d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_dft\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1666-1671\">Source</a><a href=\"#method.layout_dft\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_dft\" class=\"fn\">layout_dft</a>(&amp;self, default: T::<a class=\"associatedtype\" href=\"zng_layout/unit/trait.Layout2d.html#associatedtype.Px\" title=\"type zng_layout::unit::Layout2d::Px\">Px</a>) -&gt; T::<a class=\"associatedtype\" href=\"zng_layout/unit/trait.Layout2d.html#associatedtype.Px\" title=\"type zng_layout::unit::Layout2d::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout2d.html\" title=\"trait zng_layout::unit::Layout2d\">Layout2d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context with <code>default</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_x\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1673-1678\">Source</a><a href=\"#method.layout_x\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_x\" class=\"fn\">layout_x</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>x</strong></em> axis.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_y\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1680-1685\">Source</a><a href=\"#method.layout_y\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_y\" class=\"fn\">layout_y</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>y</strong></em> axis.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_z\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1687-1692\">Source</a><a href=\"#method.layout_z\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_z\" class=\"fn\">layout_z</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>z</strong></em> axis.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_dft_x\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1694-1699\">Source</a><a href=\"#method.layout_dft_x\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_dft_x\" class=\"fn\">layout_dft_x</a>(&amp;self, default: <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a>) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>x</strong></em> axis with <code>default</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_dft_y\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1701-1706\">Source</a><a href=\"#method.layout_dft_y\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_dft_y\" class=\"fn\">layout_dft_y</a>(&amp;self, default: <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a>) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>y</strong></em> axis with <code>default</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_dft_z\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1708-1713\">Source</a><a href=\"#method.layout_dft_z\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_dft_z\" class=\"fn\">layout_dft_z</a>(&amp;self, default: <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a>) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>z</strong></em> axis with <code>default</code>.</div></details></div></details>","VarLayout<T>","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarSubscribe%3CT%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1440-1467\">Source</a><a href=\"#impl-VarSubscribe%3CT%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>&gt; <a class=\"trait\" href=\"zng_app/widget/trait.VarSubscribe.html\" title=\"trait zng_app::widget::VarSubscribe\">VarSubscribe</a>&lt;T&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.subscribe_when\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1441-1452\">Source</a><a href=\"#method.subscribe_when\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.subscribe_when\" class=\"fn\">subscribe_when</a>(\n    &amp;self,\n    op: <a class=\"enum\" href=\"zng_app/update/enum.UpdateOp.html\" title=\"enum zng_app::update::UpdateOp\">UpdateOp</a>,\n    widget_id: <a class=\"struct\" href=\"zng_app/widget/struct.WidgetId.html\" title=\"struct zng_app::widget::WidgetId\">WidgetId</a>,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class='docblock'>Register the widget to receive an <a href=\"zng_app/update/enum.UpdateOp.html\" title=\"enum zng_app::update::UpdateOp\"><code>UpdateOp</code></a> when this variable is new and the <code>predicate</code> approves the new value. <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.subscribe_when\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_pre_new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1454-1459\">Source</a><a href=\"#method.on_pre_new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.on_pre_new\" class=\"fn\">on_pre_new</a>&lt;H&gt;(&amp;self, handler: H) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    H: <a class=\"trait\" href=\"zng_app/handler/trait.AppHandler.html\" title=\"trait zng_app::handler::AppHandler\">AppHandler</a>&lt;<a class=\"struct\" href=\"zng_app/widget/struct.OnVarArgs.html\" title=\"struct zng_app::widget::OnVarArgs\">OnVarArgs</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Add a preview <code>handler</code> that is called every time this variable updates,\nthe handler is called before UI update. <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.on_pre_new\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1461-1466\">Source</a><a href=\"#method.on_new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.on_new\" class=\"fn\">on_new</a>&lt;H&gt;(&amp;self, handler: H) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    H: <a class=\"trait\" href=\"zng_app/handler/trait.AppHandler.html\" title=\"trait zng_app::handler::AppHandler\">AppHandler</a>&lt;<a class=\"struct\" href=\"zng_app/widget/struct.OnVarArgs.html\" title=\"struct zng_app::widget::OnVarArgs\">OnVarArgs</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Add a <code>handler</code> that is called every time this variable updates,\nthe handler is called after UI update. <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.on_new\">Read more</a></div></details></div></details>","VarSubscribe<T>","zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"],["<section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1438\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h3><div class=\"item-info\"><div class=\"stab empty-impl\">This impl block contains no items.</div></div><div class=\"docblock\"><p>Transition animations</p>\n</div></section>",0,"zng_app::event::command::CommandMetaVar","zng_app::event::command::ReadOnlyCommandMetaVar","zng_app::timer::DeadlineVar","zng_app::timer::TimerVar"]]],["zng_ext_image",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AnyVarSubscribe-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1435\">Source</a><a href=\"#impl-AnyVarSubscribe-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"zng_app/widget/trait.AnyVarSubscribe.html\" title=\"trait zng_app::widget::AnyVarSubscribe\">AnyVarSubscribe</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.subscribe\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1436\">Source</a><a href=\"#method.subscribe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.AnyVarSubscribe.html#tymethod.subscribe\" class=\"fn\">subscribe</a>(&amp;self, op: <a class=\"enum\" href=\"zng_app/update/enum.UpdateOp.html\" title=\"enum zng_app::update::UpdateOp\">UpdateOp</a>, widget_id: <a class=\"struct\" href=\"zng_app/widget/struct.WidgetId.html\" title=\"struct zng_app::widget::WidgetId\">WidgetId</a>) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class='docblock'>Register the widget to receive an <a href=\"zng_app/update/enum.UpdateOp.html\" title=\"enum zng_app::update::UpdateOp\"><code>UpdateOp</code></a> when this variable is new. <a href=\"zng_app/widget/trait.AnyVarSubscribe.html#tymethod.subscribe\">Read more</a></div></details></div></details>","AnyVarSubscribe","zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#22\">Source</a><a href=\"#impl-Clone-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#23\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.89.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#54\">Source</a><a href=\"#impl-Debug-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#55\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#42\">Source</a><a href=\"#impl-Deref-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#43\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#45\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CContextVar%3CT%3E%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/context_var.rs.html#175\">Source</a><a href=\"#impl-From%3CContextVar%3CT%3E%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"zng_var/var_impl/context_var/struct.ContextVar.html\" title=\"struct zng_var::var_impl::context_var::ContextVar\">ContextVar</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/context_var.rs.html#176\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"zng_var/var_impl/context_var/struct.ContextVar.html\" title=\"struct zng_var::var_impl::context_var::ContextVar\">ContextVar</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ContextVar<T>>","zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoVar%3CT%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/const_var.rs.html#34\">Source</a><a href=\"#impl-IntoVar%3CT%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"zng_var/var_impl/const_var/trait.IntoVar.html\" title=\"trait zng_var::var_impl::const_var::IntoVar\">IntoVar</a>&lt;T&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.into_var\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var_impl/const_var.rs.html#35\">Source</a><a href=\"#method.into_var\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_var/var_impl/const_var/trait.IntoVar.html#tymethod.into_var\" class=\"fn\">into_var</a>(self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></div></details>","IntoVar<T>","zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CAnyVar%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#35\">Source</a><a href=\"#impl-TryFrom%3CAnyVar%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a>&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#36\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#38\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(var: <a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;, &lt;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<AnyVar>","zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1440\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Value type.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1442\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.as_any\" class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"zng_var/var_any/struct.AnyVar.html\" title=\"struct zng_var::var_any::AnyVar\">AnyVar</a></h4></section></summary><div class=\"docblock\"><p>Reference the variable without the strong value type.</p>\n</div></details></div></details>",0,"zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1447\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Variable type.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1449\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.downgrade\" class=\"fn\">downgrade</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.WeakVar.html\" title=\"struct zng_var::var::WeakVar\">WeakVar</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a weak reference to this variable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_only\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1459\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.read_only\" class=\"fn\">read_only</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a clone of the var that is always read-only.</p>\n<p>The returned variable can still update if <code>self</code> is modified, but it does not have the <code>MODIFY</code> capability.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cow\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1468\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.cow\" class=\"fn\">cow</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a var that redirects to this variable until the first value update, then it disconnects as a separate variable.</p>\n<p>The return variable is <em>clone-on-write</em> and has the <code>MODIFY</code> capability independent of the source capabilities, when\na modify request is made the source value is cloned and offered for modification, if modified the source variable is dropped,\nif the modify closure does not update the source variable is retained.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_context\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1478\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.current_context\" class=\"fn\">current_context</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the underlying var in the current calling context.</p>\n<p>If this variable is <a href=\"zng_var/var_impl/struct.VarCapability.html#associatedconstant.CONTEXT\" title=\"associated constant zng_var::var_impl::VarCapability::CONTEXT\"><code>CONTEXT</code></a> returns a clone of the inner variable,\notherwise returns a clone of this variable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.var_eq\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1487\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.var_eq\" class=\"fn\">var_eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets if this variable is the same as <code>other</code>.</p>\n<p>If this variable is <a href=\"zng_var/var_impl/struct.VarCapability.html#associatedconstant.SHARE\" title=\"associated constant zng_var::var_impl::VarCapability::SHARE\"><code>SHARE</code></a> compares the <em>pointer</em>. If this variable is local this is always <code>false</code>.</p>\n</div></details></div></details>",0,"zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#232\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Value mapping.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#269\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map\" class=\"fn\">map</a>&lt;O&gt;(&amp;self, map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a read-only mapping variable.</p>\n<p>The <code>map</code> closure must produce a mapped value from this variable’s value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n_var = var(<span class=\"number\">0u32</span>);\n<span class=\"kw\">let </span>n_10_var = n_var.map(|n| <span class=\"kw-2\">*</span>n * <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>txt_var = n_10_var.map(|n| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>n &lt; <span class=\"number\">100 </span>{ <span class=\"macro\">formatx!</span>(<span class=\"string\">\"{n}!\"</span>) } <span class=\"kw\">else </span>{ <span class=\"macro\">formatx!</span>(<span class=\"string\">\"Done!\"</span>) });</code></pre></div>\n<p>In the example above the <code>txt_var</code> will update every time the <code>n_var</code> updates.</p>\n<h5 id=\"capabilities\"><a class=\"doc-anchor\" href=\"#capabilities\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped, the mapping variable is also static.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable and\nis called again for every update of this variable. The mapping variable is another shared reference and it holds\na strong reference to this variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n<p>The mapping variable is read-only, see <a href=\"zng_var/var/struct.Var.html#method.map_bidi\" title=\"method zng_var::var::Var::map_bidi\"><code>map_bidi</code></a> for read-write mapping.</p>\n<p>If the <code>map</code> closure produce an equal value the mapping variable will not update, see also <a href=\"zng_var/var/struct.Var.html#method.filter_map\" title=\"method zng_var::var::Var::filter_map\"><code>filter_map</code></a>\nto skip updating for some input values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_into\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#276-279\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_into\" class=\"fn\">map_into</a>&lt;O&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;O&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> that converts from <code>T</code> to <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\"><code>Into&lt;O&gt;</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_to_txt\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#289-291\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_to_txt\" class=\"fn\">map_to_txt</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;<a class=\"struct\" href=\"zng_txt/struct.Txt.html\" title=\"struct zng_txt::Txt\">Txt</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_txt/trait.ToTxt.html\" title=\"trait zng_txt::ToTxt\">ToTxt</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> that converts from <code>T</code> to <a href=\"zng_txt/struct.Txt.html\" title=\"struct zng_txt::Txt\"><code>Txt</code></a> using <a href=\"zng_txt/trait.ToTxt.html\" title=\"trait zng_txt::ToTxt\"><code>ToTxt</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_deref\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#302-305\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_deref\" class=\"fn\">map_deref</a>&lt;O&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = O&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> that references and clones <code>O</code> from <code>T</code> using <code>std::ops::Deref&lt;Target = O&gt;</code>.</p>\n<p>The mapping variable is read-only, see <a href=\"zng_var/var/struct.Var.html#method.map_deref_mut\" title=\"method zng_var::var::Var::map_deref_mut\"><code>map_deref_mut</code></a> for mutable referencing.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#344-348\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_map\" class=\"fn\">filter_map</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    fallback_init: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a mapping variable that can skip updates.</p>\n<p>The <code>map</code> closure is called for every update this variable and if it returns a new value the mapping variable updates.</p>\n<p>If the <code>map</code> closure does not produce a value on init the <code>fallback_init</code> closure is called.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n_var = var(<span class=\"number\">100u32</span>);\n<span class=\"kw\">let </span>txt_var = n_var.filter_map(|n| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>n &lt; <span class=\"number\">100 </span>{ <span class=\"prelude-val\">Some</span>(<span class=\"macro\">formatx!</span>(<span class=\"string\">\"{n}!\"</span>)) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">None </span>}, || <span class=\"string\">\"starting...\"</span>.into());</code></pre></div>\n<p>In the example above the <code>txt_var</code> will update every time the <code>n_var</code> updates with value <code>n &lt; 100</code>. Because\nthe <code>n_var</code> initial value does not match the filter the fallback value <code>\"starting...\"</code> is used.</p>\n<h5 id=\"capabilities-1\"><a class=\"doc-anchor\" href=\"#capabilities-1\">§</a>Capabilities</h5>\n<p>If this variable is static the closures are called immediately and dropped, the mapping variable is also static.</p>\n<p>If this variable is a shared reference the closures are called immediately to init the mapping variable and\nare called again for every update of this variable. The mapping variable is another shared reference and it holds\na strong reference to this variable.</p>\n<p>If this variable is contextual the initial closures call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n<p>The mapping variable is read-only, see <a href=\"zng_var/var/struct.Var.html#method.filter_map_bidi\" title=\"method zng_var::var::Var::filter_map_bidi\"><code>filter_map_bidi</code></a> for read-write mapping.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_try_into\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#355-359\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_try_into\" class=\"fn\">filter_try_into</a>&lt;O, I&gt;(&amp;self, fallback_init: I) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\">TryInto</a>&lt;O&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.filter_map\" title=\"method zng_var::var::Var::filter_map\"><code>filter_map</code></a> that tries to convert from <code>T</code> to <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\"><code>TryInto&lt;O&gt;</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_parse\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#368-372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_parse\" class=\"fn\">filter_parse</a>&lt;O, I&gt;(&amp;self, fallback_init: I) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.str.html\">str</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.filter_map\" title=\"method zng_var::var::Var::filter_map\"><code>filter_map</code></a> that tries to convert from <code>T</code> to <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\"><code>FromStr</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#405-409\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_bidi\" class=\"fn\">map_bidi</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    map_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a bidirectional mapping variable.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n_var = var(<span class=\"number\">0u32</span>);\n<span class=\"kw\">let </span>n_100_var = n_var.map_bidi(|n| n * <span class=\"number\">100</span>, |n_100| n_100 / <span class=\"number\">100</span>);</code></pre></div>\n<p>In the example above the <code>n_100_var</code> will update every time the <code>n_var</code> updates and the <code>n_var</code> will\nupdate every time the <code>n_100_var</code> updates.</p>\n<h5 id=\"capabilities-2\"><a class=\"doc-anchor\" href=\"#capabilities-2\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped, the mapping variable is also static,\nthe <code>map_back</code> closure is ignored.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable.\nThe mapping variable is another shared reference and it holds a strong reference to this variable.\nThe <code>map</code> closure is called again for every update of this variable that is not caused by the mapping variable.\nThe <code>map_back</code> closure is called for every update of the mapping variable that was not caused by this variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_bidi_modify\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#457-461\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_bidi_modify\" class=\"fn\">map_bidi_modify</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    modify_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a bidirectional mapping variable that modifies back instead of mapping back.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>list_var = var(<span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\n<span class=\"kw\">let </span>first_var = list_var.map_bidi_modify(\n    <span class=\"comment\">// map:\n    </span>|l| l.first().copied().unwrap_or(<span class=\"string\">'_'</span>),\n    <span class=\"comment\">// modify_back:\n    </span>|c, l| <span class=\"kw\">if </span>l.is_empty() { l.push(<span class=\"kw-2\">*</span>c) } <span class=\"kw\">else </span>{ l[<span class=\"number\">0</span>] = <span class=\"kw-2\">*</span>c },\n);</code></pre></div>\n<p>In the example above the <code>first_var</code> represents the first item on the vector in <code>list_var</code>. Note that the <code>map</code> closure\nworks the same as in <a href=\"zng_var/var/struct.Var.html#method.map_bidi\" title=\"method zng_var::var::Var::map_bidi\"><code>map_bidi</code></a>, but the <code>modify_back</code> closure modifies the list. This is not a mapping that can be declared\nwith <a href=\"zng_var/var/struct.Var.html#method.map_bidi\" title=\"method zng_var::var::Var::map_bidi\"><code>map_bidi</code></a> as the mapping variable does not have the full list to map back.</p>\n<h5 id=\"capabilities-3\"><a class=\"doc-anchor\" href=\"#capabilities-3\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped, the mapping variable is also static,\nthe <code>modify_back</code> closure is ignored.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable.\nThe mapping variable is another shared reference and it holds a strong reference to this variable.\nThe <code>map</code> closure is called again for every update of this variable that is not caused by the mapping variable.\nThe <code>modify_back</code> closure is called for every update of the mapping variable that was not caused by this variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n<p>Like other mappings and bindings cyclic updates are avoided automatically, if the <code>modify_back</code> closure touches/updates the value\na var instance tag is inserted after the closure returns, you do not need to mark it manually.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_into_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#473-476\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_into_bidi\" class=\"fn\">map_into_bidi</a>&lt;O&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;O&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map_bidi\" title=\"method zng_var::var::Var::map_bidi\"><code>map_bidi</code></a> that converts between <code>T</code> and <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\"><code>Into</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_deref_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#485-489\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.map_deref_mut\" class=\"fn\">map_deref_mut</a>&lt;O&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = O, Target = O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.map_bidi_modify\" title=\"method zng_var::var::Var::map_bidi_modify\"><code>map_bidi_modify</code></a> that references and clones <code>O</code> from <code>T</code> using <code>std::ops::Deref&lt;Target = O&gt;</code> and\nmodifies back using <code>std::ops::DerefMut&lt;Target = O&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#534-539\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_map_bidi\" class=\"fn\">filter_map_bidi</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    map_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    fallback_init: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a bidirectional mapping variable that can skip updates.</p>\n<p>If the <code>map</code> closure does not produce a value on init the <code>fallback_init</code> closure is called.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n_var = var(<span class=\"number\">0u32</span>);\n<span class=\"kw\">let </span>n_100_var = n_var.filter_map_bidi(\n    |n| <span class=\"prelude-val\">Some</span>(n * <span class=\"number\">100</span>),\n    |n_100| {\n        <span class=\"kw\">let </span>r = n_100 / <span class=\"number\">100</span>;\n        <span class=\"kw\">if </span>r &lt; <span class=\"number\">100 </span>{ <span class=\"prelude-val\">Some</span>(r) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">None </span>}\n    },\n    || <span class=\"number\">0</span>,\n);</code></pre></div>\n<p>In the example above the <code>n_100_var</code> will update every time the <code>n_var</code> updates with any value and the <code>n_var</code> will\nupdate every time the <code>n_100_var</code> updates with a value that <code>(n_100 / 100) &lt; 100</code>.</p>\n<h5 id=\"capabilities-4\"><a class=\"doc-anchor\" href=\"#capabilities-4\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped, the mapping variable is also static,\nthe <code>map_back</code> closure is ignored.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable.\nThe mapping variable is another shared reference and it holds a strong reference to this variable.\nThe <code>map</code> closure is called again for every update of this variable that is not caused by the mapping variable.\nThe <code>map_back</code> closure is called for every update of the mapping variable that was not caused by this variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_try_into_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#552-557\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.filter_try_into_bidi\" class=\"fn\">filter_try_into_bidi</a>&lt;O, I&gt;(&amp;self, fallback_init: I) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\">TryInto</a>&lt;T&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\">TryInto</a>&lt;O&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Create a <a href=\"zng_var/var/struct.Var.html#method.filter_map_bidi\" title=\"method zng_var::var::Var::filter_map_bidi\"><code>filter_map_bidi</code></a> that tries to convert between <code>T</code> to <code>O</code> using <a href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.TryInto.html\" title=\"trait core::convert::TryInto\"><code>TryInto</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#580\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.flat_map\" class=\"fn\">flat_map</a>&lt;O&gt;(\n    &amp;self,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a flat mapping variable that <em>unwraps</em> an inner variable stored in the the value of this variable.</p>\n<h5 id=\"capabilities-5\"><a class=\"doc-anchor\" href=\"#capabilities-5\">§</a>Capabilities</h5>\n<p>If this variable is static the <code>map</code> closure is called immediately and dropped and the inner variable is returned.</p>\n<p>If this variable is a shared reference the <code>map</code> closure is called immediately to init the mapping variable and\nis called again for every update of this variable. The mapping variable is another shared reference and it holds\na strong reference to this variable and to the inner variable.</p>\n<p>If this variable is contextual the initial <code>map</code> call is deferred until first usage of the mapping variable. The\nmapping variable is also contextual and will init for every context it is used in.</p>\n<p>The mapping variable has the same capabilities of the inner variable, plus <a href=\"zng_var/var_impl/struct.VarCapability.html#associatedconstant.MODIFY_CHANGES\" title=\"associated constant zng_var::var_impl::VarCapability::MODIFY_CHANGES\"><code>MODIFY_CHANGES</code></a>. When the inner variable\nis writeable the return variable is too.</p>\n</div></details></div></details>",0,"zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#593\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Binding</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#622\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind\" class=\"fn\">bind</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new values from this variable.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = var(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>b = var(<span class=\"number\">0</span>);\n\na.bind(<span class=\"kw-2\">&amp;</span>b).perm();</code></pre></div>\n<p>In the example above the variable <code>b</code> will be set every time the variable <code>a</code> updates. Note that the current\nvalue is not propagated, only updates. You can use <a href=\"zng_var/var/struct.Var.html#method.set_bind\" title=\"method zng_var::var::Var::set_bind\"><code>set_bind</code></a> to assign the current value and bind.</p>\n<h5 id=\"capabilities\"><a class=\"doc-anchor\" href=\"#capabilities\">§</a>Capabilities</h5>\n<p>If this variable is const or the other variable is always read-only does nothing and returns a dummy handle.</p>\n<p>If any variable is contextual the binding is set on the current context inner variable.</p>\n<p>Neither variable holds the other, only a weak reference is used, if either variable or the handle is dropped the binding\nis dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_bind\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#653\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_bind\" class=\"fn\">set_bind</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class=\"docblock\"><p>Like <a href=\"zng_var/var/struct.Var.html#method.bind\" title=\"method zng_var::var::Var::bind\"><code>bind</code></a> but also sets <code>other</code> to the current value.</p>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = var(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>b = var(<span class=\"number\">0</span>);\n\na.set_bind(<span class=\"kw-2\">&amp;</span>b).perm();</code></pre></div>\n<p>In the example above the variable <code>b</code> will be set to the current value of <code>a</code> and every time the variable <code>a</code> updates.</p>\n<h5 id=\"capabilities-1\"><a class=\"doc-anchor\" href=\"#capabilities-1\">§</a>Capabilities</h5>\n<p>If this variable is const or the other variable is always read-only does nothing and returns a dummy handle.</p>\n<p>If any variable is contextual the binding is set on the current context inner variable.</p>\n<p>Neither variable holds the other, only a weak reference is used, if either variable or the handle is dropped the binding\nis dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#677\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_map\" class=\"fn\">bind_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new values mapped from this variable.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind\" title=\"method zng_var::var::Var::bind\"><code>bind</code></a>, but the <code>map</code> closure is called to produce the new value for <code>other</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = var(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>b = var(Txt::from(<span class=\"string\">\"\"</span>));\n\na.bind_map(<span class=\"kw-2\">&amp;</span>b, |<span class=\"kw-2\">&amp;</span>a| <span class=\"macro\">formatx!</span>(<span class=\"string\">\"{:?}\"</span>, a * <span class=\"number\">2</span>)).perm();</code></pre></div>\n<p>In the example above every time the variable <code>a</code> updates the variable <code>b</code> will be set to the text representation of the value times two.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_bind_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#687\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_bind_map\" class=\"fn\">set_bind_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <a href=\"zng_var/var/struct.Var.html#method.bind_map\" title=\"method zng_var::var::Var::bind_map\"><code>bind_map</code></a> but also sets <code>other</code> to the current value.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.set_bind\" title=\"method zng_var::var::Var::set_bind\"><code>set_bind</code></a>, but the <code>map</code> closure is called to produce the new value for <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_modify\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#717\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_modify\" class=\"fn\">bind_modify</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    modify: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, O&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to be modified when this variable updates.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind\" title=\"method zng_var::var::Var::bind\"><code>bind</code></a>, but the <code>modify</code> closure is called to modify <code>other</code> using a reference to the new value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = var(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>b = var(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\na.bind_modify(<span class=\"kw-2\">&amp;</span>b, |<span class=\"kw-2\">&amp;</span>a, b| {\n    <span class=\"kw\">if </span>b.is_empty() {\n        b.push(a);\n    } <span class=\"kw\">else </span>{\n        b[<span class=\"number\">0</span>] = a;\n    }\n})\n.perm();</code></pre></div>\n<p>In the example above the variable <code>b</code> first element is set to the updated value of <code>a</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#730\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_bidi\" class=\"fn\">bind_bidi</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandles.html\" title=\"struct zng_var::var_impl::VarHandles\">VarHandles</a></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new values from this variable and this variable to receive new values from <code>other</code>.</p>\n<h5 id=\"capabilities-2\"><a class=\"doc-anchor\" href=\"#capabilities-2\">§</a>Capabilities</h5>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind\" title=\"method zng_var::var::Var::bind\"><code>bind</code></a>, it is equivalent of setting two bindings.</p>\n<p>The bindings are protected against cyclic updates, like all other mappings and bindings.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_map_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#740-745\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_map_bidi\" class=\"fn\">bind_map_bidi</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    map_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandles.html\" title=\"struct zng_var::var_impl::VarHandles\">VarHandles</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new mapped values from this variable and this variable to receive new mapped values from <code>other</code>.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind_bidi\" title=\"method zng_var::var::Var::bind_bidi\"><code>bind_bidi</code></a>, but the <code>map</code> closure is called to produce the new value for <code>other</code>\nand <code>map_back</code> is called to produce the new value for this variable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_modify_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#759-764\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_modify_bidi\" class=\"fn\">bind_modify_bidi</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    modify: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, O&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    modify_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandles.html\" title=\"struct zng_var::var_impl::VarHandles\">VarHandles</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to be modified when this variable updates and this variable to be modified when <code>other</code> updates.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind_bidi\" title=\"method zng_var::var::Var::bind_bidi\"><code>bind_bidi</code></a>, but the <code>modify</code> closure is called to modify <code>other</code>\nand <code>modify_back</code> is called to modify this variable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_filter_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#777\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_filter_map\" class=\"fn\">bind_filter_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new values filtered mapped from this variable.</p>\n<p>This has the same capabilities as <a href=\"zng_var/var/struct.Var.html#method.bind_map\" title=\"method zng_var::var::Var::bind_map\"><code>bind_map</code></a>, except that <code>other</code> will only receive a new value if <code>map</code> returns a value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_filter_map_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#783-788\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.bind_filter_map_bidi\" class=\"fn\">bind_filter_map_bidi</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    map_back: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandles.html\" title=\"struct zng_var::var_impl::VarHandles\">VarHandles</a><div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Bind <code>other</code> to receive the new filtered mapped values from this variable and this variable to receive\nnew filtered mapped values from <code>other</code>.</p>\n</div></details></div></details>",0,"zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#61\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Value.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#63\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.with\" class=\"fn\">with</a>&lt;O&gt;(&amp;self, visitor: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O) -&gt; O</h4></section></summary><div class=\"docblock\"><p>Visit a reference to the current value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#73\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.get\" class=\"fn\">get</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Get a clone of the current value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_into\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#80\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.get_into\" class=\"fn\">get_into</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\"><p>Get a clone of the current value into <code>value</code>.</p>\n<p>This uses <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" title=\"method core::clone::Clone::clone_from\"><code>Clone::clone_from</code></a> to reuse the <code>value</code> memory if supported.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_new\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#87\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.with_new\" class=\"fn\">with_new</a>&lt;O&gt;(&amp;self, visitor: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; O) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;O&gt;</h4></section></summary><div class=\"docblock\"><p>Visit a reference to the current value if it <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_new\" title=\"method zng_var::var_any::AnyVar::is_new\"><code>is_new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_new\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#94\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.get_new\" class=\"fn\">get_new</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a clone of the current value if it <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_new\" title=\"method zng_var::var_any::AnyVar::is_new\"><code>is_new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_new_into\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#103\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.get_new_into\" class=\"fn\">get_new_into</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets a clone of the current value into <code>value</code> if it <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_new\" title=\"method zng_var::var_any::AnyVar::is_new\"><code>is_new</code></a>.</p>\n<p>This uses <a href=\"https://doc.rust-lang.org/1.89.0/core/clone/trait.Clone.html#method.clone_from\" title=\"method core::clone::Clone::clone_from\"><code>Clone::clone_from</code></a> to reuse the <code>value</code> memory if supported.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_set\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#108\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.try_set\" class=\"fn\">try_set</a>(&amp;self, new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"zng_var/var_impl/struct.VarIsReadOnlyError.html\" title=\"struct zng_var::var_impl::VarIsReadOnlyError\">VarIsReadOnlyError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule <code>new_value</code> to be assigned next update.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#118\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set\" class=\"fn\">set</a>(&amp;self, new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Schedule <code>new_value</code> to be assigned next update.</p>\n<p>If the variable is read-only this is ignored and a DEBUG level log is recorded.\nUse <a href=\"zng_var/var/struct.Var.html#method.try_set\" title=\"method zng_var::var::Var::try_set\"><code>try_set</code></a> to get an error for read-only vars.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_modify\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#125\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.try_modify\" class=\"fn\">try_modify</a>(\n    &amp;self,\n    modify: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"zng_var/var_impl/struct.VarIsReadOnlyError.html\" title=\"struct zng_var::var_impl::VarIsReadOnlyError\">VarIsReadOnlyError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule <code>modify</code> to be called on the value for the next update.</p>\n<p>If the <a href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\"><code>VarModify</code></a> value is deref mut the variable will notify an update.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.modify\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#139\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.modify\" class=\"fn\">modify</a>(\n    &amp;self,\n    modify: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n)</h4></section></summary><div class=\"docblock\"><p>Schedule <code>modify</code> to be called on the value for the next update.</p>\n<p>If the <a href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\"><code>VarModify</code></a> value is deref mut the variable will notify an update.</p>\n<p>If the variable is read-only this is ignored and a DEBUG level log is recorded.\nUse <a href=\"zng_var/var/struct.Var.html#method.try_modify\" title=\"method zng_var::var::Var::try_modify\"><code>try_modify</code></a> to get an error for read-only vars.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_set_from\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#147\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.try_set_from\" class=\"fn\">try_set_from</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"zng_var/var_impl/struct.VarIsReadOnlyError.html\" title=\"struct zng_var::var_impl::VarIsReadOnlyError\">VarIsReadOnlyError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule a new <code>value</code> for the variable, it will be set in the end of the current app update to the updated\nvalue of <code>other</code>, so if the other var has already scheduled an update, the updated value will be used.</p>\n<p>This can be used just before creating a binding to start with synchronized values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_from\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#160\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_from\" class=\"fn\">set_from</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Schedule a new <code>value</code> for the variable, it will be set in the end of the current app update to the updated\nvalue of <code>other</code>, so if the other var has already scheduled an update, the updated value will be used.</p>\n<p>This can be used just before creating a binding to start with synchronized values.</p>\n<p>If the variable is read-only this is ignored and a DEBUG level log is recorded.\nUse <a href=\"zng_var/var/struct.Var.html#method.try_set_from\" title=\"method zng_var::var::Var::try_set_from\"><code>try_set_from</code></a> to get an error for read-only vars.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_set_from_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#167-171\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.try_set_from_map\" class=\"fn\">try_set_from_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"zng_var/var_impl/struct.VarIsReadOnlyError.html\" title=\"struct zng_var::var_impl::VarIsReadOnlyError\">VarIsReadOnlyError</a>&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <a href=\"zng_var/var/struct.Var.html#method.try_set_from\" title=\"method zng_var::var::Var::try_set_from\"><code>try_set_from</code></a>, but uses <code>map</code> to produce the new value from the updated value of <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_from_map\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#183\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_from_map\" class=\"fn\">set_from_map</a>&lt;O&gt;(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;O&gt;,\n    map: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;O</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n)<div class=\"where\">where\n    O: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h4></section></summary><div class=\"docblock\"><p>Like <a href=\"zng_var/var/struct.Var.html#method.set_from\" title=\"method zng_var::var::Var::set_from\"><code>set_from</code></a>, but uses <code>map</code> to produce the new value from the updated value of <code>other</code>.</p>\n<p>If the variable is read-only this is ignored and a DEBUG level log is recorded.\nUse <a href=\"zng_var/var/struct.Var.html#method.try_set_from_map\" title=\"method zng_var::var::Var::try_set_from_map\"><code>try_set_from_map</code></a> to get an error for read-only vars.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hook\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.hook\" class=\"fn\">hook</a>(\n    &amp;self,\n    on_update: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;<a class=\"struct\" href=\"zng_var/var/struct.VarHookArgs.html\" title=\"struct zng_var::var::VarHookArgs\">VarHookArgs</a>&lt;'_, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class=\"docblock\"><p>Setups a callback for just after the variable value update is applied, the closure runs in the root app context, just like\nthe <code>modify</code> closure. The closure must return <code>true</code> to be retained and <code>false</code> to be dropped.</p>\n<p>If you modify another variable in the closure modification applies in the same update, variable mapping and\nbinding is implemented using hooks.</p>\n<p>The variable store a weak reference to the callback if it has the <code>MODIFY</code> or <code>CAPS_CHANGE</code> capabilities, otherwise\nthe callback is discarded and <a href=\"zng_var/var_impl/struct.VarHandle.html#method.dummy\" title=\"associated function zng_var::var_impl::VarHandle::dummy\"><code>VarHandle::dummy</code></a> returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_match\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#202\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.wait_match\" class=\"fn\">wait_match</a>(\n    &amp;self,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a></h4></section></summary><div class=\"docblock\"><p>Awaits for a value that passes the <code>predicate</code>, including the current value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_next\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#210\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.wait_next\" class=\"fn\">wait_next</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a></h4></section></summary><div class=\"docblock\"><p>Awaits for an update them <a href=\"zng_var/var/struct.Var.html#method.get\" title=\"method zng_var::var::Var::get\"><code>get</code></a> the value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace_value\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#227\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.trace_value\" class=\"fn\">trace_value</a>&lt;S&gt;(\n    &amp;self,\n    enter_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;<a class=\"struct\" href=\"zng_var/var/struct.VarHookArgs.html\" title=\"struct zng_var::var::VarHookArgs\">VarHookArgs</a>&lt;'_, T&gt;) -&gt; S + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Debug helper for tracing the lifetime of a value in this variable.</p>\n<p>The <code>enter_value</code> closure is called every time the variable updates, it can return\nan implementation agnostic <em>scope</em> or <em>span</em> <code>S</code> that is only dropped when the variable updates again.</p>\n<p>The <code>enter_value</code> is also called immediately when this method is called to start tracking the first value.</p>\n<p>Returns a <a href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\"><code>VarHandle</code></a> that can be used to stop tracing.</p>\n<p>If this variable can never update the span is immediately dropped and a dummy handle is returned.</p>\n</div></details></div></details>",0,"zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#797\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3><div class=\"docblock\"><p>Animation</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.animate\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#838\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.animate\" class=\"fn\">animate</a>(\n    &amp;self,\n    animate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Animation.html\" title=\"struct zng_var::animation::Animation\">Animation</a>, &amp;mut <a class=\"struct\" href=\"zng_var/var_impl/struct.VarModify.html\" title=\"struct zng_var::var_impl::VarModify\">VarModify</a>&lt;'_, '_, T&gt;) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Schedule a custom animation that targets this variable.</p>\n<p>The <code>animate</code> closure is called every frame, starting after next frame, the closure inputs are\nthe <a href=\"zng_var/animation/struct.Animation.html\" title=\"struct zng_var::animation::Animation\"><code>Animation</code></a> args and <em>modify</em> access to the variable value, the args\ncan be used to calculate the new variable value and to control or stop the animation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Customs animation that displays the animation elapsed time:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>status = var(Txt::from(<span class=\"string\">\"not animating\"</span>));\n\nstatus\n    .animate(|animation, value| {\n        <span class=\"kw\">let </span>elapsed = animation.elapsed_dur();\n        <span class=\"kw\">if </span>elapsed &lt; <span class=\"number\">5</span>.secs() {\n            value.set(<span class=\"macro\">formatx!</span>(<span class=\"string\">\"animating: elapsed {}ms\"</span>, elapsed.as_millis()));\n        } <span class=\"kw\">else </span>{\n            animation.stop();\n            value.set(<span class=\"string\">\"not animating\"</span>);\n        }\n    })\n    .perm();</code></pre></div>\n<h5 id=\"capabilities\"><a class=\"doc-anchor\" href=\"#capabilities\">§</a>Capabilities</h5>\n<p>If the variable is always read-only no animation is created and a dummy handle returned.</p>\n<p>If this var is contextual the animation targets the current context var.</p>\n<p>The animation is stopped if this variable is dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sequence\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#880\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.sequence\" class=\"fn\">sequence</a>(\n    &amp;self,\n    animate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class=\"docblock\"><p>Schedule animations started by <code>animate</code>, the closure is called once at the start to begin, then again every time\nthe variable stops animating.</p>\n<p>This can be used to create a sequence of animations or to repeat an animation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Running multiple animations in sequence:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>status = var(Txt::from(<span class=\"string\">\"not animating\"</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stage = <span class=\"number\">0</span>;\nstatus\n    .sequence(<span class=\"kw\">move </span>|status| {\n        stage += <span class=\"number\">1</span>;\n        <span class=\"kw\">if </span>stage &lt; <span class=\"number\">5 </span>{\n            status.animate(<span class=\"kw\">move </span>|animation, value| {\n                <span class=\"kw\">let </span>elapsed = animation.elapsed_stop(<span class=\"number\">5</span>.secs());\n                value.set(<span class=\"macro\">formatx!</span>(<span class=\"string\">\"animation {stage}: {}\"</span>, elapsed.pct()));\n            })\n        } <span class=\"kw\">else </span>{\n            status.set(<span class=\"string\">\"not animating\"</span>);\n            AnimationHandle::dummy()\n        }\n    })\n    .perm();</code></pre></div>\n<h5 id=\"capabilities-1\"><a class=\"doc-anchor\" href=\"#capabilities-1\">§</a>Capabilities</h5>\n<p>The sequence stops when <code>animate</code> returns a dummy handle, or the variable is modified outside of <code>animate</code>,\nor animations are disabled, or the returned handle is dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#909-917\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease\" class=\"fn\">set_ease</a>(\n    &amp;self,\n    start_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    end_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule an easing transition from the <code>start_value</code> to <code>end_value</code>.</p>\n<p>The variable updates every time the <a href=\"zng_var/animation/easing/type.EasingStep.html\" title=\"type zng_var::animation::easing::EasingStep\"><code>EasingStep</code></a> for each frame changes and a different value is sampled.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>progress = var(<span class=\"number\">0</span>.pct());\n\nprogress.set_ease(<span class=\"number\">0</span>.pct(), <span class=\"number\">100</span>.pct(), <span class=\"number\">5</span>.secs(), easing::linear).perm();</code></pre></div>\n<p>Variable is reset to 0% at the start and them transition to 100% in 5 seconds with linear progression.</p>\n<h5 id=\"capabilities-2\"><a class=\"doc-anchor\" href=\"#capabilities-2\">§</a>Capabilities</h5>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animation capabilities.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_oci\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#930-938\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_oci\" class=\"fn\">set_ease_oci</a>(\n    &amp;self,\n    start_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    end_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Oscillate between <code>start_value</code> to <code>end_value</code> with an easing transition.</p>\n<p>The <code>duration</code> defines the easing duration between the two values. The animation will continue running\nuntil the handle or the variable is dropped.</p>\n<p>Note that you can use <a href=\"zng_var/var/struct.Var.html#method.sequence\" title=\"method zng_var::var::Var::sequence\"><code>sequence</code></a> to create more complex looping animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#950-959\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_with\" class=\"fn\">set_ease_with</a>(\n    &amp;self,\n    start_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    end_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule an easing transition from the <code>start_value</code> to <code>end_value</code> using a custom value sampler.</p>\n<p>The variable updates every time the <a href=\"zng_var/animation/easing/type.EasingStep.html\" title=\"type zng_var::animation::easing::EasingStep\"><code>EasingStep</code></a> for each frame changes and a different value is sampled.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animation capabilities.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_oci_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#971-980\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_oci_with\" class=\"fn\">set_ease_oci_with</a>(\n    &amp;self,\n    start_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    end_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Oscillate between <code>start_value</code> to <code>end_value</code> with an easing transition using a custom value sampler.</p>\n<p>The <code>duration</code> defines the easing duration between the two values.</p>\n<p>Note that you can use <a href=\"zng_var/var/struct.Var.html#method.sequence\" title=\"method zng_var::var::Var::sequence\"><code>sequence</code></a> to create more complex looping animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#992-999\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease\" class=\"fn\">ease</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule an easing transition from the current value to <code>new_value</code>.</p>\n<p>The variable updates every time the <a href=\"zng_var/animation/easing/type.EasingStep.html\" title=\"type zng_var::animation::easing::EasingStep\"><code>EasingStep</code></a> for each frame changes and a different value is sampled.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animation capabilities.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_oci\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1011-1018\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_oci\" class=\"fn\">ease_oci</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Oscillate between the current value and <code>new_value</code> with an easing transition.</p>\n<p>The <code>duration</code> defines the easing duration between the two values.</p>\n<p>Note that you can use <a href=\"zng_var/var/struct.Var.html#method.sequence\" title=\"method zng_var::var::Var::sequence\"><code>sequence</code></a> to create more complex looping animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1030-1038\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_with\" class=\"fn\">ease_with</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule an easing transition from the current value to <code>new_value</code> using a custom value sampler.</p>\n<p>The variable updates every time the <a href=\"zng_var/animation/easing/type.EasingStep.html\" title=\"type zng_var::animation::easing::EasingStep\"><code>EasingStep</code></a> for each frame changes and a different value is sampled.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animation capabilities.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_oci_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1050-1058\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_oci_with\" class=\"fn\">ease_oci_with</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Oscillate between the current value and <code>new_value</code> with an easing transition and a custom value sampler.</p>\n<p>The <code>duration</code> defines the easing duration between the two values.</p>\n<p>Note that you can use <a href=\"zng_var/var/struct.Var.html#method.sequence\" title=\"method zng_var::var::Var::sequence\"><code>sequence</code></a> to create more complex looping animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_keyed\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1070-1077\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_keyed\" class=\"fn\">set_ease_keyed</a>(\n    &amp;self,\n    keys: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule a keyframed transition animation for the variable, starting from the first key.</p>\n<p>The variable will be set to the first keyframe, then animated across all other keys.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_ease_keyed_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1089-1097\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_ease_keyed_with\" class=\"fn\">set_ease_keyed_with</a>(\n    &amp;self,\n    keys: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.TransitionKeyed.html\" title=\"struct zng_var::animation::TransitionKeyed\">TransitionKeyed</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule a keyframed transition animation for the variable, starting from the first key, using a custom value sampler.</p>\n<p>The variable will be set to the first keyframe, then animated across all other keys.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_keyed\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1113-1120\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_keyed\" class=\"fn\">ease_keyed</a>(\n    &amp;self,\n    keys: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule a keyframed transition animation for the variable, starting from the current value.</p>\n<p>The variable will be set to the first keyframe, then animated across all other keys.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ease_keyed_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1132-1140\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.ease_keyed_with\" class=\"fn\">ease_keyed_with</a>(\n    &amp;self,\n    keys: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.TransitionKeyed.html\" title=\"struct zng_var::animation::TransitionKeyed\">TransitionKeyed</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Schedule a keyframed transition animation for the variable, starting from the current value, using a custom value sampler.</p>\n<p>The variable will be set to the first keyframe, then animated across all other keys.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1156\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.step\" class=\"fn\">step</a>(&amp;self, new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;, delay: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Set the variable to <code>new_value</code> after a <code>delay</code>.</p>\n<p>The variable <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_animating\" title=\"method zng_var::var_any::AnyVar::is_animating\"><code>is_animating</code></a> until the delay elapses and the value is set.</p>\n<p>See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step_oci\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1161\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.step_oci\" class=\"fn\">step_oci</a>(\n    &amp;self,\n    new_value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    delay: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Oscillate between the current value and <code>new_value</code>, every time the <code>delay</code> elapses the variable is set to the next value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_step_oci\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1167\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.set_step_oci\" class=\"fn\">set_step_oci</a>(\n    &amp;self,\n    from: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    to: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    delay: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Oscillate between <code>from</code> and <code>to</code>, the variable is set to <code>from</code> to start and every time the <code>delay</code> elapses\nthe variable is set to the next value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1200-1205\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.steps\" class=\"fn\">steps</a>(\n    &amp;self,\n    steps: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>, T)&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\">AnimationHandle</a></h4></section></summary><div class=\"docblock\"><p>Set the variable to a sequence of values as a time <code>duration</code> elapses.</p>\n<p>An animation curve is used to find the first factor in <code>steps</code> above or at the curve line at the current time,\nthe variable is set to this step value, continuing animating across the next steps until the last or the animation end.\nThe variable <a href=\"zng_var/var_any/struct.AnyVar.html#method.is_animating\" title=\"method zng_var::var_any::AnyVar::is_animating\"><code>is_animating</code></a> from the start, even if no step applies and stays <em>animating</em> until the last <em>step</em> applies\nor the duration is reached.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Creates a variable that outputs text every 5% of a 5 seconds animation, advanced linearly.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>steps = (<span class=\"number\">0</span>..=<span class=\"number\">100</span>).step_by(<span class=\"number\">5</span>).map(|i| (i.pct().fct(), <span class=\"macro\">formatx!</span>(<span class=\"string\">\"{i}%\"</span>))).collect();\ntext_var.steps(steps, <span class=\"number\">5</span>.secs(), easing::linear)</code></pre></div>\n<p>The variable is set to <code>\"0%\"</code>, after 5% of the <code>duration</code> elapses it is set to <code>\"5%\"</code> and so on\nuntil the value is set to <code>\"100%</code> at the end of the animation.</p>\n<p>Returns an <a href=\"zng_var/animation/struct.AnimationHandle.html\" title=\"struct zng_var::animation::AnimationHandle\"><code>AnimationHandle</code></a>. See <a href=\"zng_var/var/struct.Var.html#method.animate\" title=\"method zng_var::var::Var::animate\"><code>Var::animate</code></a> for details about animations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chase\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1219-1226\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.chase\" class=\"fn\">chase</a>(\n    &amp;self,\n    first_target: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;T&gt;,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/animation/struct.ChaseAnimation.html\" title=\"struct zng_var::animation::ChaseAnimation\">ChaseAnimation</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Starts an easing animation that <em>chases</em> a target value that can be changed using the <a href=\"zng_var/animation/struct.ChaseAnimation.html\" title=\"struct zng_var::animation::ChaseAnimation\"><code>ChaseAnimation&lt;T&gt;</code></a> handle.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.easing\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1255-1257\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.easing\" class=\"fn\">easing</a>(\n    &amp;self,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a vars that <a href=\"zng_var/var/struct.Var.html#method.ease\" title=\"method zng_var::var::Var::ease\"><code>ease</code></a> to each new value of <code>self</code>.</p>\n<p>Note that the mapping var can be <a href=\"zng_var/var_impl/contextual_var/fn.contextual_var.html\" title=\"fn zng_var::var_impl::contextual_var::contextual_var\">contextualized</a>, see <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> for more details.</p>\n<p>If <code>self</code> can change the output variable will keep it alive.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.easing_with\" class=\"method\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1269-1276\">Source</a><h4 class=\"code-header\">pub fn <a href=\"zng_var/var/struct.Var.html#tymethod.easing_with\" class=\"fn\">easing_with</a>(\n    &amp;self,\n    duration: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n    easing: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"struct\" href=\"zng_var/animation/easing/struct.EasingTime.html\" title=\"struct zng_var::animation::easing::EasingTime\">EasingTime</a>) -&gt; <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    sampler: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;<a class=\"struct\" href=\"zng_var/animation/struct.Transition.html\" title=\"struct zng_var::animation::Transition\">Transition</a>&lt;T&gt;, <a class=\"struct\" href=\"zng_unit/factor/struct.Factor.html\" title=\"struct zng_unit::factor::Factor\">Factor</a>) -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a vars that <a href=\"zng_var/var/struct.Var.html#method.ease_with\" title=\"method zng_var::var::Var::ease_with\"><code>ease_with</code></a> to each new value of <code>self</code>.</p>\n<p>Note that the mapping var can be contextualized, see <a href=\"zng_var/var/struct.Var.html#method.map\" title=\"method zng_var::var::Var::map\"><code>map</code></a> for more details.\nIf <code>self</code> is shared the output variable will hold a strong reference to it.</p>\n</div></details></div></details>",0,"zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarLayout%3CT%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1658\">Source</a><a href=\"#impl-VarLayout%3CT%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"zng_app/widget/trait.VarLayout.html\" title=\"trait zng_app::widget::VarLayout\">VarLayout</a>&lt;T&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1659-1661\">Source</a><a href=\"#method.layout\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout\" class=\"fn\">layout</a>(&amp;self) -&gt; &lt;T as <a class=\"trait\" href=\"zng_layout/unit/trait.Layout2d.html\" title=\"trait zng_layout::unit::Layout2d\">Layout2d</a>&gt;::<a class=\"associatedtype\" href=\"zng_layout/unit/trait.Layout2d.html#associatedtype.Px\" title=\"type zng_layout::unit::Layout2d::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout2d.html\" title=\"trait zng_layout::unit::Layout2d\">Layout2d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_dft\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1666-1668\">Source</a><a href=\"#method.layout_dft\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_dft\" class=\"fn\">layout_dft</a>(&amp;self, default: &lt;T as <a class=\"trait\" href=\"zng_layout/unit/trait.Layout2d.html\" title=\"trait zng_layout::unit::Layout2d\">Layout2d</a>&gt;::<a class=\"associatedtype\" href=\"zng_layout/unit/trait.Layout2d.html#associatedtype.Px\" title=\"type zng_layout::unit::Layout2d::Px\">Px</a>) -&gt; &lt;T as <a class=\"trait\" href=\"zng_layout/unit/trait.Layout2d.html\" title=\"trait zng_layout::unit::Layout2d\">Layout2d</a>&gt;::<a class=\"associatedtype\" href=\"zng_layout/unit/trait.Layout2d.html#associatedtype.Px\" title=\"type zng_layout::unit::Layout2d::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout2d.html\" title=\"trait zng_layout::unit::Layout2d\">Layout2d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context with <code>default</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_x\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1673-1675\">Source</a><a href=\"#method.layout_x\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_x\" class=\"fn\">layout_x</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>x</strong></em> axis.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_y\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1680-1682\">Source</a><a href=\"#method.layout_y\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_y\" class=\"fn\">layout_y</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>y</strong></em> axis.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_z\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1687-1689\">Source</a><a href=\"#method.layout_z\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_z\" class=\"fn\">layout_z</a>(&amp;self) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>z</strong></em> axis.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_dft_x\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1694-1696\">Source</a><a href=\"#method.layout_dft_x\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_dft_x\" class=\"fn\">layout_dft_x</a>(&amp;self, default: <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a>) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>x</strong></em> axis with <code>default</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_dft_y\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1701-1703\">Source</a><a href=\"#method.layout_dft_y\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_dft_y\" class=\"fn\">layout_dft_y</a>(&amp;self, default: <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a>) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>y</strong></em> axis with <code>default</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.layout_dft_z\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1708-1710\">Source</a><a href=\"#method.layout_dft_z\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarLayout.html#tymethod.layout_dft_z\" class=\"fn\">layout_dft_z</a>(&amp;self, default: <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a>) -&gt; <a class=\"struct\" href=\"zng_unit/px_dip/struct.Px.html\" title=\"struct zng_unit::px_dip::Px\">Px</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_layout/unit/trait.Layout1d.html\" title=\"trait zng_layout::unit::Layout1d\">Layout1d</a>,</div></h4></section></summary><div class='docblock'>Compute the pixel value in the current <a href=\"zng_layout/context/struct.LAYOUT.html\" title=\"struct zng_layout::context::LAYOUT\"><code>LAYOUT</code></a> context <em><strong>z</strong></em> axis with <code>default</code>.</div></details></div></details>","VarLayout<T>","zng_ext_image::types::ImageVar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VarSubscribe%3CT%3E-for-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1440\">Source</a><a href=\"#impl-VarSubscribe%3CT%3E-for-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"zng_app/widget/trait.VarSubscribe.html\" title=\"trait zng_app::widget::VarSubscribe\">VarSubscribe</a>&lt;T&gt; for <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.subscribe_when\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1441\">Source</a><a href=\"#method.subscribe_when\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.subscribe_when\" class=\"fn\">subscribe_when</a>(\n    &amp;self,\n    op: <a class=\"enum\" href=\"zng_app/update/enum.UpdateOp.html\" title=\"enum zng_app::update::UpdateOp\">UpdateOp</a>,\n    widget_id: <a class=\"struct\" href=\"zng_app/widget/struct.WidgetId.html\" title=\"struct zng_app::widget::WidgetId\">WidgetId</a>,\n    predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a></h4></section></summary><div class='docblock'>Register the widget to receive an <a href=\"zng_app/update/enum.UpdateOp.html\" title=\"enum zng_app::update::UpdateOp\"><code>UpdateOp</code></a> when this variable is new and the <code>predicate</code> approves the new value. <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.subscribe_when\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_pre_new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1454-1456\">Source</a><a href=\"#method.on_pre_new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.on_pre_new\" class=\"fn\">on_pre_new</a>&lt;H&gt;(&amp;self, handler: H) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    H: <a class=\"trait\" href=\"zng_app/handler/trait.AppHandler.html\" title=\"trait zng_app::handler::AppHandler\">AppHandler</a>&lt;<a class=\"struct\" href=\"zng_app/widget/struct.OnVarArgs.html\" title=\"struct zng_app::widget::OnVarArgs\">OnVarArgs</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Add a preview <code>handler</code> that is called every time this variable updates,\nthe handler is called before UI update. <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.on_pre_new\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zng_app/widget.rs.html#1461-1463\">Source</a><a href=\"#method.on_new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.on_new\" class=\"fn\">on_new</a>&lt;H&gt;(&amp;self, handler: H) -&gt; <a class=\"struct\" href=\"zng_var/var_impl/struct.VarHandle.html\" title=\"struct zng_var::var_impl::VarHandle\">VarHandle</a><div class=\"where\">where\n    H: <a class=\"trait\" href=\"zng_app/handler/trait.AppHandler.html\" title=\"trait zng_app::handler::AppHandler\">AppHandler</a>&lt;<a class=\"struct\" href=\"zng_app/widget/struct.OnVarArgs.html\" title=\"struct zng_app::widget::OnVarArgs\">OnVarArgs</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Add a <code>handler</code> that is called every time this variable updates,\nthe handler is called after UI update. <a href=\"zng_app/widget/trait.VarSubscribe.html#tymethod.on_new\">Read more</a></div></details></div></details>","VarSubscribe<T>","zng_ext_image::types::ImageVar"],["<section id=\"impl-Var%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zng_var/var.rs.html#1438\">Source</a><a href=\"#impl-Var%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"zng_var/var/struct.Var.html\" title=\"struct zng_var::var::Var\">Var</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zng_var/var_value/trait.VarValue.html\" title=\"trait zng_var::var_value::VarValue\">VarValue</a> + <a class=\"trait\" href=\"zng_var/animation/trait.Transitionable.html\" title=\"trait zng_var::animation::Transitionable\">Transitionable</a>,</div></h3><div class=\"item-info\"><div class=\"stab empty-impl\">This impl block contains no items.</div></div><div class=\"docblock\"><p>Transition animations</p>\n</div></section>",0,"zng_ext_image::types::ImageVar"]]],["zng_wgt",[]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[182785,162665,15]}