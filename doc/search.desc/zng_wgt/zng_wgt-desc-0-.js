searchState.loadedDescShard("zng_wgt", 0, "Basic widget properties and helpers for declaring widgets …\nWidget does inline if requested by the parent widget …\nWidget disables inline.\nWidget is hit by any point that intersects the transformed …\nWidget is hit by any point that intersects the hit-test …\nWidget is never hit.\nDefines if and how a widget is hit-tested.\nWidget always does inline.\nInline mode explicitly selected for a widget.\nArguments for the node operation event properties.\nSame as <code>Bounds</code>, but also excludes the outside of rounded …\nW  Minimal widget.\nBoxed shared closure that generates a widget for a given …\nWidget info builder extensions for <code>modal</code> control.\nP  Aligns the widget within the available space.\nP  Defines if the widget only renders if it’s bounds …\nP  Border widths, color and style.\nP  Position of a widget borders in relation to the widget …\nP  If the border is rendered over the fill and child …\nCalls the function with <code>data</code> argument.\nCalls the function with <code>data</code> argument and only returns a …\nP  Clips the widget child to the area of the widget when …\nP  Defines the preferred color scheme in the widget and …\n Declare one or more command event properties.\nP  Corner radius of widget and inner widgets.\nP  Defines how the <code>corner_radius</code> is computed for each …\nNumber of times the handler was called.\n<code>nil</code>.\nEnable widget instantiation in crates that can’t depend …\nP  Defines if default interaction is allowed in the widget …\n Declare one or more event properties.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nP  Defines if and how the widget is hit-tested.\nP  Enforce an inline mode on the widget.\nInclude an extra widget in the modal filter of this widget.\nP  Defines if any interaction is allowed in the widget and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  If the widget is <code>Collapsed</code>.\nP  If the widget is disabled for interaction.\nP  If the widget is enabled for interaction.\nP  If the widget is <code>Hidden</code>.\nP  If the widget is visible for hit-tests.\nReturns <code>true</code> if is any mode other then <code>Disabled</code>.\nP  If the widget has been initialized.\nP  If the layout direction is left-to-right.\nIf this is the <code>nil</code> function.\nP  If the layout direction is right-to-left.\nP  If the widget is <code>Visible</code>.\nP  Margin space around the widget.\nP  Only allow interaction inside the widget, descendants …\nP  Include itself in the allow list of another widget that …\nP  Extra widgets that are allowed interaction by this …\nNew from a closure that generates a node from data.\nNew args.\nFunction that always produces the <code>NilUiNode</code>.\nHelper nodes.\nNew args with timestamp now.\nP  Widget interactions now blocked.\nP  Widget interactions where blocked or unblocked.\nP  Widget deinited.\nP  Widget normal interactions now disabled.\nP  Widget normal interactions now enabled.\nP  Widget was enabled or disabled.\nP  Widget info is now available.\nP  Widget initialized.\nP  Widget interactivity changed.\nP  Widget global position changed.\nP  On any node operation.\nP Preview <code>on_block</code> event.\nP Preview <code>on_blocked_changed</code> event.\nP  Preview <code>on_deinit</code> event.\nP Preview <code>on_disable</code> event.\nP Preview <code>on_enable</code> event.\nP Preview <code>on_enabled_changed</code> event.\nP  Preview <code>on_init</code> event.\nP Preview <code>on_interactivity_changed</code> event.\nP Preview <code>on_move</code> event.\nP  Preview <code>on_node_op</code> event.\nP Preview <code>on_transform_changed</code> event.\nP Preview <code>on_unblock</code> event.\nP  Preview <code>on_update</code> event.\nP Preview <code>on_vis_disable</code> event.\nP Preview <code>on_vis_enable</code> event.\nP Preview <code>on_vis_enabled_changed</code> event.\nP  Widget global inner transform changed.\nP  Widget interactions now unblocked.\nP  Widget <code>update</code> event.\nP  Widget now looks disabled.\nP  Widget now looks enabled.\nP  Widget changed to enabled or disabled visuals.\nOperation.\nP  Defines what node list methods can run in parallel in …\nPrelude for declaring properties and widgets.\nRegister a modal widget that must include this widget in …\nNew widget function that returns the same <code>widget</code> for every …\nInstant the handler was called.\nP  Sets the widget visibility.\n Declares a widget function closure.\n Declares a widget function closure.\nStart building a new instance.\nGets the widget type info.\nP  Defines the render order of a widget in a layout panel.\nHelper for declaring state properties that are controlled …\nCreates a border node that delegates rendering to a …\n Declare one or more command event properties.\n Declare one or more event properties.\nHelper for declaring state properties that depend on a …\nHelper for declaring state properties that depend on two …\nHelper for declaring state properties that depend on three …\nHelper for declaring state properties that depend on four …\nTransforms and clips the <code>content</code> node according with the …\nCreate a node that controls interaction for all widgets …\nNode that presents <code>list</code> using <code>item_fn</code> for each new list …\nHelper for declaring command event properties.\nHelper for declaring event properties.\nHelper for declaring command preview handlers.\nHelper for declaring preview event properties.\nNode that presents <code>data</code> using <code>wgt_fn</code>.\nNode that presents <code>data</code> using <code>wgt_fn</code> if data is available, …\nLogs an error if the <code>_var</code> is always read-only.\nHelper for declaring state getter properties that are …\nHelper for declaring state properties that are controlled …\nHelper for declaring widgets that are recontextualized to …\nHelper for declaring nodes that sets a context local value.\nHelper for declaring nodes that sets a context local value …\nHelper for declaring properties that sets a context var.\nHelper for declaring properties that sets a context var to …\nHelper for a property that gets the index of the widget in …\nHelper for a property that gets the index of the widget in …\nHelper for a property that gets the reverse index of the …\nHelper for declaring properties that set the widget state.\nHelper for declaring properties that set the widget state …")