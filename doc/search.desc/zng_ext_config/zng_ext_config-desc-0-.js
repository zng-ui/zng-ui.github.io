searchState.loadedDescShard("zng_ext_config", 0, "Config service and sources.\nRepresents one or more config sources behind a dynamic …\nRepresents the app main config.\nRepresents one or more config sources.\nUnique key to a config entry.\nApplication extension that provides mouse events and …\nRepresents a full config map in memory.\nRepresents the current IO status of the config.\nMarker trait for types that can stored in a <code>Config</code>.\nMap of configs already bound to a variable.\nRepresents a copy-on-write config source that wraps two …\nReset controls of a <code>FallbackConfig</code>.\nRepresents a config source that synchronizes with a JSON …\nConfig last load failed.\nConfig is loaded.\nConfig is loading.\nMemory only config.\nTOML does not support <code>null</code>.\nRepresents any entry type in a config.\nConfig wrapper that only provides read-only variables from …\nRepresents a config source that synchronizes with a RON …\nError converting ron::Value, RawConfigValue.\nConfig last save failed.\nConfig is saving.\nRepresents a config source that can swap its backing …\nRepresents multiple config sources that are matched by key.\nConfig source that auto syncs with file.\nRepresents a config source that synchronizes with a TOML …\nError converting toml::Value, RawConfigValue.\nJSON only supports finite floats.\nJSON only supports finite floats.\nJSON only supports finite floats.\nTOML only supports integers up to <code>i64::MAX</code>.\nJSON only supports key types that are <code>fmt::Display</code>.\nJSON only supports key types that are <code>fmt::Display</code>.\nRON added a new number format or value kind that is not …\nRepresents a config source that synchronizes with a YAML …\nError converting serde_yaml::Value, RawConfigValue.\nReturns a read-only var that is <code>true</code> when the <code>key</code> has an …\nReturns a read-only var that is <code>true</code> when the <code>key</code> has an …\nClone a reference to the config.\nReturns if the key in config.\nGets a read-only variable that tracks if an entry for the …\nDeserialize from the raw config format.\nNew empty map.\nErrors list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a variable that is bound to the config <code>key</code>.\nGets a variable that is bound to the config <code>key</code>.\nGet the value if present.\nGets the already bound variable or calls <code>bind</code> to generate …\nBind the contains variable.\nGets the weak typed value.\nGets a weak typed variable to the config <code>key</code>.\nGet raw config and setup a bidi binding that converts to …\nGets a variable that is bound to the config <code>key</code>, the <code>value</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf status is load or save errors.\nIf status is not loading nor saving.\nLoad the config.\nReplace the config source.\nCleanup and flush RAM caches.\nSystem warning low memory, flush caches.\nmerge all <code>status</code>.\nNew from the read-write config and read-only fallback.\nNew with <code>MemoryConfig</code> backend.\nNew reading from <code>cfg</code>.\nNew default empty.\nPush a config case on the switch.\nPush a config case matched by a key <code>prefix</code>.\nRead a map from the file.\nBind all variables to the new <code>source</code>.\nRemove the config entry associated with the key.\nRemoves the <code>key</code> from the backing storage.\nRemoves the <code>key</code> from the config and updates all active …\nRemoves the <code>key</code> from the config and updates all active …\nSerialize to the raw config format.\nSet the value.\nSets the weak typed value.\nSettings are the config the user can directly edit, this …\nGets a read-only variable that represents the IO status of …\nGets a read-only variable that represents the IO status of …\nOpen write the <code>file</code>\nWait until <code>status</code> is idle (not loading nor saving).\nPush the config and return.\nPush the config and return.\nWrite the map to a file.\nSetting categories builder.\nSettings category.\nCategory entry builder.\nUnique ID of a <code>Category</code>.\nSettings metadata service.\nSetting entry.\nSetting entry builder.\nSettings builder.\nGets if there are any setting matched by <code>filter</code>.\nGets a variable that indicates the current setting value …\nSelect and sort categories matched by <code>filter</code>.\nSettings category.\nSettings category.\nSet the value variable from a different config.\nCount how many settings match the <code>filter</code>.\nUse a <code>default</code> value to reset the settings.\nShort help text.\nSet the setting short help text.\nCalls <code>builder</code> for the key and category if it is not …\nCalls <code>builder</code> for the id if it is not filtered by the view …\nSet the custom metadata flag.\nSet the custom metadata flag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect and sort settings matched by <code>filter</code>.\nUnique ID.\nUnique ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe config edited by this setting.\nThe config edited by this setting.\nCustom setting metadata.\nCustom setting metadata.\nCustom category metadata.\nCustom category metadata.\nDisplay name.\nSet the setting name.\nSet the category name.\nDisplay name.\nPosition of the setting in a list of settings.\nSet the setting order number.\nSet the position of the category in a list of categories.\nPosition of the category in a list of categories.\nRegister a closure that provides settings metadata.\nRegister a closure that provides category metadata.\nReset the setting value.\nUse a <code>FallbackConfigReset</code> to reset the settings.\nGets if the setting should be included in the search and …\nSet the custom metadata value.\nSet the custom metadata value.\nSort categories and settings.\nSort <code>categories</code>.\nSort <code>settings</code>.\nCategory from an ID only, no other metadata.\nConfig value.\nSet the value variable from <code>CONFIG</code>.\nConfig value, strongly typed.\nIf the <code>value</code> is set to an actual config variable.\nConfig value type.")