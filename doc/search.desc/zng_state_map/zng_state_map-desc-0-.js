searchState.loadedDescShard("zng_state_map", 0, "Hash-map of type erased values, useful for storing …\nPrivate state map.\nUnique identifier of a value in a state map.\nMutable state map.\nRead-only state map.\nRepresents a type that can be a <code>StateId</code> value.\nReborrow the reference as read-only.\nCreate tagged read-only reference to the map.\nCrate tagged mutable reference to the map.\nRemoves all entries.\nGets if the ID is set in this map.\nGets if the ID is set in this map.\nCopy the ID’s value set in this map.\nCopy the ID’s value set in this map.\nStatic empty map.\nGets the given ID’s corresponding entry in the map for …\nSets a state ID without value.\nGets if a state ID without value is set.\nGets if a state ID without value is set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nReference the ID’s value set in this map.\nReference the ID’s value set in this map.\nRetrieve the underlying value.\nClone the ID’s value set in this map.\nClone the ID’s value set in this map.\nMutable borrow the ID’s value set in this map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the mutable reference to the map and returns a …\nConsume the mutable reference to the map and returns a …\nConsume the mutable reference to the map and mutable …\nConsume the mutable reference to the map and returns a …\nConsume the mutable reference to the map and mutable …\nIf no state is set.\nIf no state is set.\nNew default, empty.\nGenerates a new unique ID.\nReturns <code>true</code> if self and other reference the same map.\nReborrow the mutable reference.\nRemove the key.\nReference the ID’s value set in this map or panics if …\nReference the ID’s value set in this map or panics if …\nMutable borrow the key value set in this map or panics if …\nUn-scramble the underlying value to get the original …\nSet the ID’s <code>value</code>.\nState map helper types.\nDeclares a static unique ID that is lazy inited.\nAn occupied entry.\nA view into an occupied entry in a state map.\nA view into a single entry in a state map, which may …\nA vacant entry.\nA view into a vacant entry in a state map.\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry and returns a mutable …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to the value …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nTakes the value out of the entry, and returns it.")