searchState.loadedDescShard("zng", 4, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess to <code>Box&lt;dyn Any&gt;</code> methods.\nConverts into <code>BoxedVar&lt;T&gt;</code>.\nConverts into <code>BoxedVar&lt;T&gt;</code>.\nConverts into <code>BoxedVar&lt;T&gt;</code>.\nUnwraps the initialized actual var or initializes it now.\nInto response, if received.\nConvert this variable to the value, if possible moves the …\nConverts the source value into a var.\nWhether all known bits in this flags value are set.\nIf cannot <code>MODIFY</code> and is not <code>CAPS_CHANGE</code>.\nIf cannot <code>NEW</code> and is not <code>CAPS_CHANGE</code>.\nIf the variable current value was set by an active …\nIf the variable represents different values depending on …\nIf the response is received.\nHas response.\nReturns <code>true</code> if the handle is a <code>dummy</code>.\nReturns <code>true</code> if empty or all handles are dummy.\nWhether all bits in this flags value are unset.\nGets if the <code>last_update</code> is the current update, meaning the …\nIf the response is not received yet.\nDoes not have response.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLast update ID a variable was modified, if the ID is equal …\nCompute the pixel value in the current <code>LAYOUT</code> context.\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCreates a var that maps from this variable.\nCreate a var that maps from this variable on read and to …\nCreate a <code>map</code> that converts from <code>T</code> to a <code>Txt</code> debug print.\nCreates a <code>map</code> that converts from <code>T</code> to <code>O</code> using <code>Into&lt;O&gt;</code>.\nCreates a <code>map</code> that converts from <code>T</code> to <code>O</code> using <code>Into&lt;O&gt;</code>.\nCreates a <code>map</code> that converts from <code>T</code> to <code>O</code> using <code>Into&lt;O&gt;</code>.\nCreate a mapping wrapper around <code>self</code>. The <code>map</code> closure is …\nCreate a mapping wrapper around <code>self</code>. The <code>map</code> closure is …\nMap to another response variable.\nMap the response value using <code>map</code>, if the variable is …\nCreate a <code>map</code> that converts from <code>T</code> to <code>String</code> using <code>ToString</code>.\nCreate a <code>map</code> that converts from <code>T</code> to <code>String</code> using <code>ToString</code>.\nCreate a <code>map</code> that converts from <code>T</code> to <code>String</code> using <code>ToString</code>.\nCreates a <code>map</code> that converts from <code>T</code> to <code>Txt</code> using <code>ToTxt</code>.\nCreates a <code>map</code> that converts from <code>T</code> to <code>Txt</code> using <code>ToTxt</code>.\nCreates a <code>map</code> that converts from <code>T</code> to <code>Txt</code> using <code>ToTxt</code>.\n Initializes a new <code>Var</code> with value made by merging multiple …\nSchedule a variable update, it will be applied on the end …\nInfallible <code>Var::modify</code>.\nInfallible <code>Var::modify</code>.\nGets a value that indicates the <em>importance</em> clearance that …\nID that is never new.\nNew with initialization function.\nNew empty.\nStart building with only the default value.\nConstructs a new <code>ArcEq&lt;T&gt;</code>.\nNew from current value.\nNew reference to nothing.\nGenerates a new unique handle.\nNew empty vec.\nStart building with already boxed var.\nNew with initialization function that produces a value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAdd a <code>handler</code> that is called every time this variable …\nAdd a preview <code>handler</code> that is called every time this …\nKeep the <code>value</code> alive for  the app lifetime.\nHold the variable in memory until the app exit.\nDrop the handle without stopping the behavior it …\nDrop all handles without stopping their behavior.\nRemove the last element from the vec.\nPush an input.\nPush a when condition.\nInsert the <code>element</code> at the end of the vec.\nAdd the <code>other</code> handle to the collection, if it is not dummy.\nPush a when condition already boxed and type erased.\nAdd a custom tag object that will be shared with the var …\nAdd all custom tags.\nGets the pointer.\nGets a clone of the var that is always read-only.\nMove the element <code>from</code> index <code>to</code> index.\nRemove the <code>index</code> element.\nThe intersection of a source flags value with the …\nReplace the default value if <code>other</code> has default and extend …\nReserves capacity for at least additional more elements.\nResizes the Vec in-place so that len is equal to <code>new_len</code>.\nSets the one time response.\nNew <code>ResponseVar</code> in the done state.\nNew paired <code>ResponderVar</code> and <code>ResponseVar</code> in the waiting …\nCreates a <code>ResponseVar</code> linked to this responder.\nRetains only the elements specified by the predicate, …\nClone the response value, if present.\nClone the response, if present and new.\nSchedule animations started by <code>animate</code>, the closure is …\nSchedule animations started by <code>animate</code>, the closure is …\nSchedule animations started by <code>animate</code>, the closure is …\nInfallible <code>Var::set</code>.\nReplace the value.\nSchedule a new <code>value</code> for the variable, it will be set in …\nSchedule a new <code>value</code> for the variable, it will be set in …\nSchedule a new <code>value</code> for the variable, it will be set in …\nInfallible <code>Var::set</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSchedule a new <code>value</code> for the variable, it will be set in …\nCalls <code>other.set_from(self)</code> and <code>self.bind(other)</code>.\nCalls <code>other.set_from(self)</code> and <code>self.bind(other)</code>.\nCalls <code>other.set_from(self)</code> and <code>self.bind(other)</code>.\nSet/replace the default value.\nSet/replace the default value with an already typed erased …\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule an easing transition from the <code>start_value</code> to …\nInfallible <code>Var::set_from</code>.\nSchedule a new <code>value</code> for the variable, it will be set in …\nSchedule a new <code>value</code> for the variable, it will be set in …\nSchedule a new <code>value</code> for the variable, it will be set in …\nInfallible <code>Var::set_from</code>.\nInfallible <code>Var::set_from_map</code>.\nSet from <code>other</code> value at the time of update, mapped to the …\nSet from <code>other</code> value at the time of update, mapped to the …\nSet from <code>other</code> value at the time of update, mapped to the …\nInfallible <code>Var::set_from_map</code>.\nSets a custom <code>AnyVar::modify_importance</code> value.\nOscillate between <code>from</code> and <code>to</code>, the variable is set to <code>from</code> …\nOscillate between <code>from</code> and <code>to</code>, the variable is set to <code>from</code> …\nOscillate between <code>from</code> and <code>to</code>, the variable is set to <code>from</code> …\nMutate the <code>range</code>.\nVariable for state properties (<code>is_*</code>, <code>has_*</code>).\nSet the variable to <code>new_value</code> after a <code>delay</code>.\nSet the variable to <code>new_value</code> after a <code>delay</code>.\nSet the variable to <code>new_value</code> after a <code>delay</code>.\nOscillate between the current value and <code>new_value</code>, every …\nOscillate between the current value and <code>new_value</code>, every …\nOscillate between the current value and <code>new_value</code>, every …\nSet the variable to a sequence of values as a time <code>duration</code>…\nSet the variable to a sequence of values as a time <code>duration</code>…\nSet the variable to a sequence of values as a time <code>duration</code>…\nGets the number of strong references to the variable.\nGets the number of strong references to the variable.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRegister the widget to receive an <code>UpdateOp</code> when this …\nRegister the widget to receive an <code>UpdateOp</code> when this …\nRemoves an element from the vector and returns it.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRead-only that tracks if animations are enabled in the …\nCustom tags that will be shared with the var hooks if the …\nReturns a mutable reference for modification.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDebug helper for tracing the lifetime of a value in this …\nDebug helper for tracing the lifetime of a value in this …\nDebug helper for tracing the lifetime of a value in this …\nShortens the vector, keeping the first <code>len</code> elements and …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSchedule a variable update, even if the value does no …\nInfallible <code>AnyVar::update</code>.\nNotify an update, even if the value does not actually …\nInfallible <code>AnyVar::update</code>.\nId of the current vars update in the app scope.\nUpgrade to a strong <code>BoxedVar&lt;T&gt;</code> clone.\nUpgrade to a strong <code>AnyVar</code> clone.\nReference the updated value.\nStrongly-typed reference to the new value.\nNew ref counted read/write variable with initial <code>value</code>.\nNew ref counted read/write variable with default initial …\nNew ref counted read/write variable with initial value …\nVar <em>pointer</em>, that can be used to identify if two variables …\nGets the <code>TypeId</code> of <code>T</code> in <code>Var&lt;T&gt;</code>.\nAwaits for <code>is_animating</code> to change from <code>true</code> to <code>false</code>.\nAwaits for <code>is_animating</code> to change from <code>true</code> to <code>false</code>.\nAwaits for <code>is_animating</code> to change from <code>true</code> to <code>false</code>.\nReturns a future that awaits until a response is received.\nReturns a future that awaits until a response is received …\nReturns a future that awaits until a response is received …\nAwaits for the <code>last_update</code> to change.\nAwaits for the <code>last_update</code> to change.\nAwaits for the <code>last_update</code> to change.\nAwaits for a value that passes the <code>predicate</code>.\nAwaits for a value that passes the <code>predicate</code>.\nAwaits for a value that passes the <code>predicate</code>.\nGets the number of weak references to the variable.\nGets the number of weak references to the variable.\n Initializes a new conditional var.\nVisit the current value of the variable.\nCreate a <code>VarHandles</code> collection with <code>self</code> and <code>other</code>.\nCalls <code>animate</code> while <code>controller</code> is registered as the …\nVisit the current value of the variable.\nNew with pre-allocated inputs.\nNew empty vec with pre-allocated capacity.\nRuns <code>action</code> with this context var representing the other …\nRuns <code>action</code> with <code>self</code> as the current context ID.\nRuns <code>action</code> with this context var representing the other …\nVisit the current value of the variable, if it <code>is_new</code>.\nVisit the current value of the variable, if it <code>is_new</code>.\nVisit the current value of the variable, if it <code>is_new</code>.\nVisit the current value of the variable, if it <code>is_new</code>.\nVisit the response, if present and new.\nVisit the response, if present.\nNumber of elements removed.\nNumber of elements inserted.\nIndex the element was first at.\nIndex of the first element removed, at the time of removal.\nIndex of the first element inserted, at the time of …\nIndex the element was reinserted after removal.\nRepresents an animation in its closure.\nAnimations controller.\nRepresents a running animation.\nRepresents the editable final value of a <code>Var::chase</code> …\nAn <code>AnimationController</code> that forces animations to run even …\nRepresents the current <em>modify</em> operation when it is …\nRepresents a simple transition between two values.\nRepresents a transition across multiple keyed values that …\nRepresents a type that can be animated between two values.\nImplement transition by delegating all type parts.\nWeak <code>AnimationHandle</code>.\nReturns <code>true</code> if <code>self</code> and <code>other</code> have the same animation or …\nReturns a value that indicates if animations are enabled …\n<code>dummy</code>.\nCreate a weak handle.\nCreate dummy handle that is always in the <em>stopped</em> state.\nCommon easing functions.\nCompute the elapsed <code>EasingTime</code>, in the span of the total …\nCompute the time elapsed from <code>start_time</code> to <code>now</code>.\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nSet <code>animations_enabled</code> to <code>true</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nValue sampled at the <code>0.fct()</code> step.\nRegister a <code>handler</code> to be called once when the animation …\nRegister a <code>handler</code> to be called once when the current …\nIndicates the <em>override</em> importance of the operation, when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the <em>modify</em> request was made from inside an …\nIf another handle has called <code>perm</code>.\nIf another handle has called <code>stop</code>.\nKeyed values.\nSample the linear interpolation from <code>self</code> -&gt; <code>to</code> by <code>step</code>.  \nModify the chase target, replaces the animation with a new …\nInitial value, is always of lowest importance.\nNew transition.\nNew weak handle that does not upgrade.\nNew transition.\nThe instant the current animation update started.\nCalled for each <code>animation</code> that starts in the controller …\nCalled for each <code>animation</code> that ends in the controller …\nDrops the handle but does <strong>not</strong> stop.\nSet the animation start time to now.\nNumber of times the animation restarted.\nCompute the transition value at the <code>step</code>.\nCompute the transition value at the <code>step</code>.\nReplace the chase target, replaces the animation with a …\nChange the start to an instant that computes the <code>elapsed</code> …\nChange the start time to an arbitrary value.\nSet the duration to the next animation update. The …\nThe instant this animation (re)started.\nDrops the handle and forces the animation to drop.\nDrop the animation after applying the current update.\nIf the animation will be dropped after applying the update.\nCurrent animation target.\nGlobal time scale for animations.\nValue sampled at the <code>1.fct()</code> step.\nGet the animation handle if it is still animating.\n<code>easing::back</code>.\nA unit cubic Bézier curve, used for timing functions in …\n<code>easing::bounce</code>.\n<code>easing::circ</code>.\n<code>easing::cubic</code>.\nCustom function.\nEasing functions as a value.\nEasing function output.\nEasing function input.\n<code>easing::elastic</code>.\n<code>easing::expo</code>.\n<code>easing::linear</code>.\n<code>easing::none</code>.\n<code>easing::quad</code>.\n<code>easing::quart</code>.\n<code>easing::quint</code>.\n<code>easing::sine</code>.\nCubic transition that goes slightly negative to start and …\nOscillating transition that grows in magnitude, does not …\nCubic transition with slightly slowed start then <code>cubic</code>.\nCubic transition (t³).\nX coordinate is time, Y coordinate is function advancement.\nNew custom function.\nCreate a closure that calls the easing function.\nApplies the <code>ease_fn</code>.\nApplies <code>ease_in</code> for the first half then <code>ease_out</code> scaled to …\nCreates a custom function that is <code>self</code> modified by …\nApplies the <code>ease_fn</code> in reverse and flipped.\nCreates a custom function that is <code>self</code> modified by …\nApplies <code>ease_out</code> for the first half then <code>ease_in</code> scaled to …\nCreates a custom function that is <code>self</code> modified by …\nNew easing time from total <code>duration</code>, <code>elapsed</code> time and …\nOscillating transition that grows in magnitude, goes …\nGets the end time, one.\nExponential transition. Very slow start, very fast end.\nGet the time as a <code>Factor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the time represents the end of the animation.\nIf the time represents the start of the animation.\nSimple linear transition, no easing, no acceleration.\nCreates a custom function that is <code>self</code> modified by <code>modifier</code>\nCreate a unit cubic Bézier curve from the two middle …\nNew from <code>Factor</code>.\nAlways <code>1.fct()</code>, that is, the completed transition.\nGet the time as a <code>FactorPercent</code>.\nQuadratic transition (t²).\nFourth power transition (t⁴).\nFifth power transition (t⁵).\nApplies the <code>ease_fn</code> in reverse.\nFlip the time.\nCreates a custom function that is <code>self</code> modified by …\nApplies the <code>ease_fn</code> flipped.\nCreates a custom function that is <code>self</code> modified by …\nSine transition. Slow start, fast end.\nSolve the bezier curve for a given <code>x</code> and an <code>epsilon</code>, that …\nGets the start time, zero.\nJumps to the final value by a number of <code>steps</code>.\nJumps to the final value by a number of <code>steps</code>.\nDefault view-process implementation.\nDefault view-process implementation as an embedded …\nRuns the view-process server in the current process and …\nCall the prebuilt <code>run_same_process</code>.\nWidget is rendered first causing all overlapping siblings …\nCoordinates nested borders and corner-radius.\nThe line style and color for the sides of a widget’s …\nThe line style and color for each side of a widget’s …\nThe line style for the sides of a widget’s border.\nWidget is hit by any point that intersects the transformed …\nAll updates flagged after the closure call are retained …\nThe widget is not visible and does not affect layout.\nRadius of each corner of a border defined from <code>Size</code> values.\nDefines how the corner radius is computed for each usage.\nZ-index of widgets that don’t set the index.\nDescendants <code>UiNode::deinit</code> can run in parallel.\nDashed line.\nDisplays a series of short square-ended dashes or line …\nWidget is hit by any point that intersects the hit-test …\nWidget is never hit.\nDotted line.\nDisplays a series of rounded dots.\nTwo solid lines in parallel.\nDisplays two straight lines that add up to the pixel size …\nService that provides editor widgets for a given variable.\nDescendants <code>UiNode::event</code> can run in parallel.\nArguments for <code>EDITORS.register</code>.\nWidget is rendered after all siblings causing it to render …\nFaux shadow with carved appearance.\nDisplays a border with a carved appearance.\nFully transparent line.\nFully transparent line.\nThe widget is not visible, but still affects layout.\nDefines if and how a widget is hit-tested.\nLeft-to-right line.\nDescendants <code>UiNode::info</code> can run in parallel.\nDescendants <code>UiNode::init</code> can run in parallel.\nAll updates flagged during the closure call are discarded, …\nDisplays a border that makes the widget appear embedded.\nDescendants <code>UiNode::measure</code> and <code>UiNode::layout</code> can run in …\nOrientation of a straight line.\nRepresents a line style.\nBase <em>widget</em> for types that build to a custom type that is …\nCorner radius is computed for each usage.\nArguments for the node operation event properties.\nDisplays a border that makes the widget appear embossed.\nDefines what node list methods can run in parallel in a …\nNode list methods that are made parallel.\nDescendants <code>UiNode::render</code> and <code>UiNode::render_update</code> can …\nFaux shadow with extruded appearance.\nDisplays a border with an extruded appearance.\nSame as <code>Bounds</code>, but also excludes the outside of rounded …\nA solid line.\nDisplays a single, straight, solid line.\nCorner radius is computed on the first usage in the …\nDescendants <code>UiNode::update</code> can run in parallel.\nTop-to-bottom line.\nWidget visibility.\nThe widget is visible.\nCurrent context widget.\nA wavy line, like an error underline.\nWeak reference to a <code>WidgetFn&lt;D&gt;</code>.\nW  Minimal widget.\nW  Minimal widget.\nCorner radius is computed for the first usage in the …\nBase widget.\nBase widget.\nBoxed shared closure that generates a widget for a given …\nUnique ID of a widget.\nTrait implemented by all <code>#[widget]</code>.\nDefines how widget update requests inside …\nPosition of a widget inside an <code>UiNodeList</code> render operation.\nGet a flags value with all known bits set.\nIf all corners are the same value.\nIf all sides are equal.\nP  Defines if the widget only renders if it’s bounds …\nP  Defines if the widget only renders if it’s bounds …\nP  Custom background. Allows using any other UI node as a …\nP  Custom background. Allows using any other UI node as a …\nP  Fill color background.\nP  Fill color background.\nP  Conic gradient background.\nP  Conic gradient background.\nP  Custom background generated using a <code>WidgetFn&lt;()&gt;</code>.\nP  Custom background generated using a <code>WidgetFn&lt;()&gt;</code>.\nP  Linear gradient background.\nP  Linear gradient background.\nP  Radial gradient background.\nP  Radial gradient background.\nReference the parent <code>WidgetBase</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>Collapsed</code> | <code>Hidden</code> | <code>Visible</code> short circuit from left to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nP  Border widths, color and style.\nP  Border widths, color and style.\nWidget border, updated every layout.\nP  Position of a widget borders in relation to the widget …\nP  Position of a widget borders in relation to the widget …\nGets the computed border rect and side offsets for the …\nGets the accumulated border offsets on the outside of the …\nP  If the border is rendered over the fill and child …\nP  If the border is rendered over the fill and child …\nGets the corner radius for the border at the current …\nColor and style of the bottom border.\nBottom-left corner.\nBottom-right corner.\nWidget bounds, updated every layout.\nWidget and property builder types.\nCalls the function with <code>data</code> argument.\nCalls the function with <code>data</code> argument and only returns a …\nP  Clips the widget child to the area of the widget when …\nP  Clips the widget child to the area of the widget when …\nLine color.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns <code>true</code> if the <code>id</code> is set or flagged in the widget.\nP  Corner radius of widget and inner widgets.\nP  Corner radius of widget and inner widgets.\nP  Defines how the <code>corner_radius</code> is computed for each …\nP  Defines how the <code>corner_radius</code> is computed for each …\nNumber of times the handler was called.\nNew border side with <code>Dashed</code> style.\nAll sides a dashed color.\nCalls <code>named</code> in a debug build and <code>new_unique</code> in a release …\n<code>nil</code>.\nReturns <code>hidden</code>.\nReturns <code>hidden</code>.\n<code>Visibility::Visible</code>\nThe intersection of a source flags value with the …\nIf top and bottom are equal; and left and right are equal.\nNew border side with <code>Dotted</code> style.\nAll sides a dotted color.\nNew border side with <code>Double</code> style.\nAll sides a double line solid color.\nCreates a <code>WeakWidgetFn&lt;D&gt;</code> reference to this function.\nExpands a property assign to include an easing animation.\nGet a flags value with all bits unset.\nP  Defines if default interaction is allowed in the widget …\nP  Defines if default interaction is allowed in the widget …\nEnd the current <code>when</code> block, all properties set after this …\nEnd the current <code>when</code> block, all properties set after this …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGets the bounds and corner radius for the widget fill …\nSets the widget state <code>id</code> without value.\nP  Custom foreground fill. Allows using any other UI node …\nP  Custom foreground fill. Allows using any other UI node …\nP  Fill color overlay.\nP  Fill color overlay.\nP  Conic gradient foreground.\nP  Conic gradient foreground.\nP  Custom foreground generated using a <code>WidgetFn&lt;()&gt;</code>.\nP  Custom foreground generated using a <code>WidgetFn&lt;()&gt;</code>.\nP  Linear gradient overlay.\nP  Linear gradient overlay.\nP  Foreground highlight border overlay.\nP  Foreground highlight border overlay.\nP  Radial gradient foreground.\nP  Radial gradient foreground.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSolid color.\nSolid color.\nSolid color.\nReturns the argument unchanged.\nSide transparent black with the style.\n(color, style) side.\nAll corners same relative length.\nAll corners same length.\n(top-left, top-right, bottom-left, bottom-right) corners.\nAll corners same.\nReturns the argument unchanged.\nAll corners same exact length.\nFrom layout corner-radius.\nAll corners same relative length.\nAll corners same exact length.\nAll sides solid color.\nReturns the argument unchanged.\nAll sides solid color.\n(color, style) sides.\nAll sides solid color.\n(top, right, bottom, left) sides.\n(top-color, right-color, bottom-color, left-color, style) …\nAll sides transparent black with the style.\n(top-bottom-color, left-right-color, style) sides.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> -&gt; <code>Visible</code><code>false</code> -&gt; <code>Collapsed</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nReturns the argument unchanged.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nInstantiate an editor for the <code>value</code>.\nRetrieve the underlying value.\nGet the widget state <code>id</code>, if it is set.\nNew border side with <code>Groove</code> style.\nAll sides a grooved color.\nNew border side with <code>Hidden</code> style and transparent color.\nAll sides hidden.\nP  Defines if and how the widget is hit-tested.\nP  Defines if and how the widget is hit-tested.\nc  Unique ID of the widget instance.\nGet the widget ID.\nWidget info tree and info builder.\nGets the widget info.\nThe inherit function.\nCalls <code>init</code> and sets <code>id</code> if it is not already set in the …\nSets the <code>id</code> to the default value if it is not already set.\nP  Enforce an inline mode on the widget.\nP  Enforce an inline mode on the widget.\nGets the accumulated border offsets including the current …\nGets the corner radius for the inside of the current …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nNew border side with <code>Inset</code> style.\nAll sides a inset color.\nP  Defines if any interaction is allowed in the widget and …\nP  Defines if any interaction is allowed in the widget and …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll sides transparent black with the style.\nSide transparent black with the style.\nWhether all known bits in this flags value are set.\nP  If the widget is <code>Collapsed</code>.\nP  If the widget is <code>Collapsed</code>.\nIs collapsed.\nP  If the widget is disabled for interaction.\nP  If the widget is disabled for interaction.\nWhether all bits in this flags value are unset.\nP  If the widget is enabled for interaction.\nP  If the widget is enabled for interaction.\nP  If the widget is <code>Hidden</code>.\nP  If the widget is <code>Hidden</code>.\nIs hidden.\nP  If the widget is visible for hit-tests.\nP  If the widget is visible for hit-tests.\nReturns <code>true</code> if is any mode other then <code>Disabled</code>.\nReturns <code>true</code> if called inside a widget.\nP  If the widget has been initialized.\nP  If the widget has been initialized.\nIf this is the <code>nil</code> function.\nIf this weak reference only upgrades to a nil function.\nP  If the widget is <code>Visible</code>.\nP  If the widget is <code>Visible</code>.\nIs visible.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nSchedule a re-layout for the current widget.\nMeasure a border node, adding the <code>offsets</code> to the context …\nColor and style of the left border.\nReturns <code>self</code> for <code>step &lt; 1.fct()</code> or <code>to</code> for <code>step &gt;= 1.fct()</code>.\nMeasure a border node, adding the <code>offsets</code> to the context …\nP  Only allow interaction inside the widget, descendants …\nP  Only allow interaction inside the widget, descendants …\nP  Include itself in the allow list of another widget that …\nP  Include itself in the allow list of another widget that …\nP  Extra widgets that are allowed interaction by this …\nP  Extra widgets that are allowed interaction by this …\nReturns the name associated with the ID or <code>&quot;&quot;</code>.\nGet or generate an ID with associated name.\nGenerate a new ID with associated name.\nNew from a closure that generates a node from data.\nNew args.\nNew border side from color and style value.\nNew every corner unique.\nNew top, right, bottom left.\nNew all corners the same.\nAll sides equal.\nNew bottom only, other sides hidden.\nNew left only, other sides hidden.\nNew right only, other sides hidden.\nNew top only, other sides hidden.\nGenerates a new unique ID.\nTop-bottom and left-right equal.\nFunction that always produces the <code>NilUiNode</code>.\nNew weak reference to nil.\nWidget node types, <code>UiNode</code>, <code>UiNodeList</code> and others.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNew args with timestamp now.\nP  Widget interactions now blocked.\nP  Widget interactions now blocked.\nP  Widget interactions where blocked or unblocked.\nP  Widget interactions where blocked or unblocked.\nP  Widget deinited.\nP  Widget deinited.\nP  Widget normal interactions now disabled.\nP  Widget normal interactions now disabled.\nP  Widget normal interactions now enabled.\nP  Widget normal interactions now enabled.\nP  Widget was enabled or disabled.\nP  Widget was enabled or disabled.\nP  Widget info is now available.\nP  Widget info is now available.\nP  Widget initialized.\nP  Widget initialized.\nP  Widget interactivity changed.\nP  Widget interactivity changed.\nP  Widget global position changed.\nP  Widget global position changed.\nP  On any node operation.\nP  On any node operation.\nP Preview <code>on_block</code> event.\nP Preview <code>on_block</code> event.\nP Preview <code>on_blocked_changed</code> event.\nP Preview <code>on_blocked_changed</code> event.\nP  Preview <code>on_deinit</code> event.\nP  Preview <code>on_deinit</code> event.\nP Preview <code>on_disable</code> event.\nP Preview <code>on_disable</code> event.\nP Preview <code>on_enable</code> event.\nP Preview <code>on_enable</code> event.\nP Preview <code>on_enabled_changed</code> event.\nP Preview <code>on_enabled_changed</code> event.\nP  Preview <code>on_init</code> event.\nP  Preview <code>on_init</code> event.\nP Preview <code>on_interactivity_changed</code> event.\nP Preview <code>on_interactivity_changed</code> event.\nP Preview <code>on_move</code> event.\nP Preview <code>on_move</code> event.\nP  Preview <code>on_node_op</code> event.\nP  Preview <code>on_node_op</code> event.\nP Preview <code>on_transform_changed</code> event.\nP Preview <code>on_transform_changed</code> event.\nP Preview <code>on_unblock</code> event.\nP Preview <code>on_unblock</code> event.\nP  Preview <code>on_update</code> event.\nP  Preview <code>on_update</code> event.\nP Preview <code>on_vis_disable</code> event.\nP Preview <code>on_vis_disable</code> event.\nP Preview <code>on_vis_enable</code> event.\nP Preview <code>on_vis_enable</code> event.\nP Preview <code>on_vis_enabled_changed</code> event.\nP Preview <code>on_vis_enabled_changed</code> event.\nP  Widget global inner transform changed.\nP  Widget global inner transform changed.\nP  Widget interactions now unblocked.\nP  Widget interactions now unblocked.\nP  Widget <code>update</code> event.\nP  Widget <code>update</code> event.\nP  Widget now looks disabled.\nP  Widget now looks disabled.\nP  Widget now looks enabled.\nP  Widget now looks enabled.\nP  Widget changed to enabled or disabled visuals.\nP  Widget changed to enabled or disabled visuals.\nOperation.\nGets the corner radius for the outside of the outer border …\nNew border side with <code>Outset</code> style.\nAll sides a outset color.\nP  Defines what node list methods can run in parallel in …\nP  Defines what node list methods can run in parallel in …\nGets the parent widget or <code>None</code> if is root.\nExpands a function to a widget property.\nHold the event <code>handle</code> until the widget is deinited.\nHold the event <code>handles</code> until the widget is deinited.\nHold the var <code>handle</code> until the widget is deinited.\nHold the var <code>handles</code> until the widget is deinited.\nRegister an <code>editor</code> handler.\nRegister an <code>editor</code> handler to be called if none of the …\nFlags the widget to re-init after the current update …\nThe intersection of a source flags value with the …\nSchedule a re-render for the current widget.\nSchedule a frame update for the current widget.\nSame as <code>get</code>, but also logs an error is there are no …\nRequire the widget state <code>id</code>.\nNew border side with <code>Ridge</code> style.\nAll sides a ridged color.\nColor and style of the right border.\nComputes <code>other</code> above <code>self</code>, caps at <code>FRONT</code>.\nComputes <code>other</code> below <code>self</code>, stops at <code>BACK</code>.\nUn-scramble the underlying value to get the original …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nAssociate a <code>name</code> with the ID, if it is not named.\nSet the widget state <code>id</code> to <code>value</code>.\nNew widget function that returns the same <code>widget</code> for every …\nNew border side with <code>Solid</code> style.\nAll sides a solid color.\nStart building a <code>when</code> block, all properties set after this …\nStart building a <code>when</code> block, all properties set after this …\nLine style.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubscribe to receive events from <code>event</code> when the event …\nSubscribe to receive updates when the <code>var</code> changes.\nSubscribe to receive info rebuild requests when the <code>var</code> …\nSubscribe to receive info rebuild requests when the <code>var</code> …\nSubscribe to receive layout requests when the <code>var</code> changes.\nSubscribe to receive layout requests when the <code>var</code> changes …\nSubscribe to receive <code>UpdateOp</code> when the <code>var</code> changes.\nSubscribe to receive <code>UpdateOp</code> when the <code>var</code> changes and …\nSubscribe to receive render requests when the <code>var</code> changes.\nSubscribe to receive render update requests when the <code>var</code> …\nSubscribe to receive render update requests when the <code>var</code> …\nSubscribe to receive render requests when the <code>var</code> changes …\nSubscribe to receive updates when the <code>var</code> changes and the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nInstant the handler was called.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nColor and style of the top border.\nTop-left corner.\nTop-right corner.\nGets a text with a detailed widget id.\nGets a text with detailed path to the current widget.\nGet the widget ID, if called inside a widget.\nExpands an impl block into an <code>UiNode</code> trait implementation.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSchedule an update for the current widget.\nSchedule an info rebuild for the current widget.\nSchedule an <code>UpdateOp</code> for the current widget.\nUpgrade to strong reference if it still exists or nil.\nTry to downcast the value variable to <code>T</code>.\nThe value variable.\nP  Sets the widget visibility.\nP  Sets the widget visibility.\n Declares a widget function closure.\nExpands a struct to a widget struct and macro.\nBuild the widget.\nFinishes the build.\nReturns a mutable reference to the widget builder.\nReturns a mutable reference to the widget builder.\n Implement a property on the widget to strongly associate …\nReturns a mutable reference to the importance of the next …\nReturns a mutable reference to the importance of the next …\nExpands a struct to a widget mix-in.\nStarts building a new <code>WidgetBase</code> instance.\nStarts building a new <code>NonWidgetBase</code> instance.\nStart building a new instance.\n Sets properties and when condition on a widget builder.\nTakes the widget builder, finishing the widget macro build.\nTakes the widget builder, finishing the widget macro build.\nGets the type of <code>WidgetBase</code>.\nGets the type of <code>NonWidgetBase</code>.\nGets the widget type info.\nReturns a mutable reference to the <code>when</code> block if called …\nReturns a mutable reference to the <code>when</code> block if called …\nTransform point in the window space to the widget inner …\nGets the transform from the window space to the widget …\nSets the border layout for the context of <code>f</code>.\nCalls <code>f</code> while the widget is set to <code>ctx</code>.\nIndicates a boundary point where the <code>CORNER_RADIUS_VAR</code> …\nCalls <code>f</code> with an override target for var and event …\nCalls <code>f</code> while no widget is available in the context.\nCalls <code>f</code> with a read lock on the current widget state map.\nCalls <code>f</code> with a write lock on the current widget state map.\nP  Defines the render order of a widget in a layout panel.\nP  Defines the render order of a widget in a layout panel.\nNo corner radius.\nA <code>when</code> builder for <code>AnyArcWidgetHandler</code> values.\nRepresents a <code>WidgetHandler&lt;A&gt;</code> that can be reused.\nProperty renders a border visual.\nRepresents a property removed from <code>WidgetBuilding</code>.\nRepresents a mutable reference to property in <code>WidgetBuilder</code>…\nRepresents a property in <code>WidgetBuilder</code> or <code>WidgetBuilding</code>.\nMaximum nest position, property is inside all others and …\nProperty defines contextual value or variable for the …\nProperty defines the layout and size of the child or …\nProperty defines a contextual value or variable.\nProperty defines an event handler, or state monitor, they …\nProperty defines a visual of the widget.\nImportance of values defined in the widget instantiation.\nDefault index used for intrinsic nodes, is <code>u16::MAX / 3</code>.\nAll groups, from outermost(<code>WIDGET</code>) to innermost(<code>CHILD</code>).\nValue that indicates the override importance of a property …\nMember was accessed by index.\nKind of property input.\nProperty defines the position and size of the widget …\nMember was accessed by name.\nProperty nest position group.\nRepresents the sort index of a property or intrinsic node …\nDefault index used for properties, is <code>INTRINSIC_INDEX * 2</code>.\nRepresents a property instantiation request.\nRepresents a custom build action targeting a property …\nArguments for <code>PropertyBuildAction&lt;I&gt;</code>.\nProperty build actions that must be applied to property …\nData for property build actions associated with when …\nUnique ID of a property implementation.\nProperty info.\nProperty input info.\nRepresents the strong types of each input of a property.\nArgs for <code>PropertyInfo::new</code>.\nProperty strongly enforces a widget size.\nA location in source-code.\nInput is <code>impl UiNode</code>, build value is <code>ArcNode&lt;BoxedUiNode&gt;</code>.\nInput is <code>impl UiNodeList</code>, build value is …\nInput is <code>impl IntoValue&lt;T&gt;</code>, build value is <code>T</code>.\nInput is <code>impl IntoVar&lt;T&gt;</code>, build value is <code>BoxedVar&lt;T&gt;</code>.\nMinimal nest position, property is outside even context …\nImportance of default values defined in the widget …\nMinimal widget visual position, any property or node can …\nData for a custom when build action associated with an …\nRepresents a <code>when</code> block in a widget.\nInput var read in a <code>when</code> condition expression.\nRepresents what member and how it was accessed in a …\nRepresents a <code>WhenInput</code> variable that can be rebound.\nWidget instance builder.\nDirect property access in <code>WidgetBuilder</code> and <code>WidgetBuilding</code>.\nRepresents a finalizing <code>WidgetBuilder</code>.\nInput is <code>impl WidgetHandler&lt;A&gt;</code>, build value is …\nUnique identifier of a widget type.\nValues for each input in the same order they appear in …\nProperty args.\nProperty args.\nProperty args.\nProperties assigned in the <code>when</code> block, in the build widget …\nBuild the handler.\nInstantiate the widget.\nRun the build action on a input.\nData associated with the when condition in the build …\nThe property build actions can be empty or each item must …\nWhen build action data for each <code>build_actions</code>.\nProperty is “capture-only”, no standalone …\nFlags the property as captured and returns a reference to …\nFlags the property as captured and get the input node.\nFlags the property as captured and get the input list.\nFlags the property as captured and get the input list, or …\nFlags the property as captured and get the input list, or …\nFlags the property as captured and get the input node, or …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input var.\nFlags the property as captured and downcast the input var, …\nFlags the property as captured and downcast the input var, …\nFlags the property as captured and downcast the input …\nIf the property was <em>captured</em> before removal.\nIf the property was <em>captured</em>.\nIf the property was <em>captured</em>.\nRemove all registered build actions.\nRemove the custom build handler, if any was set.\nRemove all registered property build actions.\nClones the arguments.\n<code>std::column!</code>\nData for all inputs.\nGets the property input current value as a debug text.\nNew default property args.\nClosure that generates the default build actions, used …\nInstantiate the widget.\nDon’t insert the inspector node and inspector metadata …\nDon’t insert property/intrinsic trace nodes on build.\nDon’t insert the widget trace node on build.\nShorter <code>ty_name</code>.\nGets a strongly typed <code>widget_handler</code>.\nGets a strongly typed <code>value</code>.\nGets a strongly typed <code>var</code>.\nThe condition expression code.\nApply <code>other</code> over <code>self</code>.\n<code>std::file!</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nRetrieve the underlying value.\nThe major position.\nProperty nest position group.\nIf an innermost node is defined.\nIf any property is present in the builder.\nIf any unset filter is present in the builder.\nIf any when block is present in the builder.\nUnique ID.\nUnique ID that identifies the property implementation.\nProperty importance at the time of removal.\nProperty current importance.\nProperty current importance.\nExtra sorting within items of the same group.\nThe property input value.\nGets the index that can be used to get a named property …\nProperty inputs info.\nProperties referenced in the when condition expression.\nCreate a property instance with args clone or taken.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew position for intrinsic node.\nReturns <code>true</code> if a custom build handler is registered.\nInput kind.\n<code>std::line!</code>\nGets the property input as a debug variable.\nProperty declaration location.\nSource code location.\nWhen declaration location.\nWhat member and how it was accessed for this input.\nGroup name.\nGet the last part of the path.\nProperty name.\nInput name.\nNew from default value.\nNew empty default.\nNew build action.\nNew from <code>handler</code>.\nNew input setter and input var.\nNew from strongly typed values.\nNew property args from dynamically typed args.\nCall <code>new</code> with the same instance info and args, but with …\nNew from data, is only used if the action is provided by …\nGenerates a new unique ID.\nNew build action that just pass the input.\nThe widget public macro path.\nProperty group and index at the time of removal.\nProperty current group and index.\nProperty current group and index.\nIterate over the current properties.\niterate over mutable references to the current properties.\nProperty info.\nReference the property, if it is present.\nNew position for property.\nProperty.\n New <code>Box&lt;PropertyArgs&gt;</code> box from a property and value.\nConstructor that generates the default property instance.\n New <code>PropertyId</code> that represents the type and name.\n New <code>PropertyInfo</code> from property path.\n Gets the strong input storage types from a property path.\nModify the property, if it is present.\nPush a conditional handler.\nAdd an <code>action</code> closure that is called every time this …\nInsert intrinsic node, that is a core functionality node …\nInsert intrinsic node with custom nest position.\nInsert/override a property.\nAdd or override custom builder actions that are called to …\nInsert property with custom nest position.\nInsert a <code>name = unset!;</code> property.\nInsert a property build action filter.\nInsert a <code>when</code> block.\nRemoves the property.\nUn-scramble the underlying value to get the original …\nSet/replace the innermost node of the widget.\nSet a <code>build</code> closure to run instead of <code>default_build</code> when …\n New <code>SourceLocation</code> that represents the location you call …\nMove all <code>properties</code> to a new builder.\nOutput of the when expression.\nType as defined by kind.\nType name.\nWidget type ID.\nGets a <code>InputKind::UiNode</code>.\nGets a <code>InputKind::UiNodeList</code>.\nUnit value.\nGets a <code>InputKind::Value</code>.\nGets a <code>InputKind::Var</code>.\nInput var.\nThe <code>WhenBuildAction::data</code> for each when assign that …\nGets a <code>InputKind::WidgetHandler</code>.\nThe widget that started this builder.\nThe widget that started this builder.\n Gets the <code>WidgetType</code> info of a widget.\nNo interaction allowed, the widget must behave like a …\n<code>BLOCKED</code> with <code>DISABLED</code> visuals.\nWidget was hit on a hit-test shape rendered before the …\nOnly “disabled” interactions allowed and disabled …\nNormal interactions allowed.\nWidget was hit on a hit-test shape rendered after the …\nA hit-test hit.\nA hit-test result.\nWidget interactivity has changed after an info update.\nInclude the descendant and continue filtering its …\nInfo about a segment in the first or last row of an …\nRepresents a <code>WidgetPath</code> annotated with each widget’s …\nRepresents the level of interaction allowed for a widget.\n<code>INTERACTIVITY_CHANGED_EVENT</code> args.\nArgument for a interactivity filter function.\nWidget was not hit.\nWidget was hit on a hit-test shape rendered after the …\nRepresents a builder split from the main builder that can …\nHit-test result on a widget relative to it’s descendants.\nSkip the descendant but continue filtering its descendants.\nSkip the descendant and its descendants.\nInclude the descendant but skips its descendants.\nA widget global inner transform has changed after render.\n<code>TRANSFORM_CHANGED_EVENT</code> args.\nWidget tree filter selected for a widget in the tree.\nWidget visibility has changed after render.\n<code>VISIBILITY_CHANGED_EVENT</code> args.\nA window widget tree was rebuild.\nShared reference to the combined <em>border</em> and corner radius …\nShared reference to layout size, offsets, rendered …\nRepresents the descendants of a widget, allows checking if …\nReference to a widget info in a <code>WidgetInfoTree</code>.\nWidget info tree builder.\n<code>WIDGET_INFO_CHANGED_EVENT</code> args.\nTag for the <code>WidgetInfo::meta</code> state-map.\nA tree of <code>WidgetInfo</code>.\nStats over the lifetime of a widget info tree.\nInfo about the inlined rows of the widget.\nInfo about the input inline connecting rows of the widget.\nFull address of a widget.\nAccessibility metadata types.\nAccessibility metadata builder.\nAccessibility info, if the widget is accessible.\nDescendant branches that have accessibility info.\nIf this tree contains accessibility information.\nFirst ancestor that is accessible.\nGet a flags value with all known bits set.\nAll widgets including <code>root</code>.\nMake a path to an ancestor id that is contained in the …\nMake a path to an ancestor id that is contained in the …\nWidgets that contain <code>widget_id</code>, root first.\nIterator over parent -&gt; grandparent -&gt; .. -&gt; root.\nDereferences to the path.\nThe baseline offset up from the inner bounds bottom line.\nGets the baseline offset up from the inner bounds bottom …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the previous and new interactivity if the widget …\nIndex of first <code>BLOCKED</code>.\nClone a reference to the widget border and corner radius …\nAll the transforms introduced by this widget, starting …\nCount of moved or resized widgets in the last …\nLast window frame that moved or resized the inner bounds …\nCustom metadata associated with the tree during info build.\nDuration of the <code>UiNode::info</code> call for the window content.\nGets if the widget only renders if <code>outer_bounds</code> intersects …\nWidget inner bounds center in the window space.\nSpatial iterator over self and descendants with center …\nSpatial iterator over self and descendants with center …\nGets the previous and new inner transform of the widget.\nAll event subscribers that changed inner-transform mapped …\nAll event subscribers that changed visibility mapped to …\nAll event subscribers that changed interactivity in this …\nGets the widget’s child offset inside the inner bounds.\nIterator over the direct descendants of the widget.\nCount of <code>children</code>.\nReturn info to default state, but retain memory for reuse.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIf the <code>widget_id</code> is part of the path.\nIf the tree contains the widget.\nWhether all set bits in a source flags value are also set …\nIf the widget is a descendant.\nIf the widget was hit.\nCorner radius set on the widget, this is the <em>outer</em> curve …\n<code>ENABLED</code>.\nBroadcast to all widgets.\nTarget the <code>changed</code> widgets.\nTarget the <code>changed</code> widgets.\nTarget the <code>changed</code> widgets.\nCount of ancestors.\nIterator over all widgets contained by this widget.\nTotal number of <code>descendants</code>.\nGets a value that can check if widgets are descendant of …\nThe intersection of a source flags value with the …\nIndex of first <code>DISABLED</code>.\nValue that indicates the distance between this widget …\nGet a flags value with all bits unset.\nGets the <code>ENABLED</code> part of the path, or none if the widget …\nReturns the previous and new interactivity if the widget …\nPaths are equal if they share the same window and widget …\nPaths are equal if the are the same window, widgets and …\nPaths are equal if the are the same window, widgets and …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGets the baseline of the widget after <code>inner_offset</code> is …\nBuild the info tree.\nSearch the widget in the hit-test result.\nPreferred first size.\nReference to the first widget within this widget.\nInline segments in the first row.\nSegments of the first row.\nIndicates that <code>first</code> starts in the next row, not in the …\nSets the info tree build metadata <code>id</code> without value.\nSets the widget info metadata <code>id</code> without value.\nThe window frame that was hit-tested.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>Include</code> for <code>true</code> and <code>Skip</code> for <code>false</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> -&gt; <code>ENABLED</code><code>false</code> -&gt; <code>DISABLED</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nNew interactivity path with all widgets enabled.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nNumber of times info was rebuild for the window.\nReference to the widget in the tree, if it is present.\nReference to the widget or first parent that is present.\nIf the widget has at least one child.\nIf the parent widget has multiple children.\nGets all widgets of self and descendants hit by a <code>point</code>, …\nReturns <code>true</code> if a hit-test clip that affects the <code>child</code> …\nGets the relative hit-test Z for <code>window_point</code> against the …\nAll hits, from top-most.\nWidget id.\nWidget being filtered.\nExclusive read the latest inline layout info.\nSize of the widget child area, not transformed.\nCalculate the bounding box that envelops the actual size …\nWidget inner rectangle in the window space.\nSpatial iterator over self and descendants with inner …\nIterator over self and all descendants with inner bounds …\nSpatial iterator over self and descendants with inner …\nComputes the <code>corner_radius</code> deflated by <code>offsets</code>, this is …\nSpatial iterator over self and descendants with inner …\nGets the widget’s inner bounds offset inside the outer …\nCompute the inner offset plus <code>offsets</code> left, top.\nIf the <code>baseline</code> is added from the <code>inner_offset</code>.\nGets the widget’s inner bounds size.\nCompute the inner size offset by <code>offsets</code>.\nSize of the widget inner area, not transformed.\nWidget inner size when the rows where last updated.\nGets the global transform of the widget’s inner bounds …\nCompute the inner transform offset by the <code>offsets</code>.\nWidget inner transform in the window space.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHelper types for inspecting an UI tree.\nInteractivity for each widget, root first.\nFull path to this widget with <code>interactivity</code> values.\nInteractivity of the widget.\nGet or compute the interactivity of the widget.\nSearch for the interactivity value associated with the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nGets a clone of <code>self</code> that only contains the hits that also …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto internal parts.\nInvalidates the <code>negative_space</code> cache.\nWhether all known bits in this flags value are set.\nIf <code>self</code> is an ancestor of <code>maybe_descendant</code>.\nWidget was unblocked or did not exist, now is blocked.\nNo interaction allowed, may still be visually enabled.\nIf the widget and descendants was collapsed during layout.\nIf all value are not different from initial.\nIf all value are not different from initial.\nIf <code>self</code> is inside <code>maybe_ancestor</code>.\nWidget was enabled or did not exist, now is disabled.\nOnly “disabled” interactions allowed and disabled …\nWhether all bits in this flags value are unset.\nWidget was disabled or did not exist, now is enabled.\nNormal interactions allowed.\nGets if the <code>inner_bounds</code> are fully inside the parent inner …\nReturns <code>true</code> if this widget’s inner bounds are fully …\nWidget is new, no previous interactivity state is known, …\nIf the widgets in this tree have been rendered at least …\nIf the widget info and all descendants did not change in …\nWidget was blocked or did not exist, now is unblocked.\nWidget was visually enabled or did not exist, now is …\nDisabled visuals, maybe also blocked.\nWidget was visually disabled or did not exist, now is …\nEnabled visuals, may still be blocked.\nWidget info tree iterators.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nPreferred last size.\nReference to the last widget within this widget.\nLast window frame that rendered this tree.\nInline segments in the last row.\nSegments of the last row.\nIndicates that <code>last</code> starts in a next row, not in the same …\nTotal number of widgets in the tree.\nGets the latest inline measure info.\nGets the widget’s last measured outer bounds size.\nCustom metadata associated with the widget during info …\nSnapshot of the <code>LayoutMetrics</code> on the last layout.\nAll <code>metrics</code> fields used by the widget or descendants on …\nFind the descendant with center point nearest of <code>origin</code> …\nFind the widget, self or descendant, with center point …\nFind the widget with center point nearest to <code>origin</code> center …\nFind the widget with center point nearest to <code>origin</code> center …\nFind the widget, self or descendant, with center point …\nFind the widget with center point nearest of <code>origin</code> within …\nFind the widget with center point nearest of <code>origin</code> within …\nGets or computes the negative space of the <code>rows</code> in the …\nStarts building a info tree with the root information.\nNew custom widget path.\nNew custom path.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew default.\nNew default.\nNew from <code>info</code>.\nNew custom path with all widgets enabled.\nGets the <code>interaction_path</code> if it is different from <code>old_path</code>.\nNew interactivity of the widget.\nGets the <code>path</code> if it is different from <code>old_path</code>.\nNew info with bound sizes known.\nReference to the next widget within the same parent.\nIterator over all next widgets within the same parent.\nIterator over all next widgets within the same <code>ancestor</code>, …\nNo hits info\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nGets the movement between previous and new transformed …\nSum of the widths of all borders set on the widget.\nThe <code>center</code> orientation in relation to an <code>origin</code>.\nSpatial iterator over all widgets, self and descendants, …\nSpatial iterator over all widgets, self and descendants, …\nIterator over all widgets with inner-bounds not fully …\nIterator over all descendants with inner bounds not fully …\nOuter bounding box, updated after every render.\nWidget outer rectangle in the window space.\nGets the widget’s last layout outer bounds size.\nSize of the widget outer area, not transformed.\nGets the global transform of the widget’s outer bounds …\nWidget outer transform in window space.\nCollect info from <code>split</code> into <code>self</code>.\nCreate a new info builder that can be built in parallel …\nReference to the widget that contains this widget.\nOffset rendered in the widget inner set by the parent …\nThe widget parent, if it is not the root widget.\nFull path to this widget.\nGets the widget perspective and perspective origin (in the …\nGets the 3D perspective for this widget.\nThe point in the window that was hit-tested.\nPrevious interactivity of this widget.\nReference to the previous widget within the same parent.\nIterator over all previous widgets within the same parent.\nIterator over all previous widgets within the same <code>ancestor</code>…\nPrevious widget tree.\nPrevious tree with old interactivity values.\nAdd the <code>interactivity</code> bits to the current widget’s …\nRegister a closure that returns the <code>Interactivity</code> allowed …\nCalls <code>f</code> to build the context widget info.\nThe intersection of a source flags value with the …\nGets the widget’s latest render info, if it was rendered …\nCount of widgets that where reused from a previous tree.\nReference to the root widget in the tree.\nReference to the root widget.\nGets a path to the root widget of this path.\nGets a path to the root widget of this path.\nLast layout rows of the widget.\nScale factor of the last rendered frame.\nIterator over self -&gt; parent -&gt; grandparent -&gt; .. -&gt; root.\nIterator over the widget and the direct descendants of the …\nIterator over the widget and all widgets contained by it.\nIterator over self and all next widgets within the same …\nIterator over self, descendants and all next widgets …\nIterator over self and all previous widgets within the …\nIterator over self, descendants and all previous widgets …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the info tree build metadata <code>id</code> to <code>value</code>.\nReplace the <code>first_segs</code> with <code>segs</code>.\nReplace the <code>last_segs</code> with <code>segs</code>.\nSet the widget info metadata <code>id</code> to <code>value</code>.\nGet the inner most widget parent shared by both <code>self</code> and …\nGet the inner most widget parent shared by both <code>self</code> and …\nFirst ancestor of <code>self</code> and <code>other</code>.\nAll parent children except this widget.\nGets the bounds box that envelops all widgets, including …\nCompute the bounding box that envelops self and …\nIterator over self and descendants, first self, then all …\nStatistics abound the info tree.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGets a path to the <code>widget_id</code> of this path.\nGets a sub-path up to <code>widget_id</code> (inclusive), or <code>None</code> if …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe top hit.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nBuild an access tree from the info tree.\nBuild partial or full access trees for updated widgets.\nBuild partial access trees for widgets that changed …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDetailed id text.\nPath details to help finding the widget during debug.\nGets if the widget preserves 3D perspective.\nGets the transform style for this widget.\nReference the <code>WidgetInfoTree</code> that owns <code>self</code>.\nNew widget tree.\nWidget tree where some widgets have new inner transforms.\nWidget tree where some widgets have new visibility.\nNew tree with new interactivity values.\nGets the <code>ENABLED</code> or <code>DISABLED</code> part of the path, or none if …\nGets the union of all row rectangles.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nView-process generation.\nReturns the previous and new interactivity if the widget …\nLast window frame that changed visibility of at least one …\nGets the visibility of the widget or the widget’s …\nBlank window that contains only the root widget taking no …\nCurrent widget id.\nThe widget.\nID of widget hit.\n<code>ancestors</code> and <code>widget_id</code>, root first.\nSegment width.\nId of the window that contains the widgets.\nId of the window that owns all widgets represented in the …\nThe window that was hit-tested.\nWindow ID.\nWidget info tree build metadata.\nCalls the <code>info</code> closure and returns the range of children …\nVisit a mutable reference to the new <code>first_segs</code> value, <code>f</code> …\nVisit a mutable reference to the new <code>last_segs</code> value, <code>f</code> is …\nCurrent widget info metadata.\nSegment offset from the row rectangle origin.\nGet the z-index of the widget in the latest frame if it …\nZ-index of the hit.\nZip widgets and interactivity.\nArguments for <code>on_access_build</code> handlers.\nAccessibility info for a widget.\nAccessibility metadata.\nIdentifies the currently active widget when focus is on a …\nHow input text triggers display of one or more predictions …\nIf the widget is checked (<code>Some(true)</code>), unchecked (…\nDefines the total number of columns in a <code>Table</code>, <code>Grid</code>, or …\nDefines a widget’s column index in the parent table or …\nDefines the number of columns spanned by the widget in the …\nAccessibility commands supported by the widget.\nWidget(s) whose contents or presence are controlled by …\nKind of current item the widget represents.\nIdentifies the widget(s) that describes this widget.\nIdentifies the widget that is described by this widget.\nIdentifies the widget(s) that provide additional …\nGets the invalid widget that this widget is an error …\nGets visibility of related widgets.\nExclude the widget and descendants from the view-process …\nUses the accessible children as <code>labelled_by</code>.\nSets if the widget is modal when displayed.\nIndicates that the user may select more than one item from …\nIndicates that the widget is not editable, but is …\nIndicates that user input is required on the widget before …\nIndicates that the widget is selected.\nOptions for next widget to read.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates the availability and type of interactive popup …\nFull widget info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the widget data has errors.\nIf the widget and descendants is <em>visible</em> in the …\nIndicates that the user may select more than one item from …\nIndicates that the widget is not editable, but is …\nIndicates that user input is required on the widget before …\nIndicates that the widget is selected.\nDefines the number of items in the current set of list …\nDefines the widget’s number or position in the current …\nGets the accessibility name explicitly set on this widget.\nIdentifies the widget(s) that labels the widget it is …\nIf the widget children must be used like <code>labelled_by</code>.\nIdentifies the widget that is labelled by this widget.\nGets the language of texts inside this widget and …\nDefines the hierarchical level of a widget within a …\nGets the live indicator, atomic and busy.\nIndicates whether the widget is modal when displayed.\nPartially build view info, does not include children info.\nRegister a <code>handler</code> that is called every time view-process …\nIndicates whether the widget’s orientation is …\nExtra widgets that are <em>child</em> to this widget, but are not …\nShort hint (a word or short phrase) intended to help the …\nAdd a supported access command.\nPush a widget whose contents or presence are controlled by …\nPush a widget that describes this widget.\nPush a widget that provide additional information related …\nPush an option for next widget read that is not the next …\nPush a widget that provide additional information related …\nPush a widget that is a <em>child</em> of this widget, but is not …\nAccessibility role of the widget.\nDefines the total number of rows in a <code>Table</code>, <code>Grid</code>, or …\nDefines a widget’s column index in the parent table or …\nDefines the number of columns spanned by the widget in the …\nNormalized (0..1) horizontal scroll, 0 is showing the …\nNormalized (0..1) vertical scroll, 0 is showing the …\nIdentifies the currently active widget when focus is on a …\nSet how input text triggers display of one or more …\nIf the widget is checked (<code>Some(true)</code>), unchecked (…\nSets the total number of columns in a <code>Table</code>, <code>Grid</code>, or …\nSets the widget’s column index in the parent table or …\nSets the number of columns spanned by the widget in the …\nIndicates that the widget represents the current item of a …\nSet a widget that is described-by this widget.\nIndicates that the widget is an error message for the …\nIndicate that the widget toggles the visibility of related …\nIndicates that the widget’s data is invalid with …\nSets the number of items in the current set of list items …\nSets the widget’s number or position in the current set …\nSets a custom name for the widget in accessibility info.\nSet a widget that is labelled-by this widget.\nDefines the language used by screen-readers to read text …\nSets the hierarchical level of the widget within a parent …\nIndicate that the widget can change, how the change can be …\nIndicates whether the widget’s orientation is …\nShort hint (a word or short phrase) intended to help the …\nIndicates the availability and type of interactive popup …\nSet the accessibility role of the widget.\nSets the total number of rows in a <code>Table</code>, <code>Grid</code>, or <code>TreeGrid</code>…\nSets the widget’s row index in the parent table or grid.\nSets the number of rows spanned by the widget in the …\nSets the amount scrolled horizontally if allowed.\nSets the amount scrolled vertically if allowed.\nSets the sort direction for the table or grid items.\nSet the current value.\nSet the maximum value (inclusive).\nSet the minimum value (inclusive).\nSet a text that is a readable version of the current value.\nIndicates if items in a table or grid are sorted in …\nCurrent value.\nMaximum value (inclusive).\nMinimum value (inclusive).\nCurrent value in a readable format.\nWidget that is converting to view info.\nQuery pattern for the <code>WidgetInfoInspectorExt</code> inspect …\nQuery pattern for the <code>WidgetInfoInspectorExt</code> inspect …\nInspected contextual variables actualized at the moment of …\nWidget instance inspector info.\nWidget instance item.\nMarks an intrinsic node instance inserted by the widget.\nProperty instance.\nExtensions methods for <code>WidgetInfo</code>.\nInspected contextual variables actualized at the moment of …\nBuilder that was used to instantiate the widget.\nIf a <code>inspector_info</code> is defined for the widget.\nGet and downcast.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the actualized property var, if at the moment of info …\nGet and map debug.\nReturns the first ancestor that matches.\nReturns the first child that matches.\nReturns the first descendant that matches.\nSearch for a property set on the widget.\nReference the builder that was used to generate the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinal instance items.\nReturns <code>true</code> if the pattern includes the widget.\nReturns <code>true</code> if the pattern includes the property.\nGets the parent property that has this widget as an input.\nIterate over property items.\nFinal property args.\nIf the property was captured by the widget.\nIntrinsic node nest group.\nName given to this intrinsic by the widget.\nIterator over all ancestors of a widget.\nIterator over all children of a widget.\nInclude the descendant and continue filtering its …\nIterator over all next siblings of a widget.\nIterator over all next siblings of a widget.\nReversing tree iterator.\nSkip the descendant but continue filtering its descendants.\nSkip the descendant and its descendants.\nInclude the descendant but skips its descendants.\nWidget tree filter selected for a widget in the tree.\nFiltering tree iterator.\nPrimary implementer of <code>TreeIterator</code>.\nIterator that traverses the branches of a widget tree.\nNew empty iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew with a children selection.\nCheck if any item is not filtered out by a <code>TreeFilter</code> …\nCreates an iterator which uses a closure to filter items …\nGets the first item not filtered out by a <code>TreeFilter</code> …\nCreates a reverse tree iterator.\nPlaceholder for the dynamic child of an adoptive node.\nRepresents a node setup to dynamically swap child.\nA reference counted <code>UiNode</code>.\nA reference counted <code>UiNodeList</code>.\nAn <code>UiNode</code> in a box.\nAn <code>UiNodeList</code> in a box.\nDefault <code>PanelList</code> associated data.\nThe <code>UiNode::deinit</code>.\nThe <code>UiNodeOp::Deinit</code>.\nRepresents an <code>UiNodeList</code> that can be modified using a …\nRepresents a sender to an <code>EditableUiNodeList</code>.\nThe <code>UiNode::event</code>.\nThe <code>UiNodeOp::Event</code>.\nA UI node that fills the available layout space.\nThe <code>UiNode::info</code>.\nThe <code>UiNodeOp::Info</code>.\nThe <code>UiNode::init</code>.\nThe <code>UiNodeOp::Init</code>.\nThe <code>UiNode::layout</code>.\nThe <code>UiNodeOp::Layout</code>.\nChild node of <code>match_node</code>.\nChildren node of <code>match_node_list</code>.\nChild node of <code>match_widget</code>.\nThe <code>UiNode::measure</code>.\nThe <code>UiNodeOp::Measure</code>.\nA UI node that does nothing and has collapsed layout (zero …\nRepresents an <code>UiNodeListObserver</code> that applies an offset to …\nRepresents the final <code>UiNodeList</code> in a panel layout node.\nRepresents an item’s associated data in a <code>PanelList</code>.\nFirst and last child widget in a <code>PanelList</code>.\nThe <code>UiNode::render</code>.\nThe <code>UiNodeOp::Render</code>.\nThe <code>UiNode::render_update</code>.\nThe <code>UiNodeOp::RenderUpdate</code>.\nRepresents the contextual parent <code>SortingList</code> during an …\nRepresents a sorted view into an <code>UiNodeList</code>.\nRepresents an UI tree node.\nRepresents a list of UI nodes.\nAdds the <code>chain</code> method for all <code>UiNodeList</code> implementors.\nImplementation of <code>UiNodeListChain::chain</code>.\nRepresents an <code>UiNodeList::update_all</code> observer that can be …\nRepresents a node operation in a <code>match_node</code>.\nIdentifies an <code>UiNodeOp</code> method without the associated data.\nVec of boxed UI nodes.\nThe <code>UiNode::update</code>.\nThe <code>UiNodeOp::Update</code>.\nWeak reference to a <code>ArcNode&lt;U&gt;</code>.\nWeak reference to a <code>ArcNodeList&lt;U&gt;</code>.\nBuilds a node that can be one of multiple options, …\nBuilds a node list that can be one of multiple options, …\nAccess to widget z-index in a parent <code>PanelList</code>.\nReturns the <code>type_id</code> of the unboxed list.\nReturns the <code>type_id</code> of the unboxed list.\nReturns the <code>type_id</code> of the unboxed list.\nReturns the <code>type_id</code> of the unboxed node.\nReturns the <code>type_id</code> of the unboxed node.\nReturns the <code>type_id</code> of the unboxed node.\nReturns <code>true</code> if the <code>EditableUiNodeList</code> still exists.\nAccess to mut <code>dyn Any</code> methods.\nAccess to mut <code>dyn Any</code> methods.\nAccess to mut <code>dyn Any</code> methods.\nAccess to <code>dyn Any</code> methods.\nAccess to <code>dyn Any</code> methods.\nAccess to <code>dyn Any</code> methods.\nAccess to mut <code>dyn Any</code> methods.\nAccess to mut <code>dyn Any</code> methods.\nAccess to mut <code>dyn Any</code> methods.\nAdapter to <code>match_node</code> child type.\nHelper for declaring state properties that are controlled …\nCreates a border node that delegates rendering to a …\nGets <code>self</code> boxed, or itself if it is already boxed.\nBox this node or just returns <code>self</code> if it is already a …\nBox this node or just returns <code>self</code> if it is already a …\nBox this node or just returns <code>self</code> if it is already a …\nBuild a node that is always the first <code>true</code> condition or …\nBuild a list that is always the first <code>true</code> condition or …\nHelper for complying with the <code>&quot;dyn_node&quot;</code> feature, boxes …\nHelper for complying with the <code>&quot;dyn_node&quot;</code> feature, boxes …\nHelper for complying with the <code>&quot;dyn_node&quot;</code> feature, boxes …\nCreates a new <code>UiNodeList</code> that chains <code>self</code> and <code>other</code>.\nBorrow the actual child.\nBorrow the actual child.\nGets the child offset to be used in the default <code>render_all</code> …\nChild offset to be used in the default <code>render_all</code> and …\nReference the children.\nRequest a removal of all current widgets.\nCommit <code>child_offset</code> and <code>define_reference_frame</code> changes.\nCalls <code>commit</code> for each child data, aggregate changes.\nReference the associated data.\nIf a new reference frame should be created for the item …\nIf a new reference frame should be created for the item …\nDeinitializes the node in the current UI context.\nDeinit the list in a context, all nodes are also deinited.\nDeinit the list in a context, all nodes are also deinited.\nDeinit the list in a context, all nodes are also deinited.\nFlags the current operation as <em>delegated</em>, stopping the …\nFlags the current operation as <em>delegated</em>, stopping the …\nFlags the current operation as <em>delegated</em>, stopping the …\nDowncast to <code>L</code>, if <code>self</code> is <code>L</code> or is a <code>BoxedUiNodeList</code> that …\nDowncast to <code>L</code>, if <code>self</code> is <code>L</code> or is a <code>BoxedUiNodeList</code> that …\nDowncast to <code>L</code>, if <code>self</code> is <code>L</code> or is a <code>BoxedUiNodeList</code> that …\nDowncast to <code>T</code>, if <code>self</code> is <code>T</code> or <code>self</code> is a <code>BoxedUiNode</code> that …\nDowncast to <code>T</code>, if <code>self</code> is <code>T</code> or <code>self</code> is a <code>BoxedUiNode</code> that …\nDowncast to <code>T</code>, if <code>self</code> is <code>T</code> or <code>self</code> is a <code>BoxedUiNode</code> that …\nCreates a <code>WeakNode&lt;U&gt;</code> reference to this node.\nCreates a <code>WeakNodeList&lt;L&gt;</code> reference to this list.\nMove all nodes into <code>vec</code>.\nNew reference to no list.\nGets an static string representing the enum variant …\nReceives an event.\nReceive an event for the list in a context, all nodes are …\nReceive an event for the list in a context, all nodes are …\nReceive an event for the list in a context, all nodes are …\nHelper for declaring state properties that depend on a …\nHelper for declaring state properties that depend on two …\nHelper for declaring state properties that depend on three …\nHelper for declaring state properties that depend on four …\nCreate a widget node that wraps the <code>widget</code> with any number …\nTransforms and clips the <code>content</code> node according with the …\nCalls <code>f</code> for each node in the list with the index, …\nCalls <code>f</code> for each node in the list with the index and …\nIterate over widget contexts.\nIterate over the list in the Z order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom parts, assumes the nodes are not inited and that <code>child</code>…\nNew from list and associated data.\nNew from an already allocated vec.\nGets the index set on the <code>WIDGET</code>.\nGets the panel children if the <code>parent</code> contains the <code>panel_id</code>…\nGets the index set on the <code>widget</code>.\nIf the current operation was already delegated to the …\nIf the current operation was already delegated to the …\nIf the current operation was already delegated to the …\nBuilds widget info.\nRebuilds the list in a context, all node info is rebuilt.\nRebuilds the list in a context, all node info is rebuilt.\nRebuilds the list in a context, all node info is rebuilt.\nGets the ID set on the parent widget info if …\nInitializes the node in a new UI context.\nInit the list in a context, all nodes are also inited.\nInit the list in a context, all nodes are also inited.\nInit the list in a context, all nodes are also inited.\nGets a <code>BoxedUiNode</code> that already is a full widget or will …\nGets a <code>BoxedUiNode</code> that already is a full widget or will …\nGets a <code>BoxedUiNode</code> that already is a full widget or will …\nBox and <code>insert</code> the node.\nRequest an update for the insertion of the <code>widget</code>.\nCalled when a node is inserted at <code>index</code>.\nCreate a node that controls interaction for all widgets …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto child reference and node.\nInto list and associated data.\nGets a <code>BoxedUiNode</code> that is a full widget.\nGets a <code>BoxedUiNode</code> that is a full widget.\nGets a <code>BoxedUiNode</code> that is a full widget.\nCalls <code>SortingList::invalidate_sort</code> on the parent list.\nInvalidate the sort, the list will resort on the nest time …\nReturns <code>true</code> if the list does not contain any nodes.\nReturns <code>true</code> if the list does not contain any nodes.\nReturns <code>true</code> if the list does not contain any nodes.\nReturns <code>true</code> if this node is inited.\nIf the current call has a parent sorting list.\nGets if this node does nothing and is layout collapsed.\nGets if this node does nothing and is layout collapsed.\nGets if this node does nothing and is layout collapsed.\nReturns true if this observer does not use the item …\nGets if this node represents a full widget, that is, it is …\nGets if this node represents a full widget, that is, it is …\nGets if this node represents a full widget, that is, it is …\nComputes the widget layout given the contextual layout …\nCall <code>layout</code> for each node and combines the final size …\nCall <code>layout</code> for each node and combines the final size …\nCall <code>layout</code> for each node and combines the final size …\nCall <code>layout</code> for each node and combines the final size …\nGets the current number of nodes in the list.\nMutable borrow the inner list.\nNode that presents <code>list</code> using <code>item_fn</code> for each new list …\nCreates a node that is implemented as a closure that …\nCreates a node that is implemented as a closure that …\nCreates a node that is implemented as a closure that …\nLike <code>match_node</code>, but does not change the child type when …\nCreates a widget that is implemented as a closure that …\nComputes the widget size given the contextual layout …\nCall <code>measure</code> for each node and combines the final size …\nCall <code>measure</code> for each node and combines the final size …\nCall <code>measure</code> for each node and combines the final size …\nCall <code>measure</code> for each node and combines the final size …\nRequest a widget move, the widget is searched by <code>id</code>, if …\nRequest a widget remove and re-insert.\nCalled when a node is removed from <code>removed_index</code> and …\nGets the operation without the associated data.\nGets an static string representing the method name …\nCreate the adoptive node, the <code>AdoptiveChildNode</code> must be …\nNew node.\nNew list.\nNew with node that is used when no condition is active.\nNew with list that is used when no condition is active.\nNew from list and sort function.\nNew default empty.\nNew from <code>list</code> and default data.\nNew default.\nNew from <code>list</code> and custom data type.\nNew node that contains a weak reference to itself.\nNew rc list that contains a weak reference to itself.\nKey used to define reference frames for each item.\nRuns the <code>UiNodeOp</code>.\nRuns the <code>UiNodeOp</code>.\nRuns the <code>UiNodeOp</code>.\nRuns the  <code>UiNodeOp</code>.\nRuns the  <code>UiNodeOp</code>.\nRuns the  <code>UiNodeOp</code>.\nCalls <code>f</code> for each node in the list with the index, in …\nCalls <code>f</code> for each node in the list with the index and …\nCalls <code>fold</code> for each node in the list in parallel, with …\nCalls <code>fold</code> for each node in the list with the index and …\nNode that presents <code>data</code> using <code>wgt_fn</code>.\nNode that presents <code>data</code> using <code>wgt_fn</code> if data is available, …\nPush a conditional node.\nPush a conditional list.\nBox and <code>push</code> the node.\nRequest an update for the insertion of the <code>widget</code> at the …\nReborrow the op.\nCreate a sender that can edit this list.\nRequest an update for the removal of the widget identified …\nCalled when a node is removed from <code>index</code>.\nGenerates render instructions and updates transforms and …\nRender all nodes.\nRender all nodes.\nRender all nodes.\nUpdates values in the last generated frame.\nRender all nodes.\nRender all nodes.\nRender all nodes.\nReplaces the child node.\nCalled when large or unspecified changes happen to the …\nRequest a filtered mass removal of nodes in the list.\nReplace the current node with the <code>new_node</code> in the current …\nReplace the current list with the <code>new_list</code> in the current …\nTry set the z-index in the current <code>WIDGET</code>.\nCreate a slot node that takes ownership of this node when …\nCreate a slot list that takes ownership of this list when …\nCreate a slot node that takes ownership of this node as …\nCreate a slot node list that takes ownership of this list …\nCreate a slot node that takes ownership of this node when …\nCreate a slot list that takes ownership of this list when …\nWraps the node in a node that, before delegating each …\nWraps the node in a node that, before delegating each …\nWraps the node in a node that, before delegating each …\nEnable tracking the first and last child in the parent …\nCalls <code>f</code> in the context of the node, if it can be locked …\nCreate the adoptive node using a closure that can fail.\nCreates an <code>UiNodeVec</code> containing the arguments.\nReceives variable and other non-event updates.\nGets the panel children if it may have changed since …\nReceive updates for the list in a context, all nodes are …\nReceive updates for the list in a context, all nodes are …\nReceive updates for the list in a context, all nodes are …\nAttempts to upgrade to a <code>ArcNode&lt;U&gt;</code>.\nAttempts to upgrade to a <code>ArcNodeList&lt;U&gt;</code>.\nHelper for declaring state getter properties that are …\nHelper for declaring state properties that are controlled …\nNew <code>with_capacity</code>.\nCalls <code>f</code> with the <code>WIDGET</code> context of the node if it <code>is_widget</code>…\nCalls <code>f</code> with the <code>WIDGET</code> context of the node if it <code>is_widget</code>…\nCalls <code>f</code> with the <code>WIDGET</code> context of the node if it <code>is_widget</code>…\nHelper for declaring widgets that are recontextualized to …\nHelper for declaring nodes that sets a context local value.\nHelper for declaring nodes that sets a context local value …\nHelper for declaring properties that sets a context var.\nHelper for declaring properties that sets a context var to …\nHelper for a property that gets the index of the widget in …\nHelper for a property that gets the index of the widget in …\nVisit the specific node.\nVisit the specific node with associated data, panic if …\nHelper for a property that gets the reverse index of the …\nHelper for declaring properties that set the widget state.\nHelper for declaring properties that set the widget state …\nGets the <code>index</code> sorted in the <code>list</code>.\nAll subsequent frames rendered will be captured and …\nAll subsequent frames rendered will be captured and …\nExtension trait, adds <code>run_window</code> to <code>AppExtended</code>.\nWindow auto-size config.\nDefines if a widget load affects the parent window load.\nClose button.\nUses the content desired width and height.\nUses the content desired height.\nUses the content desired width.\nOperation canceled, no window closed.\nCentralizes the window in the monitor screen, defined by …\nCentralizes the window in the parent window, defined by …\nResponse message of <code>close</code> and <code>close_together</code>.\nOperation completed, all requested windows closed.\nActivate critical focus request.\nDoes not automatically adjust size.\nPrefer the best dedicated GPU, probably the best …\nResolves to <code>position</code>.\nThe operating system’s default icon.\nWidget does not hold back window load.\nWindows can handle event updates in parallel.\nWidget requests a <code>WindowLoadingHandle</code> and retains it until …\nWindow has exclusive access to the monitor’s video …\nA window frame has finished rendering.\nAllow fullscreen windowed or exclusive video.\nEnable fullscreen, but only windowed not exclusive video.\nRepresents a focus request indicator.\nFrame image capture mode in a window.\n<code>FRAME_IMAGE_READY_EVENT</code> args.\nWindow is chromeless and completely fills the screen, …\nNormal mode, shows a system window with content rendered.\nHeadless mode, no system window and no renderer. The …\nWindow extension methods for <code>HeadlessApp</code>.\n“Monitor” configuration used by windows in headless …\nHeadless mode, no visible system window but with a …\nInput Method Editor event targeting a text input widget.\nVariable that indicates the context should use mobile UI …\nImage is requested from <code>IMAGES</code>.\nArguments for <code>IME_EVENT</code>.\nActivate informational focus request.\nPrefer the integrated GPU (provided by the CPU), probably …\nWindows can layout in parallel.\nDefault value, matches with the largest size, greatest …\nEnable maximize.\nMaximize/restore button.\nEnable minimize.\nMinimize button.\nMonitors service.\nMonitors added, removed or modified event.\nWindow fills the screen, but not the parts reserved by the …\nWindow is only visible as an icon in the taskbar.\nUnique identifier of a monitor screen.\nAll information about a monitor that <code>MONITORS</code> can provide.\nA selector that returns a <code>MonitorInfo</code>.\n<code>MONITORS_CHANGED_EVENT</code> args.\nThe next rendered frame will be captured and available in …\nThe next rendered frame will be captured and available in …\nWindow is visible, but does not fill the screen.\nDefines what window operations can run in parallel, …\nThe parent window monitor, or <code>Primary</code> if the window has no …\nThe primary monitor, if there is any monitor.\nCustom query closure.\nWindows with pending render or render update generate …\nRender backend preference.\nUse a software render fallback, this has the best …\nFrames are not automatically captured, but you can use …\nWindow startup position.\nWindows can init, deinit, update and rebuild info in …\nExclusive video mode info.\nCurrent context window.\nWindows service.\nWindow moved, resized or other state changed.\nWindow closed event.\nWindow close requested event.\nExtensions methods for <code>WINDOW</code> contexts of windows open by …\nWindow finished loading and has opened in the view-process.\nNew window has inited.\nIME extension methods for <code>WidgetInfoBuilder</code>.\nIME extension methods for <code>WidgetInfo</code>.\nW  A window container.\nW  A window container.\nWindow chrome buttons.\n<code>WINDOW_CHANGED_EVENT</code> args.\n<code>WINDOW_CLOSE_EVENT</code> args.\n<code>WINDOW_CLOSE_REQUESTED_EVENT</code> args.\nWindow icon.\nUnique identifier of an open window.\nRepresents a handle that stops the window from loading …\nMode of an open window.\n<code>WINDOW_OPEN_EVENT</code> args.\nWindow root node and values.\nArguments for <code>WINDOWS.register_root_extender</code>.\nWindow state.\nMask of allowed <code>WindowState</code> states of a window.\nVariables that configure the opening or open window.\nOverride the preferred accent color.\nP Binds the <code>accent_color</code> window var with the property …\nIf an accessibility service has requested info from this …\nActual accent color to use.\nActual color scheme to use.\nWindow custom cursor image.\nWindow icon image.\nCurrent monitor hosting the window.\nWindow actual position on the monitor.\nWindow actual size on the screen.\nWindow <code>actual_size</code>, converted to pixels given the …\nAdded monitors.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nc  If semi-transparent content is see-through, mixing with …\nDefines if the window should always stay on top of other …\nP Binds the <code>always_on_top</code> window var with the property …\nDefines if and how the window size is controlled by the …\nP Binds the <code>auto_size</code> window var with the property value.\nThe point in the window content that does not move when …\nP Binds the <code>auto_size_origin</code> window var with the property …\nIterate over all available monitors.\nThe bit depth of this video mode. This is generally 24 …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCause the headless window to think focus moved away from …\nMove the window to the front of the operating system Z …\nMove the window to the front of the operating system Z …\nIf the app or operating system caused the change.\nWindow children.\nDefines if the window chrome is visible.\nP Binds the <code>chrome</code> window var with the property value.\nP  Window clear color.\nStarts closing a window, the operation can be canceled by …\nStarts closing the window, the operation can be canceled …\nStarts closing all open windows together, the operation …\nStarts closing multiple windows together, the operation …\nSends a close request.\nWindow commands.\nOverride the preferred color scheme.\nP Binds the <code>color_scheme</code> window var with the property …\nIf the text must be actually inserted.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nP  Block window load until <code>CONFIG.status</code> is idle.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns <code>true</code> if the <code>id</code> is set or flagged in the window.\nWindow cursor icon and visibility.\nHandle expiration deadline.\nReturns the block deadline if it is enabled and the …\nCalls <code>named</code> in a debug build and <code>new_unique</code> in a release …\n<code>WindowIcon::Default</code>\nNew <code>(11608, 8708)</code> at <code>None</code> scale.\nIs all by default.\n<code>RenderMode::Integrated</code>.\nDefault handler registered in mobile platforms.\nDefines the render mode of windows opened by this service.\nTarget.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGets the monitor area in device independent pixels.\nOpen a new headless window and update the app until the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnable accessibility info.\nEnabled value.\nDefines the enabled state of the window chrome buttons.\nP Binds the <code>enabled_buttons</code> window var with the property …\nReturns <code>true</code> if <code>new_state</code> is one of the fullscreen states …\nReturns <code>true</code> if <code>new_state</code> is <code>state</code> and <code>prev_state</code> is not.\nReturns <code>true</code> only if both are <code>MonitorQuery::Primary</code>.\nDefines if app process exit should be requested when the …\nReturns <code>true</code> if <code>prev_state</code> is one of the fullscreen states …\nReturns <code>true</code> if <code>prev_state</code> is <code>state</code> and <code>new_state</code> is not.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nBogus metadata for the <code>MonitorId::fallback</code>.\nID of a fake monitor for cases where no monitor is …\nReturns fallbacks that view-process implementers will try …\nSets the window state <code>id</code> without value.\nRequest operating system focus for the window.\nDefines the active user attention required indicator.\nFocus a window if it is open or opening, otherwise opens …\nCause the headless window to think it is focused in the …\nReturns a shared reference to the focused window’s info.\nGets the id of the window that is focused in the operating …\nRoot font size.\nP Binds the <code>font_size</code> window var with the property value.\nP  Requests mobile UI themes in desktop builds.\nDefines if and how the frame pixels are captured for the …\nP Binds the <code>frame_capture_mode</code> window var with the …\nFrame that finished rendering.\nGenerate an image from the current rendered frame of the …\nGenerate an image from the current rendered frame of the …\nThe frame pixels if it was requested when the frame …\nGenerate an image from a rectangular selection of the …\nGenerate an image from a selection of the current rendered …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>AutoSize::CONTENT</code> if <code>content</code> is <code>true</code>, otherwise\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSame as conversion from <code>&amp;str</code>.\nFrom encoded data of known format.\nFrom encoded data of <code>Unknown</code> format.\nFrom encoded data of <code>Unknown</code> format.\nSame as conversion from <code>&amp;str</code>.\nReturns the argument unchanged.\nFrom encoded data of known format.\nSee <code>ImageSource</code> conversion from <code>&amp;str</code>\nFrom encoded data of <code>Unknown</code> format.\nFrom encoded data of <code>Unknown</code> format.\nFrom encoded data of known format.\nFrom encoded data of known format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>true</code> to <code>BlockWindowLoad::enabled(1.secs())</code> and …\nReturns the argument unchanged.\nConverts to enabled with the duration timeout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>WindowId::named</code>.\nCalls <code>WindowId::named</code>.\nCalls <code>WindowId::named</code>.\nCalls <code>WindowId::named</code>.\nReturns the argument unchanged.\nCalls <code>WindowId::named</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates an ID from a raw value.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nCreates an ID from a <code>sequential</code> number.\nRetrieve the underlying value.\nRetrieve the underlying value.\nGet the window state <code>id</code>, if it is set.\nWindow actual position on the virtual screen that …\nIf it is the <code>Headed</code> or <code>HeadlessWithRenderer</code> modes.\nGets only headed windows that will close.\nGets only headless windows that will close.\nc  Imaginary monitor used by the window when it runs in …\nP Binds the <code>height</code> of the <code>size</code> window var with the …\nWindow icon.\nP Binds the <code>icon</code> window var with the property value.\nUnique ID.\nGets the window ID.\nIME exclusion area in the window space.\nGets the window info tree.\nCalls <code>init</code> and sets <code>id</code> if the <code>id</code> is not already set in the …\nSets the <code>id</code> to the default value if it is not already set.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDebug inspection helpers.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if it is disabled.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if it is enabled.\nGets if the window is focused in the operating system.\nReturns <code>true</code> if <code>self</code> matches <code>Fullscreen</code> or <code>Exclusive</code>.\nIf it is the <code>Headed</code> mode.\nIf it is the <code>Headless</code> or <code>HeadlessWithRenderer</code> modes.\nReturns <code>true</code> if called inside a window.\nReturns <code>true</code> if the window is open and has no pending …\nReturns <code>true</code> if the window is open and loaded.\nIf the window has finished loading.\nReturns <code>true</code> if the window is not open or has pending …\nP  Gets the <code>IS_MOBILE_VAR</code> that indicates the window or …\nP  Gets the <code>IS_MOBILE_VAR</code> that indicates the window or …\nP  Gets the <code>IS_MOBILE_VAR</code> that indicates the window or …\nReturns <code>true</code> if this event represents a window move.\nReturns <code>true</code> if the window is open.\nReturns <code>true</code> if the window is open.\nIf the window is open.\nReturns <code>true</code> if the <code>window_id</code> is associated with a pending …\nIf this monitor is the primary screen.\nReturns <code>true</code> if this event represents a window resize.\nReturns <code>true</code> if this event represents a window state …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nc  Lock-in kiosk mode.\nGets a handle that stops the window from loading while the …\nGets a handle that stops the window from loading while the …\nP Binds the <code>height</code> of the <code>max_size</code> window var with the …\nMaximal window width and height constraint on the <code>size</code>.\nP Binds the <code>max_size</code> window var with the property value.\nP Binds the <code>width</code> of the <code>max_size</code> window var with the …\nP Binds the <code>height</code> of the <code>min_size</code> window var with the …\nMinimal window width and height constraint on the <code>size</code>.\nP Binds the <code>min_size</code> window var with the property value.\nP Binds the <code>width</code> of the <code>min_size</code> window var with the …\nDefines the <code>parent</code> connection.\nP Binds the <code>modal</code> window var with the property value.\nGet the window mode.\nGets the window mode.\nModified monitors.\nGet monitor info.\nWindow monitor.\nP Binds the <code>monitor</code> window var with the property value.\nDefines if the user can move the window using the window …\nP Binds the <code>movable</code> window var with the property value.\nName of the monitor.\nReturns the name associated with the ID or <code>&quot;&quot;</code>.\nGet or generate an ID with associated name.\nGenerate a new ID with associated name.\nShow a native file dialog for the window.\nShow a native message dialog for the window.\nGets the parent actual window and widget that hosts …\nGets the widget in <code>parent</code> that hosts the window, if it is …\nNew window from a <code>root</code> node that forms the window root …\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew with custom size at <code>None</code> scale.\nNew query.\nNew args from values that convert into the argument types.\nNew window from a <code>child</code> node that becomes the child of the …\nNew with default size <code>(11608, 8708)</code> and custom scale.\nNew with custom size and scale.\nReturns the new window state if it has changed.\nNew test window.\nGenerates a new unique ID.\nGenerates a new unique ID.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nP  On window close.\nP  On window close requested.\nP  On window is no longer fullscreen.\nP  On window frame rendered.\nP  On window frame rendered.\nP  On window frame rendered.\nP  On window enter one of the fullscreen states.\nP  On Input Method Editor event.\nP  On Input Method Editor event.\nP  Event just after the window loads.\nP  On window maximized.\nP  On window minimized.\nP  On window position changed.\nP  Event just after the window opens.\nP Preview <code>on_frame_image_ready</code> event.\nP Preview <code>on_frame_image_ready</code> event.\nP Preview <code>on_ime</code> event.\nP Preview <code>on_ime</code> event.\nP Preview <code>on_window_changed</code> event.\nP Preview <code>on_window_changed</code> event.\nP Preview <code>on_window_close_requested</code> event.\nP Preview <code>on_window_close_requested</code> event.\nP Preview <code>on_window_exited_fullscreen</code> event.\nP Preview <code>on_window_exited_fullscreen</code> event.\nP Preview <code>on_window_fullscreen</code> event.\nP Preview <code>on_window_fullscreen</code> event.\nP Preview <code>on_window_load</code> event.\nP Preview <code>on_window_load</code> event.\nP Preview <code>on_window_maximized</code> event.\nP Preview <code>on_window_maximized</code> event.\nP Preview <code>on_window_minimized</code> event.\nP Preview <code>on_window_minimized</code> event.\nP Preview <code>on_window_moved</code> event.\nP Preview <code>on_window_moved</code> event.\nP Preview <code>on_window_open</code> event.\nP Preview <code>on_window_open</code> event.\nP Preview <code>on_window_resized</code> event.\nP Preview <code>on_window_resized</code> event.\nP Preview <code>on_window_restored</code> event.\nP Preview <code>on_window_restored</code> event.\nP Preview <code>on_window_state_changed</code> event.\nP Preview <code>on_window_state_changed</code> event.\nP Preview <code>on_window_unmaximized</code> event.\nP Preview <code>on_window_unmaximized</code> event.\nP Preview <code>on_window_unminimized</code> event.\nP Preview <code>on_window_unminimized</code> event.\nP  On window size changed.\nP  On window state changed to <code>Normal</code>.\nP  On window state changed.\nP  On window exited the maximized state.\nP  On window exited the minimized state.\nP  On window moved, resized or other state changed.\nP  On window moved, resized or other state changed.\nP  On window close requested.\nP  On window close requested.\nP  On window state changed from <code>WindowState::is_fullscreen</code>.\nP  On window state changed from <code>WindowState::is_fullscreen</code>.\nP  On window state changed to <code>WindowState::is_fullscreen</code>.\nP  On window state changed to <code>WindowState::is_fullscreen</code>.\nP  On window loaded.\nP  On window loaded.\nP  On window state changed to <code>WindowState::Maximized</code>.\nP  On window state changed to <code>WindowState::Maximized</code>.\nP  On window state changed to <code>WindowState::Minimized</code>.\nP  On window state changed to <code>WindowState::Minimized</code>.\nP  On window position changed.\nP  On window position changed.\nP  On window opened.\nP  On window opened.\nP  On window size changed.\nP  On window size changed.\nP  On window state changed to <code>WindowState::Normal</code>.\nP  On window state changed to <code>WindowState::Normal</code>.\nP  On window state changed.\nP  On window state changed.\nP  On window state changed from <code>WindowState::Maximized</code>.\nP  On window state changed from <code>WindowState::Maximized</code>.\nP  On window state changed from <code>WindowState::Minimized</code>.\nP  On window state changed from <code>WindowState::Minimized</code>.\nRequests a new window.\nRequests a new headless window.\nRequests a new headless window with pre-defined ID.\nRequests a new window with pre-defined ID.\nOpen a new headless window and returns the new window ID.\nDefines what window operations can run in parallel, …\nDefines the parent window.\nP Binds the <code>parent</code> window var with the property value.\nTop-left offset of the monitor region in the virtual …\nWindow top-left offset on the <code>monitor</code> when the window is …\nP Binds the <code>position</code> window var with the property value.\nNew window position if it was moved.\nPixel-per-inch config var.\nPixel-per-inches used for the headless layout and …\nReturns the previous window state if it has changed.\nCaret/selection within the <code>txt</code> when it is preview.\nGets the monitor info marked as primary.\nGets the monitor area in pixels.\nThe refresh rate of this video mode, in millihertz.\nRegister the closure <code>handler</code> to be called for every new …\nRegister the closure <code>extender</code> to be called with the root …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoved monitors.\nNew window icon from a closure that generates a new icon …\nWindow actual render mode.\nc  Render performance mode overwrite for this window, if …\nRequire the window state <code>id</code>.\nDefines if the user can resize the window using the window …\nP Binds the <code>resizable</code> window var with the property value.\nWindow restore position and size when restoring to <code>Normal</code>.\nWindow restore state.\nThe window root content, extender must wrap this node with …\nRuns the application event loop and requests a new window.\nOpen a new headless window and update the app until the …\nPadding that must be applied to the window content so that …\nP  Save and restore the window state.\nThe monitor scale factor.\nCurrent scale factor of the current monitor hosting the …\nThe scale factor used for the headless layout and …\nRuns the query.\nRuns the query. Falls back to <code>Primary</code> or …\nUn-scramble the underlying value to get the original …\nUn-scramble the underlying value to get the original …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet a custom <code>ime_area</code>.\nAssociate a <code>name</code> with the ID, if it is not named.\nSet the window state <code>id</code> to <code>value</code>.\nSet test window <code>size</code>.\nWidth/height of the monitor region in the virtual screen, …\nWindow width and height on the screen when the window is …\nP Binds the <code>size</code> window var with the property value.\nNew window size if it was resized.\nSize of the imaginary monitor screen that contains the …\nResolution of this video mode.\nc  If the window is steals keyboard focus on open.\nc  Defines how the window is positioned when it first …\nWindow screen state.\nP Binds the <code>state</code> window var with the property value.\nWindow state change, if it has changed the values are …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAttempt to set a system wide shutdown warning associated …\nThe enabled text input widget.\nDefines if the window is visible in the task-bar.\nP Binds the <code>taskbar_visible</code> window var with the property …\nCall inside <code>with_test_context</code> to deinit the <code>content</code> as a …\nCall inside <code>with_test_context</code> to delivery an event to the …\nCall inside <code>with_test_context</code> to rebuild info the <code>content</code> …\nCall inside <code>with_test_context</code> to init the <code>content</code> as a …\nCall inside <code>with_test_context</code> to layout the <code>content</code> as a …\nCall inside <code>with_test_context</code> to layout the <code>content</code> as a …\nCall inside <code>with_test_context</code> to render the <code>content</code> as a …\nCall inside <code>with_test_context</code> to render_update the <code>content</code> …\nCall inside <code>with_test_context</code> to update the <code>content</code> as a …\nGet the test window size.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nWindow title text.\nP Binds the <code>title</code> window var with the property value.")