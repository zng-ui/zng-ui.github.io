searchState.loadedDescShard("zng", 4, "Unique ID of the touch, among other active touches.\nIdentify the touch contact or <em>finger</em>.\nIdentify the touch contact or <em>finger</em>.\nIdentify the touch contact or <em>finger</em>.\nIdentify the touch contact or <em>finger</em>.\nIdentify the touch contact or <em>finger</em>.\nIdentify a continuous touch contact or <em>finger</em>.\nVariable that defines the touch config for the app.\nTest mode, generates touch events for a single touch …\nHandle across the lifetime of <code>touch</code>.\nPropagation handle for the <code>touch</code> lifetime.\nHandle across the lifetime of <code>touch</code>.\nP  Applies transforms from touch gestures on the widget.\nP  Applies transforms from touch gestures on the widget.\nAll touch contacts that moved since last event.\nThe two touch contact points.\nComputes the transform from <code>first_info</code> to <code>latest_info</code>.\nComputes the transform from <code>self</code> to <code>other</code>.\nComputes the translation to transform from <code>first_info</code> to …\nComputes the translation to transform from <code>self</code> to <code>other</code>.\nCompute the final offset and duration for a <em>fling</em> …\nCompute the final offset and duration for a <em>fling</em> …\nAverage velocity.\nComputes the translation-x to transform from <code>first_info</code> to …\nComputes the translation-x to transform from <code>self</code> to <code>other</code>.\nComputes the translation-y to transform from <code>first_info</code> to …\nComputes the translation-y to transform from <code>self</code> to <code>other</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nLatest move timestamp.\nVelocity in device independent pixels per second.\nVelocity in device independent pixels per second.\nVelocity of the <code>latest_info</code> touch points.\nReturns <code>true</code> if the widget was disabled in <code>prev_target</code>.\nReturns <code>true</code> if the widget was enabled in <code>prev_target</code>.\nReturns <code>true</code> if the <code>WIDGET</code> is in <code>prev_target</code> and is …\nTouched window.\nId of window that received all touches in this event.\nId of window that received the event.\nId of window that received the event.\nId of window that received the event.\nId of window that received the event.\nId of window that received the touch events.\nThe altitude (in radians) of the stylus.\nThe force of the touch, where a value of 1.0 represents …\nThe maximum possible force for a touch.\nRepresents the <strong>clear history</strong> action.\nUndo extension methods for commands.\nCollect display info.\nInitialize data in the execution context.\nTry merge the <code>next_data</code> onto self data (at the undone …\nNormal undo/redo.\nRepresents the <strong>redo</strong> action.\nRedo the action.\nRepresents a single redo action.\nSelection collector.\nUndo-redo service.\nRepresents the <strong>undo</strong> action.\nUndo the action.\nRepresents a single undo action.\nArguments for <code>UndoAction::merge</code>.\nRepresents a full undo/redo action.\nMetadata info about an action registered for undo action.\nm  Undo scope widget mixin.\nRepresents an undo/redo action.\nSelects actions to undo or redo.\nRepresents a type that can select actions for undo or redo …\nSnapshot of the undo or redo stacks in an <code>UNDO</code> scope.\nRepresents captured undo actions in an <code>UNDO.transaction</code> …\nIdentifies var modify requests by undo/redo action.\nUndo extension methods for widget info.\nRepresents a widget undo scope.\nAccess <code>dyn Any</code> methods.\nIf the redo stack is not empty.\nGets if the redo stack is not empty.\nIf the undo stack is not empty.\nGets if the undo stack is not empty.\nClear all undo and redo actions.\nClear all redo actions.\nGets the command that represents the OP.\nPush all undo actions captured by the transaction into the …\nPush a single action in the current undo scope that …\nDeinit the scope in the <code>WIDGET</code>.\nShort display description of the action that will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRun <code>actions</code> as a <code>transaction</code> and commits as a group if any …\nUndo history widget.\nCalled for each undo or redo action from the last item in …\nGets display info about the action that registered this …\nGets display info about the action that will be redone.\nSets the <code>WIDGET</code> info.\nInit the scope in the <code>WIDGET</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto <code>Arc&lt;dyn UndoInfo&gt;</code> without double wrapping.\nIf the transaction did not capture any undo action.\nGets if the undo service is enabled in the current context.\nif the scope is already inited in a widget.\nReturns <code>true</code> if the widget is an undo scope.\nIterate over the <code>stack</code>, grouped by <code>undo_interval</code>.\nTry merge the <code>next</code> action with the previous <code>self</code>.\nAny extra metadata associated with the item. This can be a …\nNew, not inited in a widget.\nThe action that was registered after the one receiving …\nTimestamp of the previous action registered.\nRedo action and returns a <code>UndoAction</code> that undoes it.\nRedo all actions within the <code>undo_interval</code>.\nRedo a selection of actions.\nLatest undo stack for the given scope, same as calling …\nClones the timestamp and info of all entries in the …\nRegister an already executed action for undo in the …\nRegister an already executed action for undo in the …\nRegister an already executed action for undo in the …\nRun the <code>action</code> and register the undo in the current scope.\nRun the <code>op</code> once with <code>UndoFullOp::Init { .. }</code> and …\nRun the <code>op</code> once with <code>UndoOp::Redo</code> and register it for undo …\nGets the parent ID that defines an undo scope, or <code>None</code> if …\nStart selecting action for the <code>op</code>.\nSets if the undo/redo is enabled in this scope.\nClones the timestamp and info of all entries in the …\nRun <code>actions</code> in a new undo scope, capturing all undo …\nRun <code>actions</code> as a <code>transaction</code> and commits if the result is …\nRun <code>actions</code> as a <code>transaction</code> and commits as a group if the …\nUndo action and returns a <code>RedoAction</code> that redoes it.\nUndo all actions within the <code>undo_interval</code>.\nCancel the transaction, undoes all captured actions.\nP  Enable or disable undo inside the widget.\nP  Enable or disable undo inside the widget.\nP  If the widget can register undo actions.\nP  Sets the time interval that undo and redo cover each …\nP  Sets the time interval that undo and redo cover each …\nGets or sets the time interval that <code>undo</code> and <code>redo</code> cover …\nP  Sets the time interval that undo and redo cover each …\nGrouping interval.\nP  Sets the maximum length for undo/redo stacks in the …\nP  Sets the maximum length for undo/redo stacks in the …\nGets or sets the maximum length of each undo stack of each …\nP  Sets the maximum number of undo/redo actions that are …\nP  Sets if the widget is an undo scope.\nP  Sets if the widget is an undo scope.\nGets the first ancestor that is an undo scope.\nGets the command scoped in the undo scope widget that is …\nUndo a selection of actions.\nLatest undo stack for the given scope, same as calling …\nClones the timestamp and info of all entries in the …\nTrack changes on <code>var</code>, registering undo actions for it.\nRuns <code>f</code> in a disabled scope, all undo actions registered …\nRuns <code>f</code> in a new <code>scope</code>. All undo actions inside <code>f</code> are …\nIf the <code>prev_timestamp</code> is within the <code>UNDO.undo_interval</code>. …\nSet this to respond.\nSet this to <code>true</code> if the next action can be dropped because …\nClosure data for the next undo action.\nTimestamp of the previous action registered.\nIf the op must actually be executed.\nIf the <code>prev_timestamp</code> is within the <code>UNDO.undo_interval</code>. …\nRepresents an action in the undo or redo stack.\nW  Undo/redo stack view.\nW  Undo/redo stack view.\nArgs to present the child of <code>UndoHistory!</code>.\nW  Menu style button for an entry in a undo/redo stack.\nW  Menu style button for an entry in a undo/redo stack.\nRepresents an undo or redo stack.\nThe undo or redo command in the correct scope.\nThe undo or redo command, scoped.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nP  If undo entries are grouped by the <code>UNDO.undo_interval</code>.\nP  If undo entries are grouped by the <code>UNDO.undo_interval</code>.\nP  If undo entries are grouped by the <code>UNDO.undo_interval</code>.\nInfo about the action.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  State is true when the widget is an <code>undo_entry</code> and it …\nP  State is true when the widget is an <code>undo_entry</code> and it …\nNew args.\nNew args.\nNew args.\nc  Identifies what stack history is shown by the widget.\nWhat stack this entry is at.\nWhat stack this is.\nWhat stack history must be shown.\nStack, latest at the end.\nMoment the undo action was first registered.\nP  Extend or replace the undo/redo entry button style in a …\nP  Extend or replace the undo/redo entry button style in a …\nP  Widget function that converts <code>UndoEntryArgs</code> to widgets.\nP  Widget function that converts <code>UndoPanelArgs</code> to widgets.\nP  Widget function that converts <code>UndoStackArgs</code> to widgets.\nStart building a new instance.\nStart building a new instance.\nGets the widget type info.\nGets the widget type info.\nUpdates that must be reacted by an app owner.\nRepresents a single event update.\nRebuilds info for the target.\nWidget info updates of the current cycle.\nLayouts the target.\nWidget layout updates of the current cycle.\nRepresents an <code>on_pre_update</code> or <code>on_update</code> handler.\nRender the target.\nUpdate frame bindings of the target.\nWidget render updates of the current cycle.\nUpdate schedule service.\nUpdates the target.\nArguments for an <code>on_pre_update</code>, <code>on_update</code> or <code>run</code> handler.\nRepresents all the widgets and windows marked to receive …\nIdentify node and app-extension operations that can be …\nRepresents a set of widgets that subscribe to an event …\nExtension methods for infinite loop diagnostics.\nWeak <code>OnUpdateHandle</code>.\nWidget updates of the current cycle.\nThe update args.\nReturns <code>true</code> if the widget is one of the subscribers.\nNumber of times the handler was called.\nCreate an event update for the same event and args, but …\nThe update delivery list.\nRequest delivery list.\nUpdates delivery list.\nRequest delivery list.\nRequest delivery list.\nMutable reference to the update delivery list.\nRequest delivery list.\nUpdates delivery list.\nRequest delivery list.\nRequest delivery list.\nCreate a weak handle.\nCreate a handle to nothing, the handle always in the …\nReturns <code>true</code> if the widget is on the list.\nReturns <code>true</code> if the window is on the list.\nThe event.\nEvents to notify.\nCopy all delivery from <code>other</code> onto <code>self</code>.\nCopy all delivery from <code>other</code> onto <code>self</code>.\nCopy all delivery from <code>other</code> onto <code>self</code>.\nCopy all delivery from <code>other</code> onto <code>self</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSearch all pending widgets in all <code>windows</code>, all search …\nIf the list has pending widgets that must be found before …\nIf has events, update, layout or render was requested.\nInfo rebuild requested.\nInfo rebuild targets.\nInsert the <code>wgt</code> and ancestors up-to the inner most that is …\nInsert the window by itself, the window root widget will …\nDefines a custom span.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> is render or render update is requested for …\nIf another handle has called <code>perm</code>.\nIf another handle has called <code>unsubscribe</code>.\nSchedules a layout update that affects the <code>target</code>.\nLayout requested.\nLayout targets.\nSchedules a layout update for the window only.\nNew list that only allows <code>subscribers</code>.\nNew with list.\nNew with list.\nNew with list.\nNew with list.\nNew weak handle that does not upgrade.\nNew list that allows all entries.\nNew list that does not allow any entry.\nCreate a preview update handler.\nCreate an update handler.\nDrops the handle but does <strong>not</strong> unsubscribe.\nSchedules a full render that affects the <code>target</code>.\nRender requested.\nSchedules a render update that affects the <code>target</code>.\nRender update targets.\nSchedules a render update for the window only.\nFull render targets.\nSchedules a new frame for the window only.\nSchedule the <code>future</code> to run in the app context, each future …\nSchedule an <em>once</em> handler to run when these updates are …\nRegister all subscribers for search and delivery.\nIf search for window a root is pending.\nRegister the widget of unknown location for search before …\nWidgets still pending search or not found.\nCreate an <code>AppEventSender</code> that can be used to awake the app …\nGets all subscribers as a set.\nDrops the handle and forces the handler to drop.\nSchedules an update that affects the <code>target</code>.\nUpdate requested.\nSchedules an info rebuild that affects the <code>target</code>.\nSchedules an info rebuild for the window only.\nSchedules an <code>UpdateOp</code> that optionally affects the <code>target</code> …\nSchedules an <code>UpdateOp</code> for the window only.\nUpdate targets.\nSchedules an update for the window only.\nGets the strong handle if it is still subscribed.\nCreate an std task waker that wakes the event loop and …\nFound widgets in the delivery list, can be targets or …\nWindows in the delivery list.\nCalls <code>handle</code> if the event targets the <code>WIDGET</code> and …\nCalls <code>handle</code> if update was requested for the <code>WIDGET</code>.\nCalls <code>handle</code> if the event targets the <code>WINDOW</code>.\nCalls <code>handle</code> if info rebuild was requested for the window.\nCalls <code>handle</code> if update was requested for the <code>WINDOW</code>.\nCalls <code>handle</code> if layout rebuild was requested for the …\nCalls <code>handle</code> if render frame rebuild or update was …\nVariable of any type.\nExtension method to subscribe any widget to a variable.\nRepresents any variable value.\nType erased <code>when_var!</code> manual builder.\nArc value that implements equality by pointer comparison.\nSmall box for <code>AnyVarValue</code> values.\nVar represents different inner variables depending on the …\nVariable capabilities can change to sometimes have the …\nAll elements removed/replaced.\nIdentifies the unique context a <code>contextual_var</code> is in.\nRepresents a named contextual variable.\nResponder has set the response.\nElements inserted.\nA property value that is not a variable but can be …\nA value-to-var conversion that consumes the value.\nVariable can be modified.\nVariable capabilities can change to sometimes have the …\nBuild a <code>merge_var!</code> from any number of input vars of the …\nElement removed an reinserted.\nVariable value can change.\nID for variables that are not <code>SHARE</code>.\nRepresents a <code>Vec&lt;T&gt;</code> that tracks changes when used inside a …\nArguments for a var event handler.\nElements removed.\nRepresents a read-write variable used to notify the …\nRaw value in a <code>ResponseVar</code>.\nRepresents a read-only variable used to listen to a one …\nVar is an <em>arc</em> reference to the value and variable state, …\nVariable updates and animation service.\nVariable of type <code>T</code>.\nKinds of interactions allowed by a <code>Var&lt;T&gt;</code> in the current …\nRepresents a <code>Var&lt;T&gt;</code> as a value inside another variable.\nHandle to a variable or animation hook.\nRepresents a collection of var handles.\nArguments for <code>Var::hook</code>.\nUnique identifier of a share variable, while it is alive.\nExtension methods to layout var values.\nMutable reference to a variable value.\nExtension methods to subscribe any widget to a variable or …\nRepresents the last time a variable was mutated or the …\nRepresents a type that can be a <code>Var&lt;T&gt;</code> value.\nRepresents a change in a <code>ObservableVec</code>.\nResponder has not set the response yet.\nWeak reference to a <code>AnyVar</code>.\nWeak reference to a <code>Var&lt;T&gt;</code>.\nGet a flags value with all known bits set.\nSchedule an animation that targets this variable.\nSchedule a custom animation that targets this variable.\nAdds an <code>animation</code> closure that is called every frame to …\nVar animation types and functions.\nVariable that defines a global scale for the elapsed time …\nRead-write that defines if animations are enabled on the …\nNew read/write shared reference type-erased variable that …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReference the variable without the strong value type.\nReference the weak variable without the strong value type.\nType erased reference.\nReference the actual context var.\nBind <code>other</code> to receive the new values from this variable.\nBind <code>other</code> to receive the new values from this variable.\nBind <code>other</code> to receive the new values from this variable …\nBind <code>other</code> to receive the new values from this variable …\nBind strongly typed <code>other</code> to receive the new values …\nBind <code>other</code> to receive the new values filtered mapped from …\nBind <code>other</code> to receive the new values filtered mapped from …\nBind <code>other</code> to receive the new filtered mapped values from …\nBind <code>other</code> to receive the new filtered mapped values from …\nBind strongly typed <code>other</code> to receive the new values mapped …\nBind <code>other</code> to receive the new values mapped from this …\nBind <code>other</code> to receive the new values mapped from this …\nBind <code>other</code> to receive the new mapped values from this …\nBind <code>other</code> to receive the new mapped values from this …\nBind <code>other</code> to be modified when this variable updates.\nBind <code>other</code> to be modified when this variable updates.\nBind <code>other</code> to be modified when this variable updates.\nBind <code>other</code> to be modified when this variable updates and …\nBind <code>other</code> to be modified when this variable updates and …\nBind <code>other</code> to be modified when this variable updates and …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuild the merge var.\nBuild the when var.\nHas the <code>MODIFY</code> capability.\nFlags that indicate what operations the variable is …\nCreate a <code>VarHandles</code> collection with <code>self</code> and <code>other</code>.\nChanges applied in the last var update.\nStarts an easing animation that <em>chases</em> a target value that …\nDrop all handles.\nRemoves all elements.\nClone the value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the number of conditions set.\nNew immutable variable that stores the <code>value</code> directly.\nWhether all set bits in a source flags value are also set …\n Declares new <code>ContextVar&lt;T&gt;</code> static items.\nCreate a contextualized variable.\nCreate a var that redirects to this variable until the …\nCreate a var that redirects to this variable until the …\nGets the current context handle.\nGets the underlying var in the current calling context.\nGets the underlying var in the current calling context.\nInfo about the current context when requesting variable …\nAlternate formatter that writes detailed debug info about …\nThe intersection of a source flags value with the …\nGets the response if done.\nDowncast to value.\nReturns the strongly typed variable, if its of of value …\nReturns some mutable reference to the inner value if it is …\nReturns <code>downcast</code> or <code>fallback_var</code>.\nReturns some reference to the inner value if it is of type …\nReference all custom tag values of type <code>T</code>.\nCreate a weak reference to this variable.\nCreate a weak reference to this variable.\nCreate a weak handle that can be used to monitor this …\nRemoves the specified range from the vector in bulk, …\nHandle to no variable.\nEmpty collection.\nSchedule an easing transition from the current value to …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nOscillate between the current value and <code>new_value</code> with an …\nOscillate between the current value and <code>new_value</code> with an …\nSchedule an easing transition from the current value to …\nCreate a vars that <code>ease</code> to each new value of <code>self</code>.\nCreate a vars that <code>ease_with</code> to each new value of <code>self</code>.\nGet a flags value with all bits unset.\nGets if <code>self</code> and <code>other</code> are equal.\n New variable from an expression with interpolated vars.\nExtend the conditions with clones of <code>other</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nClones and appends all elements in a slice to the Vec.\nCopies elements from <code>src</code> range to the end of the vector.\nCreate a strongly typed mapping variable that can skip …\nCreate a mapping variable that can skip updates.\nCreate a mapping variable that can skip updates.\nCreate a bidirectional mapping variable that can skip …\nCreate a bidirectional mapping variable that can skip …\nCreate a <code>filter_map</code> that tries to convert from <code>T</code> to <code>O</code> …\nCreate a <code>filter_map</code> that tries to convert from <code>T</code> to <code>O</code> …\nCreate a <code>filter_map_bidi</code> that tries to convert between <code>T</code> …\nCreate a strongly typed flat mapping variable.\nCreate a flat mapping variable that <em>unwraps</em> an inner …\nCreate a mapping variable from any to any that <em>unwraps</em> an …\nCreate a <code>flat_map</code> to the inner variable.\nVariable that defines the global frame duration, the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a clone of the current value.\nGet a clone of the current value.\nDebug format the current value.\nGet a clone of the current value into <code>value</code>.\nMutate the <code>index</code>.\nGets a clone of the current value if it <code>is_new</code>.\nGets a clone of the current value if it <code>is_new</code>.\nGets a clone of the current value into <code>value</code> if it <code>is_new</code>.\nHold arbitrary <code>thing</code> for the lifetime of this variable or …\nSetups a callback for just after the variable value update …\nSetups a callback for just after the variable value update …\nRegister a <code>handler</code> to be called when the current animation …\nImplements <code>T: IntoVar&lt;U&gt;</code>, <code>T: IntoValue&lt;U&gt;</code> and optionally …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert the <code>element</code> at the <code>index</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to typed builder.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nWhether all known bits in this flags value are set.\nHas the <code>CONTEXT</code> capability and does not have …\nIf does not have <code>MODIFY</code> capability and is not …\nIf the variable current value was set by an active …\nIf cannot <code>NEW</code> and is not <code>MODIFY_CHANGES</code>.\nHas the <code>CONTEXT</code> capability.\nIf the response is received.\nHas response.\nReturns <code>true</code> if the handle is a <code>dummy</code>.\nReturns <code>true</code> if empty or all handles are dummy.\nWhether all bits in this flags value are unset.\nDoes not have the <code>SHARE</code> capability.\nGets if the value updated.\nHandle represents the state before first contextualization.\nIf does not have <code>MODIFY</code> capability.\nHas the <code>SHARE</code> capability.\nIf the response is not received yet.\nDoes not have response.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLast update ID a variable was modified.\nCompute the pixel value in the current <code>LAYOUT</code> context.\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCreate a strongly typed mapping variable.\nCreate a read-only mapping variable.\nCreate a mapping variable from any to any.\nCreate a bidirectional mapping variable.\nCreate a bidirectional mapping variable.\nCreate a bidirectional mapping variable that modifies back …\nCreate a bidirectional mapping variable that modifies the …\nCreate a mapping variable that contains the debug …\nCreate a <code>map</code> that references and clones <code>O</code> from <code>T</code> using …\nCreate a <code>map_bidi_modify</code> that references and clones <code>O</code> from …\nCreate a <code>map</code> that converts from <code>T</code> to <code>O</code> using <code>Into&lt;O&gt;</code>.\nCreate a <code>map_bidi</code> that converts between <code>T</code> and <code>O</code> using <code>Into</code>.\nMap to another response variable.\nMap the response value using <code>map</code>, if the variable is …\nCreate a <code>map</code> that converts from <code>T</code> to <code>Txt</code> using <code>ToTxt</code>.\n Initializes a new <code>Var&lt;T&gt;</code> with value made by merging …\n Initializes a new <code>Var&lt;T&gt;</code> with value made by merging …\nSchedule <code>modify</code> to be called on the value for the next …\nSchedule <code>modify</code> to be called on the value for the next …\nGets the minimum <em>importance</em> clearance that is needed to …\nID that is never new.\nBox <code>value</code>.\nConstructs a new <code>ArcEq&lt;T&gt;</code>.\nGenerates a new unique handle.\nNew empty.\nNew with value variable used when no other conditions are …\nNew empty vec.\nNew from value and custom modify tags.\nIdentifies the state before first contextualization.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAdd a <code>handler</code> that is called every time this variable …\nAdd a preview <code>handler</code> that is called every time this …\nHold the variable in memory until the app exit.\nDrop the handle without stopping the behavior it …\nDrop all handles without stopping their behavior.\nRemove the last element from the vec.\nPush an input.\nPush a conditional value.\nAdd the <code>other</code> handle to the collection, if it is not dummy.\nInsert the <code>element</code> at the end of the vec.\nAdd a custom tag object that will be shared with the var …\nGets a clone of the var that is always read-only.\nGets a clone of the var that is always read-only.\nMove the element <code>from</code> index <code>to</code> index.\nThe intersection of a source flags value with the …\nRemove the <code>index</code> element.\nReplace the default value if <code>other</code> has default and extend …\nReserves capacity for at least additional more elements.\nResizes the Vec in-place so that len is equal to <code>new_len</code>.\nSets the one time response.\nNew <code>ResponseVar</code> in the done state.\nNew paired <code>ResponderVar</code> and <code>ResponseVar</code> in the waiting …\nCreates a <code>ResponseVar</code> linked to this responder.\nRetains only the elements specified by the predicate, …\nClone the response value, if present.\nClone the response, if present and new.\nSchedule animations started by <code>animate</code>, the closure is …\nSchedule animations started by <code>animate</code>, the closure is …\nSchedule <code>new_value</code> to be assigned next update.\nSchedule <code>new_value</code> to be assigned next update.\nReplace the value if not equal.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nLike <code>bind</code> but also sets <code>other</code> to the current value.\nLike <code>bind</code> but also sets <code>other</code> to the current value.\nLike <code>bind_map_any</code> but also sets <code>other</code> to the current value.\nLike <code>bind_map</code> but also sets <code>other</code> to the current value.\nLike <code>bind_map_any</code> but also sets <code>other</code> to the current value.\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule a new <code>value</code> for the variable, it will be set in …\nSchedule a new <code>value</code> for the variable, it will be set in …\nLike <code>set_from</code>, but uses <code>map</code> to produce the new value from …\nLike <code>set_from</code>, but uses <code>map</code> to produce the new value from …\nSets a custom <code>AnyVar::modify_importance</code> value.\nOscillate between <code>from</code> and <code>to</code>, the variable is set to <code>from</code> …\nMutate the <code>range</code>.\nSet the variable to <code>new_value</code> after a <code>delay</code>.\nOscillate between the current value and <code>new_value</code>, every …\nSet the variable to a sequence of values as a time <code>duration</code>…\nCurrent count of strong references to this variable.\nCurrent count of strong references to the variable.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRegister the widget to receive an <code>UpdateOp</code> when this …\nRegister the widget to receive an <code>UpdateOp</code> when this …\nRemoves an element from the vector and returns it.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRead-only that tracks if animations are enabled in the …\nCustom tags that will be shared with the var hooks if the …\nCustom tag objects that where set when the value was …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDebug helper for tracing the lifetime of a value in this …\nDebug helper for tracing the lifetime of a value in this …\nShortens the vector, keeping the first <code>len</code> elements and …\nIf the <code>var</code> was built by <code>build</code> clones the internal …\nSchedule <code>modify</code> to be called on the value for the next …\nSchedule <code>modify</code> to be called on the value for the next …\nSchedule <code>new_value</code> to be assigned next update, if the …\nSchedule <code>new_value</code> to be assigned next update.\nSchedule a new <code>value</code> for the variable, it will be set in …\nSchedule a new <code>value</code> for the variable, it will be set in …\nLike <code>try_set_from</code>, but uses <code>map</code> to produce the new value …\nLike <code>try_set_from</code>, but uses <code>map</code> to produce the new value …\nSwap value with <code>other</code> if both are of the same type.\nSchedule an update notification, without actually changing …\nGets the <code>TypeId</code> of the boxed value.\nValue type name.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nShow variable value as new next update, without actually …\nNotify an update, even if the value does not actually …\nId of the current vars update in the app scope.\nAttempt to create a strong reference to the variable.\nAttempt to create a strong reference to the variable.\nReference the updated value.\nImmutable reference to the value.\nThe new value.\nGets if the value type is <code>T</code>.\nMutable reference to the value.\nGets the value type.\nGets the value type name.\nNew read/write shared reference variable.\nNew read/write shared reference variable with default …\nGets if this variable is the same as <code>other</code>.\nGets if this variable is the same as <code>other</code>.\nNew read/write shared reference variable from any type …\nVariable for getter properties (<code>get_*</code>, <code>actual_*</code>).\nCopy ID that identifies this variable instance.\nVariable for state properties (<code>is_*</code>, <code>has_*</code>).\nAwaits for <code>is_animating</code> to change from <code>true</code> to <code>false</code>.\nReturns a future that awaits until a response is received.\nAwaits for a value that passes the <code>predicate</code>, including …\nAwaits for a value that passes the <code>predicate</code>, including …\nAwaits for an update them <code>get</code> the value.\nAwaits for an update them <code>get</code> the value.\nReturns a future that awaits until a response is received …\nAwaits for the <code>last_update</code> to change.\n Initializes a new conditional var.\nVisit a reference to the current value.\nVisit a reference to the current value.\nCalls <code>animate</code> while <code>controller</code> is registered as the …\nNew with pre-allocated inputs.\nNew empty vec with pre-allocated capacity.\nRuns <code>action</code> with this context var representing the other …\nRuns <code>action</code> with <code>self</code> as the current context ID.\nRuns <code>action</code> with this context var representing the other …\nVisit a reference to the current value if it <code>is_new</code>.\nVisit a reference to the current value if it <code>is_new</code>.\nVisit the response, if present and new.\nVisit the response, if present.\nNumber of elements removed.\nNumber of elements inserted.\nIndex the element was first at.\nIndex of the first element removed, at the time of removal.\nIndex of the first element inserted, at the time of …\nIndex the element was reinserted after removal.\nRepresents an animation in its closure.\nAnimations controller.\nRepresents a running animation.\nRepresents the editable final value of a <code>Var::chase</code> …\nAn <code>AnimationController</code> that forces animations to run even …\nRepresents the current <em>modify</em> operation when it is …\nRepresents a simple transition between two values.\nRepresents a transition across multiple keyed values that …\nRepresents a type that can be animated between two values.\nImplement transition by delegating all type parts.\nWeak <code>AnimationHandle</code>.\nReturns <code>true</code> if <code>self</code> and <code>other</code> have the same animation or …\nReturns a value that indicates if animations are enabled …\n<code>dummy</code>.\nCreate a weak handle.\nCreate dummy handle that is always in the <em>stopped</em> state.\nCommon easing functions.\nCompute the elapsed <code>EasingTime</code>, in the span of the total …\nCompute the time elapsed from <code>start_time</code> to <code>now</code>.\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nSet <code>animations_enabled</code> to <code>true</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nValue sampled at the <code>0.fct()</code> step.\nRegister a <code>handler</code> to be called once when the current …\nRegister a <code>handler</code> to be called once when the animation …\nIndicates the <em>override</em> importance of the operation, when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the <em>modify</em> request was made from inside an …\nIf another handle has called <code>perm</code>.\nIf another handle has called <code>stop</code>.\nKeyed values.\nSample the linear interpolation from <code>self</code> -&gt; <code>to</code> by <code>step</code>.\nModify the chase target, replaces the animation with a new …\nInitial value, is always of lowest importance.\nNew transition.\nNew weak handle that does not upgrade.\nNew transition.\nThe instant the current animation update started.\nCalled for each <code>animation</code> that starts in the controller …\nCalled for each <code>animation</code> that ends in the controller …\nDrops the handle but does <strong>not</strong> stop.\nSet the animation start time to now.\nNumber of times the animation restarted.\nCompute the transition value at the <code>step</code>.\nCompute the transition value at the <code>step</code>.\nReplace the chase target, replaces the animation with a …\nChange the start to an instant that computes the <code>elapsed</code> …\nChange the start time to an arbitrary value.\nSet the duration to the next animation update. The …\nThe instant this animation (re)started.\nDrop the animation after applying the current update.\nDrops the handle and forces the animation to drop.\nIf the animation will be dropped after applying the update.\nCurrent animation target.\nGlobal time scale for animations.\nValue sampled at the <code>1.fct()</code> step.\nGet the animation handle if it is still animating.\n<code>easing::back</code>.\nA unit cubic Bézier curve, used for timing functions in …\n<code>easing::bounce</code>.\n<code>easing::circ</code>.\n<code>easing::cubic</code>.\nCustom function.\nEasing functions as a value.\nEasing function output.\nEasing function input.\n<code>easing::elastic</code>.\n<code>easing::expo</code>.\n<code>easing::linear</code>.\n<code>easing::none</code>.\n<code>easing::quad</code>.\n<code>easing::quart</code>.\n<code>easing::quint</code>.\n<code>easing::sine</code>.\nCubic transition that goes slightly negative to start and …\nOscillating transition that grows in magnitude, does not …\nCubic transition with slightly slowed start then <code>cubic</code>.\nCubic transition (t³).\nX coordinate is time, Y coordinate is function advancement.\nNew custom function.\nCreate a closure that calls the easing function.\nApplies the <code>ease_fn</code>.\nApplies <code>ease_in</code> for the first half then <code>ease_out</code> scaled to …\nCreates a custom function that is <code>self</code> modified by …\nApplies the <code>ease_fn</code> in reverse and flipped.\nCreates a custom function that is <code>self</code> modified by …\nApplies <code>ease_out</code> for the first half then <code>ease_in</code> scaled to …\nCreates a custom function that is <code>self</code> modified by …\nNew easing time from total <code>duration</code>, <code>elapsed</code> time and …\nOscillating transition that grows in magnitude, goes …\nGets the end time, one.\nExponential transition. Very slow start, very fast end.\nGet the time as a <code>Factor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the time represents the end of the animation.\nIf the time represents the start of the animation.\nSimple linear transition, no easing, no acceleration.\nCreates a custom function that is <code>self</code> modified by <code>modifier</code>\nCreate a unit cubic Bézier curve from the two middle …\nNew from <code>Factor</code>.\nAlways <code>1.fct()</code>, that is, the completed transition.\nGet the time as a <code>FactorPercent</code>.\nQuadratic transition (t²).\nFourth power transition (t⁴).\nFifth power transition (t⁵).\nApplies the <code>ease_fn</code> in reverse.\nFlip the time.\nCreates a custom function that is <code>self</code> modified by …\nApplies the <code>ease_fn</code> flipped.\nCreates a custom function that is <code>self</code> modified by …\nSine transition. Slow start, fast end.\nSolve the bezier curve for a given <code>x</code> and an <code>epsilon</code>, that …\nGets the start time, zero.\nJumps to the final value by a number of <code>steps</code>.\nJumps to the final value by a number of <code>steps</code>.\nDefault view-process implementation.\nDefault view-process implementation as an embedded …\nRuns the view-process server in the current process and …\nCall the prebuilt <code>run_same_process</code>.\nWidget is rendered first causing all overlapping siblings …\nCoordinates nested borders and corner-radius.\nDefines how the 9-patch edge slices are used to fill the …\nThe line style and color for the sides of a widget’s …\nThe line style and color for each side of a widget’s …\nThe line style for the sides of a widget’s border.\nWidget is hit by any point that intersects the transformed …\nAll updates flagged after the closure call are retained …\nThe widget is not visible and does not affect layout.\nRadius of each corner of a border defined from <code>Size</code> values.\nDefines how the corner radius is computed for each usage.\nZ-index of widgets that don’t set the index.\nDescendants <code>UiNode::deinit</code> can run in parallel.\nDashed line.\nDisplays a series of short square-ended dashes or line …\nWidget is hit by any point that intersects the hit-test …\nWidget is never hit.\nDotted line.\nDisplays a series of rounded dots.\nTwo solid lines in parallel.\nDisplays two straight lines that add up to the pixel size …\nService that provides editor widgets for a given variable.\nDescendants <code>UiNode::event</code> can run in parallel.\nArguments for <code>EDITORS.register</code>.\nWidget is rendered after all siblings causing it to render …\nFaux shadow with carved appearance.\nDisplays a border with a carved appearance.\nFully transparent line.\nFully transparent line.\nThe widget is not visible, but still affects layout.\nDefines if and how a widget is hit-tested.\nLeft-to-right line.\nDescendants <code>UiNode::info</code> can run in parallel.\nDescendants <code>UiNode::init</code> can run in parallel.\nVariable that indicates the context should use mobile UI …\nAll updates flagged during the closure call are discarded, …\nDisplays a border that makes the widget appear embedded.\nDescendants <code>UiNode::measure</code> and <code>UiNode::layout</code> can run in …\nOrientation of a straight line.\nRepresents a line style.\nBase <em>widget</em> for types that build to a custom type that is …\nCorner radius is computed for each usage.\nArguments for the node operation event properties.\nDisplays a border that makes the widget appear embossed.\nDefines what node list methods can run in parallel in a …\nNode list methods that are made parallel.\nDescendants <code>UiNode::render</code> and <code>UiNode::render_update</code> can …\nThe source image’s edge regions are tiled (repeated) to …\nNine-patch border repeat mode.\nFaux shadow with extruded appearance.\nDisplays a border with an extruded appearance.\nThe source image’s edge regions are tiled (repeated) to …\nSame as <code>Bounds</code>, but also excludes the outside of rounded …\nA solid line.\nDisplays a single, straight, solid line.\nThe source image’s edge regions are tiled (repeated) to …\nThe source image’s edge regions are stretched to fill …\nCorner radius is computed on the first usage in the …\nDescendants <code>UiNode::update</code> can run in parallel.\nTop-to-bottom line.\nWidget visibility.\nThe widget is visible.\nCurrent context widget.\nA wavy line, like an error underline.\nWeak reference to a <code>WidgetFn&lt;D&gt;</code>.\nW  Minimal widget.\nW  Minimal widget.\nCorner radius is computed for the first usage in the …\nBase widget.\nBase widget.\nBoxed shared closure that generates a widget for a given …\nUnique ID of a widget.\nTrait implemented by all <code>#[widget]</code>.\nDefines how widget update requests inside …\nPosition of a widget inside an UI node list render …\nGet a flags value with all known bits set.\nIf all corners are the same value.\nIf all sides are equal.\nP  Defines if the widget only renders if it’s bounds …\nP  Defines if the widget only renders if it’s bounds …\nP  Custom background. Allows using any other UI node as a …\nP  Custom background. Allows using any other UI node as a …\nP  Fill color background.\nP  Fill color background.\nP  Conic gradient background.\nP  Conic gradient background.\nP  Custom background generated using a <code>WidgetFn&lt;()&gt;</code>.\nP  Custom background generated using a <code>WidgetFn&lt;()&gt;</code>.\nP  Linear gradient background.\nP  Linear gradient background.\nP  Background image.\nP  Background image.\nP  Sets the background image alignment.\nP  Sets the background image alignment.\nP  Sets the background image crop.\nP  Sets the background image crop.\nP  Sets the background image fit.\nP  Sets the background image fit.\nP  Sets the background image offset.\nP  Sets the background image offset.\nP  Sets the background image opacity.\nP  Sets the background image opacity.\nP  Sets the background image repeat.\nP  Sets the background image repeat.\nP  Sets the background image repeat spacing.\nP  Sets the background image repeat spacing.\nP  Radial gradient background.\nP  Radial gradient background.\nReference the parent <code>WidgetBase</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>Collapsed</code> | <code>Hidden</code> | <code>Visible</code> short circuit from left to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nP  Border widths, color and style.\nP  Border widths, color and style.\nWidget border, updated every layout.\nP  Position of a widget borders in relation to the widget …\nP  Position of a widget borders in relation to the widget …\nP  9-patch image border.\nP  9-patch image border.\nP  Defines if the middle slice of the 9-patch image is …\nP  Defines if the middle slice of the 9-patch image is …\nP  Defines how the 9-patch edge slices are used to fill …\nP  Defines how the 9-patch edge slices are used to fill …\nGets the computed border rect and side offsets for the …\nGets the accumulated border offsets on the outside of the …\nP  If the border is rendered over the fill and child …\nP  If the border is rendered over the fill and child …\nGets the corner radius for the border at the current …\nColor and style of the bottom border.\nBottom-left corner.\nBottom-right corner.\nWidget bounds, updated every layout.\nWidget and property builder types.\nCalls the function with <code>data</code> argument.\nCalls the function with <code>data</code> argument and only returns a …\nP  Clips the widget child to the area of the widget when …\nP  Clips the widget child to the area of the widget when …\nLine color.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns <code>true</code> if the <code>id</code> is set or flagged in the widget.\nP  Corner radius of widget and inner widgets.\nP  Corner radius of widget and inner widgets.\nP  Defines how the <code>corner_radius</code> is computed for each …\nP  Defines how the <code>corner_radius</code> is computed for each …\nNumber of times the handler was called.\nNew border side with <code>Dashed</code> style.\nAll sides a dashed color.\nCalls <code>named</code> in a debug build and <code>new_unique</code> in a release …\n<code>nil</code>.\nReturns <code>hidden</code>.\nReturns <code>hidden</code>.\n<code>Visibility::Visible</code>\nThe intersection of a source flags value with the …\nIf top and bottom are equal; and left and right are equal.\nNew border side with <code>Dotted</code> style.\nAll sides a dotted color.\nNew border side with <code>Double</code> style.\nAll sides a double line solid color.\nCreates a <code>WeakWidgetFn&lt;D&gt;</code> reference to this function.\nExpands a property assign to include an easing animation.\nGet a flags value with all bits unset.\nP  Defines if default interaction is allowed in the widget …\nP  Defines if default interaction is allowed in the widget …\nEnd the current <code>when</code> block, all properties set after this …\nEnd the current <code>when</code> block, all properties set after this …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGets the bounds and corner radius for the widget fill …\nSets the widget state <code>id</code> without value.\nP  Custom foreground fill. Allows using any other UI node …\nP  Custom foreground fill. Allows using any other UI node …\nP  Fill color overlay.\nP  Fill color overlay.\nP  Conic gradient foreground.\nP  Conic gradient foreground.\nP  Custom foreground generated using a <code>WidgetFn&lt;()&gt;</code>.\nP  Custom foreground generated using a <code>WidgetFn&lt;()&gt;</code>.\nP  Linear gradient overlay.\nP  Linear gradient overlay.\nP  Foreground highlight border overlay.\nP  Foreground highlight border overlay.\nP  Foreground image.\nP  Foreground image.\nP  Sets the foreground image alignment.\nP  Sets the foreground image alignment.\nP  Sets the foreground image crop.\nP  Sets the foreground image crop.\nP  Sets the foreground image fit.\nP  Sets the foreground image fit.\nP  Sets the foreground image offset.\nP  Sets the foreground image offset.\nP  Sets the foreground image opacity.\nP  Sets the foreground image opacity.\nP  Sets the foreground image repeat.\nP  Sets the foreground image repeat.\nP  Sets the foreground image repeat spacing.\nP  Sets the foreground image repeat spacing.\nP  Radial gradient foreground.\nP  Radial gradient foreground.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> is <code>Repeat</code>, <code>false</code> is <code>Stretch</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSide transparent black with the style.\nSolid color.\nSolid color.\n(color, style) side.\nSolid color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAll corners same relative length.\nFrom layout corner-radius.\n(top-left, top-right, bottom-left, bottom-right) corners.\nAll corners same exact length.\nAll corners same exact length.\nAll corners same length.\nAll corners same relative length.\nAll corners same.\n(top-color, right-color, bottom-color, left-color, style) …\nAll sides solid color.\n(top-bottom-color, left-right-color, style) sides.\nAll sides solid color.\n(top, right, bottom, left) sides.\n(color, style) sides.\nReturns the argument unchanged.\nAll sides transparent black with the style.\nAll sides solid color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>true</code> to <code>Repeat</code> and <code>false</code> to the default <code>Stretch</code>.\nReturns the argument unchanged.\n<code>true</code> -&gt; <code>Visible</code><code>false</code> -&gt; <code>Collapsed</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>WidgetId::named</code>.\nReturns the argument unchanged.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nInstantiate an editor for the <code>value</code>.\nRetrieve the underlying value.\nGet the widget state <code>id</code>, if it is set.\nNew border side with <code>Groove</code> style.\nAll sides a grooved color.\nNew border side with <code>Hidden</code> style and transparent color.\nAll sides hidden.\nP  Defines if and how the widget is hit-tested.\nP  Defines if and how the widget is hit-tested.\nc  Unique ID of the widget instance.\nGet the widget ID.\nWidget info tree and info builder.\nGets the widget info.\nThe inherit function.\nCalls <code>init</code> and sets <code>id</code> if it is not already set in the …\nSets the <code>id</code> to the default value if it is not already set.\nP  Enforce an inline mode on the widget.\nP  Enforce an inline mode on the widget.\nGets the accumulated border offsets including the current …\nGets the corner radius for the inside of the current …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nNew border side with <code>Inset</code> style.\nAll sides a inset color.\nP  Defines if any interaction is allowed in the widget and …\nP  Defines if any interaction is allowed in the widget and …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSide transparent black with the style.\nAll sides transparent black with the style.\nWhether all known bits in this flags value are set.\nP  If the widget is <code>Collapsed</code>.\nP  If the widget is <code>Collapsed</code>.\nIs collapsed.\nP  If the widget is disabled for interaction.\nP  If the widget is disabled for interaction.\nWhether all bits in this flags value are unset.\nP  If the widget is enabled for interaction.\nP  If the widget is enabled for interaction.\nP  If the widget is <code>Hidden</code>.\nP  If the widget is <code>Hidden</code>.\nIs hidden.\nP  If the widget is visible for hit-tests.\nP  If the widget is visible for hit-tests.\nReturns <code>true</code> if is any mode other then <code>Disabled</code>.\nReturns <code>true</code> if called inside a widget.\nP  If the widget has been initialized.\nP  If the widget has been initialized.\nP  Gets the <code>IS_MOBILE_VAR</code> that indicates the window or …\nP  Gets the <code>IS_MOBILE_VAR</code> that indicates the window or …\nIf this is the <code>nil</code> function.\nIf this weak reference only upgrades to a nil function.\nP  If the widget is <code>Visible</code>.\nP  If the widget is <code>Visible</code>.\nIs visible.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nSchedule a re-layout for the current widget.\nMeasure a border node, adding the <code>offsets</code> to the context …\nColor and style of the left border.\nLeft and right edges.\nReturns <code>self</code> for <code>step &lt; 1.fct()</code> or <code>to</code> for <code>step &gt;= 1.fct()</code>.\nMeasure a border node, adding the <code>offsets</code> to the context …\nP  Only allow interaction inside the widget, descendants …\nP  Only allow interaction inside the widget, descendants …\nP  Include itself in the allow list of another widget that …\nP  Include itself in the allow list of another widget that …\nP  Extra widgets that are allowed interaction by this …\nP  Extra widgets that are allowed interaction by this …\nReturns the name associated with the ID or <code>&quot;&quot;</code>.\nGet or generate an ID with associated name.\nGenerate a new ID with associated name.\nNew from a closure that generates a node from data.\nTop-bottom and left-right equal. From any <code>RepeatMode</code> type.\nNew args.\nNew border side from color and style value.\nNew every corner unique.\nNew top, right, bottom left.\nAll sides equal. From any <code>RepeatMode</code> type.\nNew all corners the same.\nAll sides equal.\nNew bottom only, other sides hidden.\nNew left only, other sides hidden.\nNew right only, other sides hidden.\nNew top only, other sides hidden.\nGenerates a new unique ID.\nTop-bottom and left-right equal.\nFunction that always produces the <code>UiNode::nil</code>.\nNew weak reference to nil.\nWidget node types, <code>UiNode</code>, <code>UiVec</code> and others.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNew args with timestamp now.\nP  Widget interactions now blocked.\nP  Widget interactions now blocked.\nP  Widget interactions where blocked or unblocked.\nP  Widget interactions where blocked or unblocked.\nP  Widget visibility changed to collapsed.\nP  Widget visibility changed to collapsed.\nP  Widget deinited.\nP  Widget deinited.\nP  Widget normal interactions now disabled.\nP  Widget normal interactions now disabled.\nP  Widget normal interactions now enabled.\nP  Widget normal interactions now enabled.\nP  Widget was enabled or disabled.\nP  Widget was enabled or disabled.\nP  Widget visibility changed to hidden.\nP  Widget visibility changed to hidden.\nP  Widget info is now available.\nP  Widget info is now available.\nP  Widget initialized.\nP  Widget initialized.\nP  Widget interactivity changed.\nP  Widget interactivity changed.\nP  Widget global position changed.\nP  Widget global position changed.\nP  On any node operation.\nP  On any node operation.\nP Preview <code>on_block</code> event.\nP Preview <code>on_block</code> event.\nP Preview <code>on_blocked_changed</code> event.\nP Preview <code>on_blocked_changed</code> event.\nP Preview <code>on_collapse</code> event.\nP Preview <code>on_collapse</code> event.\nP  Preview <code>on_deinit</code> event.\nP  Preview <code>on_deinit</code> event.\nP Preview <code>on_disable</code> event.\nP Preview <code>on_disable</code> event.\nP Preview <code>on_enable</code> event.\nP Preview <code>on_enable</code> event.\nP Preview <code>on_enabled_changed</code> event.\nP Preview <code>on_enabled_changed</code> event.\nP Preview <code>on_hide</code> event.\nP Preview <code>on_hide</code> event.\nP  Preview <code>on_init</code> event.\nP  Preview <code>on_init</code> event.\nP Preview <code>on_interactivity_changed</code> event.\nP Preview <code>on_interactivity_changed</code> event.\nP Preview <code>on_move</code> event.\nP Preview <code>on_move</code> event.\nP  Preview <code>on_node_op</code> event.\nP  Preview <code>on_node_op</code> event.\nP Preview <code>on_show</code> event.\nP Preview <code>on_show</code> event.\nP Preview <code>on_transform_changed</code> event.\nP Preview <code>on_transform_changed</code> event.\nP Preview <code>on_unblock</code> event.\nP Preview <code>on_unblock</code> event.\nP  Preview <code>on_update</code> event.\nP  Preview <code>on_update</code> event.\nP Preview <code>on_vis_disable</code> event.\nP Preview <code>on_vis_disable</code> event.\nP Preview <code>on_vis_enable</code> event.\nP Preview <code>on_vis_enable</code> event.\nP Preview <code>on_vis_enabled_changed</code> event.\nP Preview <code>on_vis_enabled_changed</code> event.\nP Preview <code>on_visibility_changed</code> event.\nP Preview <code>on_visibility_changed</code> event.\nP  Widget visibility changed to visible.\nP  Widget visibility changed to visible.\nP  Widget global inner transform changed.\nP  Widget global inner transform changed.\nP  Widget interactions now unblocked.\nP  Widget interactions now unblocked.\nP  Widget <code>update</code> event.\nP  Widget <code>update</code> event.\nP  Widget now looks disabled.\nP  Widget now looks disabled.\nP  Widget now looks enabled.\nP  Widget now looks enabled.\nP  Widget changed to enabled or disabled visuals.\nP  Widget changed to enabled or disabled visuals.\nP  Widget visibility changed.\nP  Widget visibility changed.\nOperation.\nGets the corner radius for the outside of the outer border …\nNew border side with <code>Outset</code> style.\nAll sides a outset color.\nP  Defines what node list methods can run in parallel in …\nP  Defines what node list methods can run in parallel in …\nGets the parent widget or <code>None</code> if is root.\nExpands a function to a widget property.\nHold the event <code>handle</code> until the widget is deinited.\nHold the event <code>handles</code> until the widget is deinited.\nHold the var <code>handle</code> until the widget is deinited.\nHold the var <code>handles</code> until the widget is deinited.\nRegister an <code>editor</code> handler.\nRegister an <code>editor</code> handler to be called if none of the …\nFlags the widget to re-init after the current update …\nThe intersection of a source flags value with the …\nSchedule a re-render for the current widget.\nSchedule a frame update for the current widget.\nSame as <code>get</code>, but also logs an error is there are no …\nRequire the widget state <code>id</code>.\nNew border side with <code>Ridge</code> style.\nAll sides a ridged color.\nColor and style of the right border.\nComputes <code>other</code> above <code>self</code>, caps at <code>FRONT</code>.\nComputes <code>other</code> below <code>self</code>, stops at <code>BACK</code>.\nUn-scramble the underlying value to get the original …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nAssociate a <code>name</code> with the ID, if it is not named.\nSet the widget state <code>id</code> to <code>value</code>.\nNew widget function that returns the same <code>widget</code> for every …\nNew border side with <code>Solid</code> style.\nAll sides a solid color.\nStart building a <code>when</code> block, all properties set after this …\nStart building a <code>when</code> block, all properties set after this …\nLine style.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubscribe to receive events from <code>event</code> when the event …\nSubscribe to receive updates when the <code>var</code> changes.\nSubscribe to receive info rebuild requests when the <code>var</code> …\nSubscribe to receive info rebuild requests when the <code>var</code> …\nSubscribe to receive layout requests when the <code>var</code> changes.\nSubscribe to receive layout requests when the <code>var</code> changes …\nSubscribe to receive <code>UpdateOp</code> when the <code>var</code> changes.\nSubscribe to receive <code>UpdateOp</code> when the <code>var</code> changes and …\nSubscribe to receive render requests when the <code>var</code> changes.\nSubscribe to receive render update requests when the <code>var</code> …\nSubscribe to receive render update requests when the <code>var</code> …\nSubscribe to receive render requests when the <code>var</code> changes …\nSubscribe to receive updates when the <code>var</code> changes and the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nInstant the handler was called.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nColor and style of the top border.\nTop and bottom edges.\nTop-left corner.\nTop-right corner.\nGets a text with a detailed widget id.\nGets a text with detailed path to the current widget.\nGet the widget ID, if called inside a widget.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSchedule an update for the current widget.\nSchedule an info rebuild for the current widget.\nSchedule an <code>UpdateOp</code> for the current widget.\nUpgrade to strong reference if it still exists or nil.\nTry to downcast the value variable to <code>T</code>.\nThe value variable.\nP  Sets the widget visibility.\nP  Sets the widget visibility.\n Declares a widget function closure.\nExpands a struct to a widget struct and macro.\nBuild the widget.\nFinishes the build.\nReturns a mutable reference to the widget builder.\nReturns a mutable reference to the widget builder.\n Implement a property on the widget to strongly associate …\nReturns a mutable reference to the importance of the next …\nReturns a mutable reference to the importance of the next …\nExpands a struct to a widget mix-in.\nStarts building a new <code>WidgetBase</code> instance.\nStarts building a new <code>NonWidgetBase</code> instance.\nStart building a new instance.\n Sets properties and when condition on a widget builder.\nTakes the widget builder, finishing the widget macro build.\nTakes the widget builder, finishing the widget macro build.\nGets the type of <code>WidgetBase</code>.\nGets the type of <code>NonWidgetBase</code>.\nGets the widget type info.\nReturns a mutable reference to the <code>when</code> block if called …\nReturns a mutable reference to the <code>when</code> block if called …\nTransform point in the window space to the widget inner …\nGets the transform from the window space to the widget …\nSets the border layout for the context of <code>f</code>.\nCalls <code>f</code> while the widget is set to <code>ctx</code>.\nIndicates a boundary point where the <code>CORNER_RADIUS_VAR</code> …\nCalls <code>f</code> with an override target for var and event …\nCalls <code>f</code> while no widget is available in the context.\nCalls <code>f</code> with a read lock on the current widget state map.\nCalls <code>f</code> with a write lock on the current widget state map.\nP  Defines the render order of a widget in a layout panel.\nP  Defines the render order of a widget in a layout panel.\nNo corner radius.\nA <code>when</code> builder for <code>AnyArcWidgetHandler</code> values.\nRepresents a <code>WidgetHandler&lt;A&gt;</code> that can be reused.\nProperty renders a border visual.\nRepresents a property removed from <code>WidgetBuilding</code>.\nRepresents a mutable reference to property in <code>WidgetBuilder</code>…\nRepresents a property in <code>WidgetBuilder</code> or <code>WidgetBuilding</code>.\nMaximum nest position, property is inside all others and …\nProperty defines contextual value or variable for the …\nProperty defines the layout and size of the child or …\nProperty defines a contextual value or variable.\nProperty defines an event handler, or state monitor, they …\nProperty defines a visual of the widget.\nImportance of values defined in the widget instantiation.\nDefault index used for intrinsic nodes, is <code>u16::MAX / 3</code>.\nAll groups, from outermost(<code>WIDGET</code>) to innermost(<code>CHILD</code>).\nValue that indicates the override importance of a property …\nMember was accessed by index.\nKind of property input.\nProperty defines the position and size of the widget …\nMember was accessed by name.\nProperty nest position group.\nRepresents the sort index of a property or intrinsic node …\nDefault index used for properties, is <code>INTRINSIC_INDEX * 2</code>.\nRepresents a property instantiation request.\nRepresents a custom build action targeting a property …\nArguments for <code>PropertyBuildAction&lt;I&gt;</code>.\nProperty build actions that must be applied to property …\nData for property build actions associated with when …\nUnique ID of a property implementation.\nProperty info.\nProperty input info.\nRepresents the strong types of each input of a property.\nArgs for <code>PropertyInfo::new</code> closure.\nProperty strongly enforces a widget size.\nA location in source-code.\nInput is <code>impl IntoUiNode</code>, build value is <code>ArcNode</code>.\nInput is <code>impl IntoValue&lt;T&gt;</code>, build value is <code>T</code>.\nInput is <code>impl IntoVar&lt;T&gt;</code>, build value is <code>Var&lt;T&gt;</code>.\nMinimal nest position, property is outside even context …\nImportance of default values defined in the widget …\nMinimal widget visual position, any property or node can …\nData for a custom when build action associated with an …\nRepresents a <code>when</code> block in a widget.\nInput var read in a <code>when</code> condition expression.\nRepresents what member and how it was accessed in a …\nRepresents a <code>WhenInput</code> variable that can be rebound.\nWidget instance builder.\nDirect property access in <code>WidgetBuilder</code> and <code>WidgetBuilding</code>.\nRepresents a finalizing <code>WidgetBuilder</code>.\nInput is <code>impl WidgetHandler&lt;A&gt;</code>, build value is …\nUnique identifier of a widget type.\nValues for each input in the same order they appear in …\nProperty args.\nProperty args.\nProperty args.\nProperties assigned in the <code>when</code> block, in the build widget …\nBuild the handler.\nInstantiate the widget.\nRun the build action on a input.\nData associated with the when condition in the build …\nThe property build actions can be empty or each item must …\nWhen build action data for each <code>build_actions</code>.\nProperty is “capture-only”, no standalone …\nFlags the property as captured and returns a reference to …\nFlags the property as captured and get the input node.\nFlags the property as captured and get the input node, or …\nFlags the property as captured and get the input node, or …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input var.\nFlags the property as captured and downcast the input var, …\nFlags the property as captured and downcast the input var, …\nFlags the property as captured and downcast the input …\nIf the property was <em>captured</em> before removal.\nIf the property was <em>captured</em>.\nIf the property was <em>captured</em>.\nRemove all registered build actions.\nRemove the custom build handler, if any was set.\nRemove all registered property build actions.\nClones the arguments.\n<code>std::column!</code>\nData for all inputs.\nGets the property input current value as a debug text.\nNew default property args.\nClosure that generates the default build actions, used …\nInstantiate the widget.\nDon’t insert the inspector node and inspector metadata …\nDon’t insert property/intrinsic trace nodes on build.\nDon’t insert the widget trace node on build.\nShorter <code>ty_name</code>.\nGets a strongly typed <code>widget_handler</code>.\nGets a strongly typed <code>value</code>.\nGets a strongly typed <code>var</code>.\nThe condition expression code.\nApply <code>other</code> over <code>self</code>.\n<code>std::file!</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nRetrieve the underlying value.\nThe major position.\nProperty nest position group.\nIf an innermost node is defined.\nIf any property is present in the builder.\nIf any unset filter is present in the builder.\nIf any when block is present in the builder.\nUnique ID.\nUnique ID that identifies the property implementation.\nProperty importance at the time of removal.\nProperty current importance.\nProperty current importance.\nExtra sorting within items of the same group.\nThe property input value.\nGets the index that can be used to get a named property …\nProperty inputs info.\nProperties referenced in the when condition expression.\nCreate a property instance with args clone or taken.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew position for intrinsic node.\nReturns <code>true</code> if a custom build handler is registered.\nInput kind.\n<code>std::line!</code>\nGets the property input as a debug variable.\nProperty declaration location.\nSource code location.\nWhen declaration location.\nWhat member and how it was accessed for this input.\nGroup name.\nGet the last part of the path.\nProperty name.\nInput name.\nNew from default value.\nNew empty default.\nNew build action.\nNew from <code>handler</code>.\nNew input setter and input var.\nNew from strongly typed values.\nNew property args from dynamically typed args.\nCall <code>new</code> with the same instance info and args, but with …\nNew from data, is only used if the action is provided by …\nGenerates a new unique ID.\nNew build action that just pass the input.\nThe widget public macro path.\nProperty group and index at the time of removal.\nProperty current group and index.\nProperty current group and index.\nIterate over the current properties.\niterate over mutable references to the current properties.\nProperty info.\nReference the property, if it is present.\nNew position for property.\nProperty.\n New <code>Box&lt;PropertyArgs&gt;</code> box from a property and value.\nConstructor that generates the default property instance.\n New <code>PropertyId</code> that represents the type and name.\n New <code>PropertyInfo</code> from property path.\n Gets the strong input storage types from a property path.\nModify the property, if it is present.\nPush a conditional handler.\nAdd an <code>action</code> closure that is called every time this …\nInsert intrinsic node, that is a core functionality node …\nInsert intrinsic node with custom nest position.\nInsert/override a property.\nAdd or override custom builder actions that are called to …\nInsert property with custom nest position.\nInsert a <code>name = unset!;</code> property.\nInsert a property build action filter.\nInsert a <code>when</code> block.\nRemoves the property.\nUn-scramble the underlying value to get the original …\nSet/replace the innermost node of the widget.\nSet a <code>build</code> closure to run instead of <code>default_build</code> when …\n New <code>SourceLocation</code> that represents the location you call …\nMove all <code>properties</code> to a new builder.\nOutput of the when expression.\nType as defined by kind.\nType name.\nWidget type ID.\nGets a <code>InputKind::UiNode</code>.\nUnit value.\nGets a <code>InputKind::Value</code>.\nGets a <code>InputKind::Var</code>.\nInput var.\nThe <code>WhenBuildAction::data</code> for each when assign that …\nGets a <code>InputKind::WidgetHandler</code>.\nThe widget that started this builder.\nThe widget that started this builder.\n Gets the <code>WidgetType</code> info of a widget.\nNo interaction allowed, the widget must behave like a …\n<code>BLOCKED</code> with <code>DISABLED</code> visuals.\nWidget was hit on a hit-test shape rendered before the …\nOnly “disabled” interactions allowed and disabled …\nNormal interactions allowed.\nWidget was hit on a hit-test shape rendered after the …\nA hit-test hit.\nA hit-test result.\nWidget interactivity has changed after an info update.\nInclude the descendant and continue filtering its …\nInfo about a segment in the first or last row of an …\nRepresents a <code>WidgetPath</code> annotated with each widget’s …\nRepresents the level of interaction allowed for a widget.\n<code>INTERACTIVITY_CHANGED_EVENT</code> args.\nArgument for a interactivity filter function.\nWidget was not hit.\nWidget was hit on a hit-test shape rendered after the …\nRepresents a builder split from the main builder that can …\nHit-test result on a widget relative to it’s descendants.\nSkip the descendant but continue filtering its descendants.\nSkip the descendant and its descendants.\nInclude the descendant but skips its descendants.\nA widget global inner transform has changed after render.\n<code>TRANSFORM_CHANGED_EVENT</code> args.\nWidget tree filter selected for a widget in the tree.\nWidget visibility has changed after render.\n<code>VISIBILITY_CHANGED_EVENT</code> args.\nA window widget tree was rebuild.\nShared reference to the combined <em>border</em> and corner radius …\nShared reference to layout size, offsets, rendered …\nRepresents the descendants of a widget, allows checking if …\nReference to a widget info in a <code>WidgetInfoTree</code>.\nWidget info tree builder.\n<code>WIDGET_INFO_CHANGED_EVENT</code> args.\nTag for the <code>WidgetInfo::meta</code> state-map.\nA tree of <code>WidgetInfo</code>.\nStats over the lifetime of a widget info tree.\nInfo about the inlined rows of the widget.\nInfo about the input inline connecting rows of the widget.\nFull address of a widget.\nAccessibility metadata types.\nAccessibility metadata builder.\nAccessibility info, if the widget is accessible.\nDescendant branches that have accessibility info.\nIf this tree contains accessibility information.\nFirst ancestor that is accessible.\nGet a flags value with all known bits set.\nAll widgets including <code>root</code>.\nMake a path to an ancestor id that is contained in the …\nMake a path to an ancestor id that is contained in the …\nWidgets that contain <code>widget_id</code>, root first.\nIterator over parent -&gt; grandparent -&gt; .. -&gt; root.\nDereferences to the path.\nThe baseline offset up from the inner bounds bottom line.\nGets the baseline offset up from the inner bounds bottom …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the previous and new interactivity if the widget …\nIndex of first <code>BLOCKED</code>.\nClone a reference to the widget border and corner radius …\nAll the transforms introduced by this widget, starting …\nCount of moved or resized widgets in the last …\nLast window frame that moved or resized the inner bounds …\nCustom metadata associated with the tree during info build.\nDuration of the <code>UiNode::info</code> call for the window content.\nGets if the widget only renders if <code>outer_bounds</code> intersects …\nWidget inner bounds center in the window space.\nSpatial iterator over self and descendants with center …\nSpatial iterator over self and descendants with center …\nGets the previous and new inner transform of the widget.\nGets the previous and new visibility for the widget, if it …\nAll event subscribers that changed inner-transform mapped …\nAll event subscribers that changed visibility mapped to …\nAll event subscribers that changed interactivity in this …\nGets the widget’s child offset inside the inner bounds.\nIterator over the direct descendants of the widget.\nCount of <code>children</code>.\nReturn info to default state, but retain memory for reuse.\nCompare the position of <code>self</code> and <code>sibling</code> in the <code>ancestor</code> …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIf the <code>widget_id</code> is part of the path.\nIf the tree contains the widget.\nWhether all set bits in a source flags value are also set …\nIf the widget is a descendant.\nIf the widget was hit.\nGets if the <code>widget_id</code> is on the path and blocked.\nGets if the <code>widget_id</code> is on the path and disabled.\nGets if the <code>widget_id</code> is on the path and enabled.\nGets if the <code>widget_id</code> is on the path and visually enabled.\nCorner radius set on the widget, this is the <em>outer</em> curve …\n<code>ENABLED</code>.\nBroadcast to all widgets.\nTarget the <code>changed</code> widgets.\nTarget the <code>changed</code> widgets.\nTarget the <code>changed</code> widgets.\nCount of ancestors.\nIterator over all widgets contained by this widget.\nTotal number of <code>descendants</code>.\nGets a value that can check if widgets are descendant of …\nThe intersection of a source flags value with the …\nIndex of first <code>DISABLED</code>.\nValue that indicates the distance between this widget …\nGet a flags value with all bits unset.\nGets the <code>ENABLED</code> part of the path, or none if the widget …\nReturns the previous and new interactivity if the widget …\nPaths are equal if they share the same window and widget …\nPaths are equal if the are the same window, widgets and …\nPaths are equal if the are the same window, widgets and …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGets the baseline offset of the widget after <code>inner_offset</code> …\nBuild the info tree.\nSearch the widget in the hit-test result.\nPreferred first size.\nReference to the first widget within this widget.\nInline segments in the first row.\nSegments of the first row.\nIndicates that <code>first</code> starts in the next row, not in the …\nSets the info tree build metadata <code>id</code> without value.\nSets the widget info metadata <code>id</code> without value.\nThe window frame that was hit-tested.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>Include</code> for <code>true</code> and <code>Skip</code> for <code>false</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> -&gt; <code>ENABLED</code><code>false</code> -&gt; <code>DISABLED</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nNew interactivity path with all widgets enabled.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nNumber of times info was rebuild for the window.\nReference to the widget in the tree, if it is present.\nReference to the widget or first parent that is present.\nIf the widget has at least one child.\nIf the parent widget has multiple children.\nGets all widgets of self and descendants hit by a <code>point</code>, …\nReturns <code>true</code> if a hit-test clip that affects the <code>child</code> …\nGets the relative hit-test Z for <code>window_point</code> against the …\nAll hits, from top-most.\nWidget id.\nWidget being filtered.\nExclusive read the latest inline layout info.\nSize of the widget child area, not transformed.\nCalculate the bounding box that envelops the actual size …\nWidget inner rectangle in the window space.\nSpatial iterator over self and descendants with inner …\nIterator over self and all descendants with inner bounds …\nSpatial iterator over self and descendants with inner …\nComputes the <code>corner_radius</code> deflated by <code>offsets</code>, this is …\nSpatial iterator over self and descendants with inner …\nGets the widget’s inner bounds offset inside the outer …\nCompute the inner offset plus <code>offsets</code> left, top.\nIf the <code>baseline</code> is added from the <code>inner_offset</code>.\nGets the inline rows for inline widgets or inner bounds …\nGets the widget’s inner bounds size.\nCompute the inner size offset by <code>offsets</code>.\nSize of the widget inner area, not transformed.\nWidget inner size when the rows where last updated.\nGets the global transform of the widget’s inner bounds …\nCompute the inner transform offset by the <code>offsets</code>.\nWidget inner transform in the window space.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHelper types for inspecting an UI tree.\nInteractivity for each widget, root first.\nFull path to this widget with <code>interactivity</code> values.\nInteractivity of the widget.\nGet or compute the interactivity of the widget.\nGets the interactivity of <code>widget_id</code>, if its present on the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nGets a clone of <code>self</code> that only contains the hits that also …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto internal parts.\nInvalidates the <code>negative_space</code> cache.\nWhether all known bits in this flags value are set.\nIf <code>self</code> is an ancestor of <code>maybe_descendant</code>.\nWidget was unblocked or did not exist, now is blocked.\nNo interaction allowed, may still be visually enabled.\nWidget was visible or hidden, now is collapsed.\nIf the widget and descendants was collapsed during layout.\nIf all value are not different from initial.\nIf all value are not different from initial.\nIf <code>self</code> is inside <code>maybe_ancestor</code>.\nWidget was enabled or did not exist, now is disabled.\nOnly “disabled” interactions allowed and disabled …\nWhether all bits in this flags value are unset.\nWidget was disabled or did not exist, now is enabled.\nNormal interactions allowed.\nWidget was visible or collapsed, now is hidden.\nGets if the <code>inner_bounds</code> are fully inside the parent inner …\nReturns <code>true</code> if this widget’s inner bounds are fully …\nWidget is new, no previous interactivity state is known, …\nIf the widgets in this tree have been rendered at least …\nIf the widget info and all descendants did not change in …\nWidget was not hidden or collapsed, now is visible.\nWidget was blocked or did not exist, now is unblocked.\nWidget was visually enabled or did not exist, now is …\nDisabled visuals, maybe also blocked.\nWidget was visually disabled or did not exist, now is …\nEnabled visuals, may still be blocked.\nWidget info tree iterators.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nPreferred last size.\nReference to the last widget within this widget.\nLast window frame that rendered this tree.\nInline segments in the last row.\nSegments of the last row.\nIndicates that <code>last</code> starts in a next row, not in the same …\nTotal number of widgets in the tree.\nGets the latest inline measure info.\nGets the widget’s last measured outer bounds size.\nCustom metadata associated with the widget during info …\nSnapshot of the <code>LayoutMetrics</code> on the last layout.\nAll <code>metrics</code> fields used by the widget or descendants on …\nFind the descendant with center point nearest of <code>origin</code> …\nFind the widget, self or descendant, with center point …\nFind the widget with center point nearest to <code>origin</code> center …\nFind the widget with center point nearest to <code>origin</code> center …\nFind the widget, self or descendant, with center point …\nFind the widget with center point nearest of <code>origin</code> within …\nFind the widget with center point nearest of <code>origin</code> within …\nFind the descendant that has inner bounds or inline rows …\nFind the widget, self or descendant, with inner bounds or …\nFind the descendant that has inner bounds or inline rows …\nGets or computes the negative space of the <code>rows</code> in the …\nStarts building a info tree with the root information.\nNew custom widget path.\nNew custom path.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew from <code>x</code> and <code>width</code>.\nNew default.\nNew default.\nNew from <code>info</code>.\nNew custom path with all widgets enabled.\nGets the <code>interaction_path</code> if it is different from <code>old_path</code>.\nNew interactivity of the widget.\nGets the <code>path</code> if it is different from <code>old_path</code>.\nNew info with bound sizes known.\nGets the new visibility of the widget, if it has changed.\nReference to the next widget within the same parent.\nIterator over all next widgets within the same parent.\nIterator over all next widgets within the same <code>ancestor</code>, …\nNo hits info\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nGets the movement between previous and new transformed …\nSum of the widths of all borders set on the widget.\nThe <code>center</code> orientation in relation to an <code>origin</code>.\nSpatial iterator over all widgets, self and descendants, …\nSpatial iterator over all widgets, self and descendants, …\nIterator over all widgets with inner-bounds not fully …\nIterator over all descendants with inner bounds not fully …\nOuter bounding box, updated after every render.\nWidget outer rectangle in the window space.\nGets the widget’s last layout outer bounds size.\nSize of the widget outer area, not transformed.\nGets the global transform of the widget’s outer bounds …\nWidget outer transform in window space.\nCollect info from <code>split</code> into <code>self</code>.\nCreate a new info builder that can be built in parallel …\nReference to the widget that contains this widget.\nOffset rendered in the widget inner set by the parent …\nThe widget parent, if it is not the root widget.\nFull path to this widget.\nGets the widget perspective and perspective origin (in the …\nGets the 3D perspective for this widget.\nThe point in the window that was hit-tested.\nPrevious interactivity of this widget.\nReference to the previous widget within the same parent.\nIterator over all previous widgets within the same parent.\nIterator over all previous widgets within the same <code>ancestor</code>…\nPrevious widget tree.\nPrevious tree with old interactivity values.\nGets the previous visibility of the widget, if it has …\nAdd the <code>interactivity</code> bits to the current widget’s …\nRegister a closure that returns the <code>Interactivity</code> allowed …\nCalls <code>f</code> to build the context widget info.\nValue that indicates the distance between the nearest …\nLike <code>rect_distance_key</code>, but only consider rectangles …\nThe intersection of a source flags value with the …\nGets the widget’s latest render info, if it was rendered …\nCount of widgets that where reused from a previous tree.\nReference to the root widget in the tree.\nReference to the root widget.\nGets a path to the root widget of this path.\nGets a path to the root widget of this path.\nLast layout rows of the widget.\nScale factor of the last rendered frame.\nIterator over self -&gt; parent -&gt; grandparent -&gt; .. -&gt; root.\nIterator over the widget and the direct descendants of the …\nIterator over the widget and all widgets contained by it.\nIterator over self and all next widgets within the same …\nIterator over self, descendants and all next widgets …\nIterator over self and all previous widgets within the …\nIterator over self, descendants and all previous widgets …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the info tree build metadata <code>id</code> to <code>value</code>.\nReplace the <code>first_segs</code> with <code>segs</code>.\nReplace the <code>last_segs</code> with <code>segs</code>.\nSet the widget info metadata <code>id</code> to <code>value</code>.\nGet the inner most widget parent shared by both <code>self</code> and …\nGet the inner most widget parent shared by both <code>self</code> and …\nFirst ancestor of <code>self</code> and <code>other</code>.\nAll parent children except this widget.\nGets the bounds box that envelops all widgets, including …\nCompute the bounding box that envelops self and …\nIterator over self and descendants, first self, then all …\nStatistics abound the info tree.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGets a path to the <code>widget_id</code> of this path.\nGets a sub-path up to <code>widget_id</code> (inclusive), or <code>None</code> if …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe top hit.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nBuild an access tree from the info tree.\nBuild partial or full access trees for updated widgets.\nBuild partial access trees for widgets that changed …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDetailed id text.\nPath details to help finding the widget during debug.\nGets if the widget preserves 3D perspective.\nGets the transform style for this widget.\nReference the <code>WidgetInfoTree</code> that owns <code>self</code>.\nNew widget tree.\nWidget tree where some widgets have new inner transforms.\nWidget tree where some widgets have new visibility.\nNew tree with new interactivity values.\nGets the <code>ENABLED</code> or <code>DISABLED</code> part of the path, or none if …\nGets the union of all row rectangles.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nView-process generation.\nReturns the previous and new interactivity if the widget …\nLast window frame that changed visibility of at least one …\nGets the visibility of the widget or the widget’s …\nCall <code>visitor</code> for each <code>inner_rects</code> without allocating or …\nBlank window that contains only the root widget taking no …\nCurrent widget id.\nThe widget.\nID of widget hit.\n<code>ancestors</code> and <code>widget_id</code>, root first.\nSegment width.\nId of the window that contains the widgets.\nId of the window that owns all widgets represented in the …\nThe window that was hit-tested.\nWindow ID.\nWidget info tree build metadata.\nCalls the <code>info</code> closure and returns the range of children …\nVisit a mutable reference to the new <code>first_segs</code> value, <code>f</code> …\nVisit a mutable reference to the new <code>last_segs</code> value, <code>f</code> is …\nCurrent widget info metadata.\nSegment offset from the row rectangle origin.\nGet the z-index of the widget in the latest frame if it …\nZ-index of the hit.\nZip widgets and interactivity.\nArguments for <code>on_access_build</code> handlers.\nAccessibility info for a widget.\nAccessibility metadata.\nIdentifies the currently active widget when focus is on a …\nHow input text triggers display of one or more predictions …\nIf the widget is checked (<code>Some(true)</code>), unchecked (…\nDefines the total number of columns in a <code>Table</code>, <code>Grid</code>, or …\nDefines a widget’s column index in the parent table or …\nDefines the number of columns spanned by the widget in the …\nAccessibility commands supported by the widget.\nWidget(s) whose contents or presence are controlled by …\nKind of current item the widget represents.\nIdentifies the widget(s) that describes this widget.\nIdentifies the widget that is described by this widget.\nIdentifies the widget(s) that provide additional …\nGets the invalid widget that this widget is an error …\nGets visibility of related widgets.\nExclude the widget and descendants from the view-process …\nUses the accessible children as <code>labelled_by</code>.\nSets if the widget is modal when displayed.\nIndicates that the user may select more than one item from …\nIndicates that the widget is not editable, but is …\nIndicates that user input is required on the widget before …\nIndicates that the widget is selected.\nOptions for next widget to read.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates the availability and type of interactive popup …\nFull widget info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the widget data has errors.\nIf the widget and descendants is <em>visible</em> in the …\nIndicates that the user may select more than one item from …\nIndicates that the widget is not editable, but is …\nIndicates that user input is required on the widget before …\nIndicates that the widget is selected.\nDefines the number of items in the current set of list …\nDefines the widget’s number or position in the current …\nGets the accessibility name explicitly set on this widget.\nIdentifies the widget(s) that labels the widget it is …\nIf the widget children must be used like <code>labelled_by</code>.\nIdentifies the widget that is labelled by this widget.\nGets the language of texts inside this widget and …\nDefines the hierarchical level of a widget within a …\nGets the live indicator, atomic and busy.\nIndicates whether the widget is modal when displayed.\nPartially build view info, does not include children info.\nRegister a <code>handler</code> that is called every time view-process …\nIndicates whether the widget’s orientation is …\nExtra widgets that are <em>child</em> to this widget, but are not …\nShort hint (a word or short phrase) intended to help the …\nAdd a supported access command.\nPush a widget whose contents or presence are controlled by …\nPush a widget that describes this widget.\nPush a widget that provide additional information related …\nPush an option for next widget read that is not the next …\nPush a widget that provide additional information related …\nPush a widget that is a <em>child</em> of this widget, but is not …\nAccessibility role of the widget.\nDefines the total number of rows in a <code>Table</code>, <code>Grid</code>, or …\nDefines a widget’s column index in the parent table or …\nDefines the number of columns spanned by the widget in the …\nNormalized (0..1) horizontal scroll, 0 is showing the …\nNormalized (0..1) vertical scroll, 0 is showing the …\nIdentifies the currently active widget when focus is on a …\nSet how input text triggers display of one or more …\nIf the widget is checked (<code>Some(true)</code>), unchecked (…\nSets the total number of columns in a <code>Table</code>, <code>Grid</code>, or …\nSets the widget’s column index in the parent table or …\nSets the number of columns spanned by the widget in the …\nIndicates that the widget represents the current item of a …\nSet a widget that is described-by this widget.\nIndicates that the widget is an error message for the …\nIndicate that the widget toggles the visibility of related …\nIndicates that the widget’s data is invalid with …\nSets the number of items in the current set of list items …\nSets the widget’s number or position in the current set …\nSets a custom name for the widget in accessibility info.\nSet a widget that is labelled-by this widget.\nDefines the language used by screen-readers to read text …\nSets the hierarchical level of the widget within a parent …\nIndicate that the widget can change, how the change can be …\nIndicates whether the widget’s orientation is …\nShort hint (a word or short phrase) intended to help the …\nIndicates the availability and type of interactive popup …\nSet the accessibility role of the widget.\nSets the total number of rows in a <code>Table</code>, <code>Grid</code>, or <code>TreeGrid</code>…\nSets the widget’s row index in the parent table or grid.\nSets the number of rows spanned by the widget in the …\nSets the amount scrolled horizontally if allowed.\nSets the amount scrolled vertically if allowed.\nSets the sort direction for the table or grid items.\nSet the current value.\nSet the maximum value (inclusive).\nSet the minimum value (inclusive).\nSet a text that is a readable version of the current value.\nIndicates if items in a table or grid are sorted in …\nCurrent value.\nMaximum value (inclusive).\nMinimum value (inclusive).\nCurrent value in a readable format.\nWidget that is converting to view info.\nQuery pattern for the <code>WidgetInfoInspectorExt</code> inspect …\nQuery pattern for the <code>WidgetInfoInspectorExt</code> inspect …\nInspected contextual variables actualized at the moment of …\nWidget instance inspector info.\nWidget instance item.\nMarks an intrinsic node instance inserted by the widget.\nProperty instance.\nExtensions methods for <code>WidgetInfo</code>.\nInspected contextual variables actualized at the moment of …\nBuilder that was used to instantiate the widget.\nIf a <code>inspector_info</code> is defined for the widget.\nGet and downcast.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the actualized property var, if at the moment of info …\nGet and map debug.\nReturns the first ancestor that matches.\nReturns the first child that matches.\nReturns the first descendant that matches.\nSearch for a property set on the widget.\nReference the builder that was used to generate the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinal instance items.\nReturns <code>true</code> if the pattern includes the widget.\nReturns <code>true</code> if the pattern includes the property.\nGets the parent property that has this widget as an input.\nIterate over property items and if they are captured.\nFinal property args.\nIf the property was captured by the widget.\nIntrinsic node nest group.\nName given to this intrinsic by the widget.\nIterator over all ancestors of a widget.\nIterator over all children of a widget.\nInclude the descendant and continue filtering its …\nIterator over all next siblings of a widget.\nIterator over all next siblings of a widget.\nReversing tree iterator.\nSkip the descendant but continue filtering its descendants.\nSkip the descendant and its descendants.\nInclude the descendant but skips its descendants.\nWidget tree filter selected for a widget in the tree.\nFiltering tree iterator.\nPrimary implementer of <code>TreeIterator</code>.\nIterator that traverses the branches of a widget tree.\nNew empty iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew with a children selection.\nCheck if any item is not filtered out by a <code>TreeFilter</code> …\nCreates an iterator which uses a closure to filter items …\nGets the first item not filtered out by a <code>TreeFilter</code> …\nCreates a reverse tree iterator.\nPlaceholder for the dynamic child of an adoptive node.\nRepresents a node setup to dynamically swap child.\nA reference counted <code>UiNode</code>.\nUI node list implementation that flattens child lists.\nDefault <code>PanelList</code> associated data.\nThe <code>UiNode::deinit</code>.\nThe <code>UiNode::deinit</code>.\nRepresents an <code>UiVec</code> that can be modified using a connected …\nRepresents a sender to an <code>EditableUiVec</code>.\nThe <code>UiNode::event</code>.\nThe <code>UiNode::event</code>.\nA UI node that fills the available layout space.\nThe <code>UiNode::info</code>.\nThe <code>UiNode::info</code>.\nThe <code>UiNode::init</code>.\nThe <code>UiNode::init</code>.\nRepresents a value that can become a <code>UiNode</code> instance.\nThe <code>UiNode::layout</code>.\nThe <code>UiNode::layout</code>.\nThe <code>UiNode::layout_list</code>.\nChild node of <code>match_node</code>.\nChild node of <code>match_widget</code>.\nThe <code>UiNode::measure</code>.\nThe <code>UiNode::measure</code>.\nThe <code>UiNode::measure_list</code>.\nRepresents an <code>UiNodeListObserver</code> that applies an offset to …\nRepresents the final UI list in a panel layout node.\nRepresents an item’s associated data in a <code>PanelList</code>.\nFirst and last child widget in a <code>PanelList</code>.\nThe <code>UiNode::render</code>.\nThe <code>UiNode::render</code>.\nThe <code>UiNode::render_list</code>.\nThe <code>UiNode::render_update</code>.\nThe <code>UiNode::render_update</code>.\nThe <code>UiNode::render_update_list</code>.\nRepresents the contextual parent <code>SortingList</code> during an …\nRepresents a sorted view into an <code>UiNode::is_list</code>.\nRepresents an UI tree node instance.\nRepresents an <code>UiNode</code> implementation.\nRepresents an <code>UiNode::update_list</code> observer that can be …\nIdentifies the <code>UiNode</code> UI methods.\nRepresents a node operation in a <code>match_node</code>.\nVec of boxed UI nodes.\nThe <code>UiNode::update</code>.\nThe <code>UiNode::update</code>.\nThe <code>UiNode::update_list</code>\nWeak reference to a <code>ArcNode</code>.\nBuilds a node that can be one of multiple options, …\nExtra <code>UiNode</code> methods for nodes that define a widget …\nRepresents an <code>UiNodeImpl</code> that defines a widget instance …\nAccess to widget z-index in a parent <code>PanelList</code>.\nReturns <code>true</code> if the <code>EditableUiVec</code> still exists.\nExclusive borrow the node implementation directly.\nGets the node implementation as a <code>WidgetUiNodeImpl</code>, if the …\nGets the node implementation as a <code>WidgetUiNodeImpl</code>, if the …\nAccess widget node methods, if the node defines a widget …\nHelper for declaring state properties that are controlled …\nHelper for declaring state properties that are controlled …\nCreates a border node that delegates rendering to a …\nBuild a node that is always the first <code>true</code> condition or …\nAppend another list chain node.\nCreate a list chain node.\nCreate a list chain node.\nCreate a list node that has <code>self</code> followed by <code>other</code>.\nCreate a list chain node.\nGets the child offset to be used in the default <code>render_all</code> …\nChild offset to be used in the default <code>render_all</code> and …\nGets the current count of children nodes.\nNumber of direct descendants of this node.\nRequest a removal of all current widgets.\nCommit <code>child_offset</code> and <code>define_reference_frame</code> changes.\nCalls <code>commit</code> for each child data, aggregate changes.\nReference the associated data.\nIf a new reference frame should be created for the item …\nIf a new reference frame should be created for the item …\nDelegate <code>UiNode::deinit</code>.\nDeinitializes the node in the current UI context.\nDeinitializes the node in the current UI context.\nDeinitialize the node in the current UI context.\nFlags the current operation as <em>delegated</em>, stopping the …\nReturns some mutable reference to implementation of type <code>U</code>…\nReturns some reference to implementation of type <code>U</code>, if the …\nCreates a <code>WeakNode</code> reference to this node.\nNew reference to no list.\nGets an static string representing the enum variant …\nDelegate <code>UiNode::event</code>.\nReceives an event.\nReceives an event.\nNotify event update.\nHelper for declaring state properties that depend on a …\nHelper for declaring state properties that depend on two …\nHelper for declaring state properties that depend on three …\nHelper for declaring state properties that depend on four …\nCreate a widget node that wraps the <code>widget</code> with any number …\nTransforms and clips the <code>content</code> node according with the …\nCall <code>visitor</code> for each child node of <code>self</code>, one at a time.\nCall <code>visitor</code> for each child node of <code>self</code>, one at a time.\nCall <code>visitor</code> for each child node of <code>self</code>, one at a time.\nCall <code>visitor</code> for each child node of <code>self</code>, one at a time.\nIterate over the list in the Z order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom parts, assumes the nodes are not inited and that <code>child</code>…\nNew from list and associated data.\nNew from an already allocated vec.\nGets the index set on the <code>WIDGET</code>.\nGets the panel children if the <code>parent</code> contains the <code>panel_id</code>…\nGets the index set on the <code>widget</code>.\nIf the current operation was already delegated to the …\nGets the widget instance ID.\nDelegate <code>UiNode::info</code>.\nBuilds widget info.\nBuilds widget info.\nContinue building widget info metadata.\nGets the ID set on the parent widget info if …\nDelegate <code>UiNode::init</code>.\nInitializes the node in a new UI context.\nInitializes the node in a new UI context.\nInitialize the node in a new UI context.\nReturns a node that defines a widget context or will begin …\nBox and <code>insert</code> the node.\nRequest an update for the insertion of the <code>widget</code>.\nCalled when a node is inserted at <code>index</code>.\nCreate a node that controls interaction for all widgets …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a node that <code>is_list</code>.\nInstantiate the UI node.\nInto child reference and node.\nInto list and associated data.\nReturns a node that defines a widget context.\nCalls <code>SortingList::invalidate_sort</code> on the parent list.\nInvalidate the sort, the list will resort on the nest time …\nGets if the node is an instance of implementation <code>U</code>.\nReturns <code>true</code> if this node is inited.\nIf the current call has a parent sorting list.\nGets if the node represents a list of other nodes.\nGets if the node represents a list of other nodes.\nGets if the node represents a list of other nodes.\nGets if is <code>nil</code>.\nReturns true if this observer does not use the item …\nDelegate <code>UiNode::layout</code>.\nComputes the widget layout given the contextual layout …\nComputes the widget layout given the contextual layout …\nUpdate node layout.\nDelegate <code>UiNode::layout_list</code>.\nCall <code>layout</code> for each node with associated data and …\nIf the node <code>is_list</code> layout each child and combine the size …\nIf the node <code>is_list</code> layout each child and combine the size …\nIf the node <code>is_list</code> layout each child and combine the size …\nMutable borrow the inner list.\nNode list that presents <code>list</code> using <code>item_fn</code> for each new …\nNode list that presents <code>list</code> using <code>item_fn</code> for each list …\nCreates a node that is implemented as a closure that …\nCreates a node that is implemented as a closure that …\nCreates a widget that is implemented as a closure that …\nDelegate <code>UiNode::measure</code>.\nComputes the widget size given the contextual layout …\nComputes the widget size given the contextual layout …\nEstimate node layout without actually updating the node …\nDelegate <code>UiNode::measure_list</code>.\nCall <code>measure</code> for each node with associated data and …\nIf the node <code>is_list</code> measure each child and combine the …\nIf the node <code>is_list</code> measure each child and combine the …\nIf the node <code>is_list</code> measure each child and combine the …\nRequest a widget move, the widget is searched by <code>id</code>, if …\nRequest a widget remove and re-insert.\nCalled when a node is removed from <code>removed_index</code> and …\nGets the operation without the associated data.\nGets an static string representing the method name …\nCreate the adoptive node, the <code>AdoptiveChildNode</code> must be …\nNew node.\nNew with node that is used when no condition is active.\nNew from list and sort function.\nNew default empty.\nNew from <code>list</code> and default data.\nNew UI node instance from implementation.\nNew default.\nNew from <code>list</code> and custom data type.\nNew node that contains a weak reference to itself.\nNew UI node that does nothing and collapses layout.\nBorrow the actual child.\nBorrow the actual child implementation.\nKey used to define reference frames for each item.\nDelegate <code>UiNode::op</code>.\nCalls the <code>UiNodeOp</code>.\nCalls <code>visitor</code> for each child node in parallel.\nCalls <code>visitor</code> for each child node in parallel.\nCalls <code>visitor</code> for each child node in parallel.\nCalls <code>visitor</code> for each child node in parallel.\nCalls <code>fold</code> for each child node with associated data in …\nCalls <code>fold</code> for each child node in parallel, with fold …\nCalls <code>fold</code> for each child node in parallel, with fold …\nCalls <code>fold</code> for each child node in parallel, with fold …\nGets if this node is a good candidate for parallelization …\nNode that presents <code>data</code> using <code>wgt_fn</code>.\nNode that presents <code>data</code> using <code>wgt_fn</code> if data is available, …\nPush a conditional node.\nBox and <code>push</code> the node.\nRequest an update for the insertion of the <code>widget</code> at the …\nReborrow the op.\nCreate a sender that can edit this list.\nRequest an update for the removal of the widget identified …\nCalled when a node is removed from <code>index</code>.\nDelegate <code>UiNode::render</code>.\nGenerates render instructions and updates transforms and …\nGenerates render instructions and updates transforms and …\nCollect render instructions for a new frame.\nDelegate <code>UiNode::render_list</code>.\nCall <code>render</code> for each node with associated data.\nIf the node <code>is_list</code> render each child.\nIf the node <code>is_list</code> render each child.\nIf the node <code>is_list</code> render each child.\nDelegate <code>UiNode::render_update</code>.\nUpdates values in the last generated frame.\nUpdates values in the last generated frame.\nCollect render patches to apply to the previous frame.\nDelegate <code>UiNode::render_update_list</code>.\nCall <code>render_update</code> for each node with associated data.\nIf the node <code>is_list</code> render_update each child.\nIf the node <code>is_list</code> render_update each child.\nIf the node <code>is_list</code> render_update each child.\nReplaces the child node.\nCalled when large or unspecified changes happen to the …\nRequest a filtered mass removal of nodes in the list.\nReplace the current node with the <code>new_node</code> in the current …\nTry set the z-index in the current <code>WIDGET</code>.\nCreate a sorting list view for this node into list.\nCreate a slot node that takes ownership of this node when …\nCreate a slot node that takes ownership of this node as …\nCreate a slot node that takes ownership of this node when …\nWraps this in a node that, before delegating each method, …\nEnable tracking the first and last child in the parent …\nCalls <code>visitor</code> in the widget context of the node, if it is …\nCall <code>visitor</code> for each child node of <code>self</code>, one at a time, …\nCall <code>visitor</code> for each child node of <code>self</code>, one at a time, …\nCall <code>visitor</code> for each child node of <code>self</code>, one at a time, …\nCall <code>visitor</code> for each child node of <code>self</code>, one at a time, …\nCreate the adoptive node using a closure that can fail.\nCall <code>visitor</code> on a exclusive lock of the node.\nCall <code>visitor</code> with a exclusive reference to the child node …\nCreates an <code>UiVec</code> containing the arguments.\nDelegate <code>UiNode::update</code>.\nReceives variable and other non-event updates.\nReceives variable and other non-event updates.\nNotify non-event update.\nGets the panel children if it may have changed since …\nDelegate <code>UiNode::update_list</code>.\nDoes <code>update</code> and if the node is a list notifies list …\nDoes <code>update</code> and if the node is a list notifies list …\nNotify non-event update and observe list changes if the …\nAttempts to upgrade to a <code>ArcNode</code>.\nHelper for declaring state getter properties that are …\nHelper for declaring state properties that are controlled …\nNew <code>with_capacity</code>.\nVisit a child node by <code>index</code>. If the index is not valid …\nCall <code>visitor</code> with a exclusive reference to the child node …\nCall <code>visitor</code> with a exclusive reference to the child node …\nCalls <code>visitor</code> with the <code>WIDGET</code> context of the widget …\nCalls <code>visitor</code> with the <code>WIDGET</code> context of the widget …\nHelper for declaring widgets that are recontextualized to …\nHelper for declaring nodes that sets a context local value.\nHelper for declaring nodes that sets a context local value …\nHelper for declaring properties that sets a context var.\nHelper for declaring properties that sets a context var to …\nHelper for a property that gets the index of the widget in …\nHelper for a property that gets the index of the widget in …\nHelper for a property that gets the reverse index of the …\nHelper for declaring properties that set the widget state.\nHelper for declaring properties that set the widget state …\nGets the <code>index</code> sorted in the <code>list</code>.\nReturn value, the widget’s desired size after measure.\nReturn value, the widget’s final size after layout.\nFrame builder.\nInfo builder.\nEvent update args and targets.\nFame updater.\nUpdate targets\nLayout pass state.\nMeasure pass state.\nAll subsequent frames rendered will be captured and …\nAll subsequent frames rendered will be captured and …\nExtension trait, adds <code>run_window</code> to <code>AppExtended</code>.\nWindow auto-size config.\nDefines if a widget load affects the parent window load.\nClose button.\nUses the content desired width and height.\nUses the content desired height.\nUses the content desired width.\nOperation canceled, no window closed.\nCentralizes the window in the monitor screen, defined by …\nCentralizes the window in the parent window, defined by …\nResponse message of <code>close</code> and <code>close_together</code>.\nOperation completed, all requested windows closed.\nActivate critical focus request.\nDoes not automatically adjust size.\nPrefer the best dedicated GPU, probably the best …\nResolves to <code>position</code>.\nThe operating system’s default icon.\nWidget does not hold back window load.\nWindows can handle event updates in parallel.\nWidget requests a <code>WindowLoadingHandle</code> and retains it until …\nWindow has exclusive access to the monitor’s video …\nA window frame has finished rendering.\nAllow fullscreen windowed or exclusive video.\nEnable fullscreen, but only windowed not exclusive video.\nRepresents a focus request indicator.\nFrame image capture mode in a window.\n<code>FRAME_IMAGE_READY_EVENT</code> args.\nWindow is chromeless and completely fills the screen, …\nNormal mode, shows a system window with content rendered.\nHeadless mode, no system window and no renderer. The …\nWindow extension methods for <code>HeadlessApp</code>.\n“Monitor” configuration used by windows in headless …\nHeadless mode, no visible system window but with a …\nInput Method Editor event targeting a text input widget.\nImage is requested from <code>IMAGES</code>.\nArguments for <code>IME_EVENT</code>.\nActivate informational focus request.\nPrefer the integrated GPU (provided by the CPU), probably …\nWindows can layout in parallel.\nDefault value, matches with the largest size, greatest …\nEnable maximize.\nMaximize/restore button.\nEnable minimize.\nMinimize button.\nMonitors service.\nMonitors added, removed or modified event.\nWindow fills the screen, but not the parts reserved by the …\nWindow is only visible as an icon in the taskbar.\nUnique identifier of a monitor screen.\nAll information about a monitor that <code>MONITORS</code> can provide.\nA selector that returns a <code>MonitorInfo</code>.\n<code>MONITORS_CHANGED_EVENT</code> args.\nThe next rendered frame will be captured and available in …\nThe next rendered frame will be captured and available in …\nWindow is visible, but does not fill the screen.\nDefines what window operations can run in parallel, …\nThe parent window monitor, or <code>Primary</code> if the window has no …\nThe primary monitor, if there is any monitor.\nCustom query closure.\nWindows with pending render or render update generate …\nRender backend preference.\nUse a software render fallback, this has the best …\nFrames are not automatically captured, but you can use …\nWindow startup position.\nWindows can init, deinit, update and rebuild info in …\nExclusive video mode info.\nCurrent context window.\nWindows service.\nWindow moved, resized or other state changed.\nWindow closed event.\nWindow close requested event.\nExtensions methods for <code>WINDOW</code> contexts of windows open by …\nWindow finished loading and has opened in the view-process.\nNew window has inited.\nIME extension methods for <code>WidgetInfoBuilder</code>.\nIME extension methods for <code>WidgetInfo</code>.\nW  A window container.\nW  A window container.\nWindow chrome buttons.\n<code>WINDOW_CHANGED_EVENT</code> args.\n<code>WINDOW_CLOSE_EVENT</code> args.\n<code>WINDOW_CLOSE_REQUESTED_EVENT</code> args.\nWindow icon.\nUnique identifier of an open window.\nRepresents a handle that stops the window from loading …\nMode of an open window.\n<code>WINDOW_OPEN_EVENT</code> args.\nWindow root node and values.\nArguments for <code>WINDOWS.register_root_extender</code>.\nWindow state.\nMask of allowed <code>WindowState</code> states of a window.\nVariables that configure the opening or open window.\nOverride the preferred accent color.\nP Binds the <code>accent_color</code> window var with the property …\nIf an accessibility service has requested info from this …\nActual accent color to use.\nActual color scheme to use.\nWindow custom cursor image.\nWindow icon image.\nCurrent monitor hosting the window.\nWindow actual position on the monitor.\nWindow actual size on the screen.\nWindow <code>actual_size</code>, converted to pixels given the …\nAdded monitors.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nc  If semi-transparent content is see-through, mixing with …\nDefines if the window should always stay on top of other …\nP Binds the <code>always_on_top</code> window var with the property …\nDefines if and how the window size is controlled by the …\nP Binds the <code>auto_size</code> window var with the property value.\nThe point in the window content that does not move when …\nP Binds the <code>auto_size_origin</code> window var with the property …\nList all available monitors.\nThe bit depth of this video mode. This is generally 24 …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.")