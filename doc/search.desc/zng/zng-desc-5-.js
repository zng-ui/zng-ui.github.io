searchState.loadedDescShard("zng", 5, "P Preview <code>on_window_minimized</code> event.\nP Preview <code>on_window_minimized</code> event.\nP Preview <code>on_window_moved</code> event.\nP Preview <code>on_window_moved</code> event.\nP Preview <code>on_window_open</code> event.\nP Preview <code>on_window_open</code> event.\nP Preview <code>on_window_resized</code> event.\nP Preview <code>on_window_resized</code> event.\nP Preview <code>on_window_restored</code> event.\nP Preview <code>on_window_restored</code> event.\nP Preview <code>on_window_state_changed</code> event.\nP Preview <code>on_window_state_changed</code> event.\nP Preview <code>on_window_unmaximized</code> event.\nP Preview <code>on_window_unmaximized</code> event.\nP Preview <code>on_window_unminimized</code> event.\nP Preview <code>on_window_unminimized</code> event.\nP  On window size changed.\nP  On window state changed to <code>Normal</code>.\nP  On window state changed.\nP  On window exited the maximized state.\nP  On window exited the minimized state.\nP  On window moved, resized or other state changed.\nP  On window moved, resized or other state changed.\nP  On window close requested.\nP  On window close requested.\nP  On window state changed from <code>WindowState::is_fullscreen</code>.\nP  On window state changed from <code>WindowState::is_fullscreen</code>.\nP  On window state changed to <code>WindowState::is_fullscreen</code>.\nP  On window state changed to <code>WindowState::is_fullscreen</code>.\nP  On window loaded.\nP  On window loaded.\nP  On window state changed to <code>WindowState::Maximized</code>.\nP  On window state changed to <code>WindowState::Maximized</code>.\nP  On window state changed to <code>WindowState::Minimized</code>.\nP  On window state changed to <code>WindowState::Minimized</code>.\nP  On window position changed.\nP  On window position changed.\nP  On window opened.\nP  On window opened.\nP  On window size changed.\nP  On window size changed.\nP  On window state changed to <code>WindowState::Normal</code>.\nP  On window state changed to <code>WindowState::Normal</code>.\nP  On window state changed.\nP  On window state changed.\nP  On window state changed from <code>WindowState::Maximized</code>.\nP  On window state changed from <code>WindowState::Maximized</code>.\nP  On window state changed from <code>WindowState::Minimized</code>.\nP  On window state changed from <code>WindowState::Minimized</code>.\nRequests a new window.\nRequests a new headless window.\nRequests a new headless window with pre-defined ID.\nRequests a new window with pre-defined ID.\nOpen a new headless window and returns the new window ID.\nDefines what window operations can run in parallel, …\nDefines the parent window.\nP Binds the <code>parent</code> window var with the property value.\nTop-left offset of the monitor region in the virtual …\nWindow top-left offset on the <code>monitor</code> when the window is …\nP Binds the <code>position</code> window var with the property value.\nNew window position if it was moved.\nPixel-per-inch config var.\nPixel-per-inches used for the headless layout and …\nP  Gets if <code>WINDOWS.system_chrome</code> prefers custom chrome.\nReturns the previous window state if it has changed.\nCaret/selection within the <code>txt</code> when it is preview.\nGets the monitor info marked as primary.\nGets the monitor area in pixels.\nThe refresh rate of this video mode, in millihertz.\nRegister the closure <code>handler</code> to be called for every new …\nRegister the closure <code>extender</code> to be called with the root …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoved monitors.\nNew window icon from a closure that generates a new icon …\nWindow actual render mode.\nc  Render performance mode overwrite for this window, if …\nRequire the window state <code>id</code>.\nDefines if the user can resize the window using the window …\nP Binds the <code>resizable</code> window var with the property value.\nWindow restore position and size when restoring to <code>Normal</code>.\nWindow restore state.\nThe window root content, extender must wrap this node with …\nRuns the application event loop and requests a new window.\nOpen a new headless window and update the app until the …\nPadding that must be applied to the window content so that …\nP  Save and restore the window state.\nThe monitor scale factor.\nCurrent scale factor of the current monitor hosting the …\nThe scale factor used for the headless layout and …\nRuns the query.\nRuns the query. Falls back to <code>Primary</code>, or the largest or …\nUn-scramble the underlying value to get the original …\nUn-scramble the underlying value to get the original …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet a custom <code>ime_area</code>.\nAssociate a <code>name</code> with the ID, if it is not named.\nSet the window state <code>id</code> to <code>value</code>.\nSet test window <code>size</code>.\nWidth/height of the monitor region in the virtual screen, …\nWindow width and height on the screen when the window is …\nP Binds the <code>size</code> window var with the property value.\nNew window size if it was resized.\nSize of the imaginary monitor screen that contains the …\nResolution of this video mode.\nc  If the window is steals keyboard focus on open.\nc  Defines how the window is positioned when it first …\nWindow screen state.\nP Binds the <code>state</code> window var with the property value.\nWindow state change, if it has changed the values are …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nVariable that tracks the OS window manager configuration …\nAttempt to set a system wide shutdown warning associated …\nThe enabled text input widget.\nDefines if the window is visible in the task-bar.\nP Binds the <code>taskbar_visible</code> window var with the property …\nCall inside <code>with_test_context</code> to deinit the <code>content</code> as a …\nCall inside <code>with_test_context</code> to delivery an event to the …\nCall inside <code>with_test_context</code> to rebuild info the <code>content</code> …\nCall inside <code>with_test_context</code> to init the <code>content</code> as a …\nCall inside <code>with_test_context</code> to layout the <code>content</code> as a …\nCall inside <code>with_test_context</code> to layout the <code>content</code> as a …\nCall inside <code>with_test_context</code> to render the <code>content</code> as a …\nCall inside <code>with_test_context</code> to render_update the <code>content</code> …\nCall inside <code>with_test_context</code> to update the <code>content</code> as a …\nGet the test window size.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nWindow title text.\nP Binds the <code>title</code> window var with the property value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets the window ID, if called inside a window.\nThe text, preview or actual insert.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a shared reference the variables that control the …\nClone a reference to the variables that get and set window …\nVideo mode for exclusive fullscreen.\nExclusive fullscreen video modes.\nAvailable video modes in the current monitor.\nAdd a view-process extension payload to the window request …\nCall a render extension with serialized payload for the …\nCall a view-process render extension with custom encoded …\nCall a headed window extension with serialized payload.\nCall a view-process headed window extension with custom …\nDefines if the window is visible on the screen and in the …\nP Binds the <code>visible</code> window var with the property value.\nWait until the window is loaded or closed.\nBuild a <code>WindowRoot</code>.\nSearch for the widget info in all windows.\nStart building a new instance.\nReturns a shared reference to the latest widget tree info …\nReturns shared references to the widget trees of each open …\nGets the widget type info.\nP Binds the <code>width</code> of the <code>size</code> window var with the property …\nCopy the current frame pixels of the window.\nId of window that has opened.\nWindow that has moved, resized or has a state change.\nWindow ID.\nIDs of windows that have closed.\nWindows closing, headed and headless.\nCalls <code>f</code> while the window is set to <code>ctx</code>.\nReturns <code>self</code> plus <code>fallbacks</code>.\nCalls <code>f</code> while no window is available in the context.\nCalls <code>f</code> with a read lock on the current window state map.\nCalls <code>f</code> with a write lock on the current window state map.\nCalls <code>f</code> inside a new headless window and root widget.\nP Binds the <code>x</code> of the <code>position</code> window var with the property …\nP Binds the <code>y</code> of the <code>position</code> window var with the property …\nHandle expiration deadline, if the widget takes longer …\nAll directions.\nRepresents the <strong>close IME</strong> action.\nRepresents the window <strong>close</strong> action.\nRepresents the window <strong>drag-move</strong> and <strong>drag-resize</strong> actions.\nRepresents the window <strong>toggle fullscreen</strong> action.\nThe east border will be moved.\nRepresents the window <strong>toggle fullscreen</strong> action.\nRepresent the window <strong>inspect</strong> action.\nRepresents the window <strong>maximize</strong> action.\nRepresents the window <strong>minimize</strong> action.\nThe north border will be moved.\nThe north-east corner will be moved.\nThe north-west corner will be moved.\nRepresents the window <strong>open title bar context menu</strong> action.\nRepresents the window <strong>restore</strong> action.\nDefines the orientation that a window resize will be …\nThe south border will be moved.\nThe south-east corner will be moved.\nThe south-west corner will be moved.\nThe west border will be moved.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets if this resize represents a single direction.\nGets if this resize represents two directions.\nDisable inspection.\nTarget of inspection properties.\nJust the widget where the inspector property is set.\nThe widget where the inspector property is set and all …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nP  Draws a border for every target widget’s outer and …\nP  Draws a border for every target widget’s outer and …\nP  Draws a debug dot in target widget’s center point.\nP  Draws a debug dot in target widget’s center point.\nP  Draw the directional query for closest sibling of the …\nP  Draw the directional query for closest sibling of the …\nP  Draws the inner bounds that where tested for the mouse …\nP  Draws the inner bounds that where tested for the mouse …\nP  Draws a border over every inlined widget row in the …\nP  Draws a border over every inlined widget row in the …\nExtension methods for <code>WidgetInfo</code> that may represent a <code>Wrap!</code>…\nW  Wrapping inline layout.\nW  Wrapping inline layout.\nc  Inlined wrap items.\nc  Children align.\nReturns the argument unchanged.\nP  Get the child index in the parent wrap.\nP  Get the child index in the parent wrap.\nP  Get the child index and number of children.\nP  Get the child index and number of children.\nP  Get the child index, starting from the last child at <code>0</code>.\nP  Get the child index, starting from the last child at <code>0</code>.\nCalls <code>U::from(self)</code>.\nP  If the child index is even.\nP  If the child index is even.\nP  If the child is the first.\nP  If the child is the first.\nP  If the child is the last.\nP  If the child is the last.\nP  If the child index is odd.\nP  If the child index is odd.\nCreate a node that estimates the size of wrap panel …\nCreate a node that estimates the size of wrap panel …\nP  Space in between rows of this widget and of nested wrap …\nWrap node.\nc  Space in between items and rows.\nP  Alignment of children in this widget and of nested wrap …\nStart building a new instance.\nGets the widget type info.\nGets the wrap children, if this widget is a <code>Wrap!</code> instance.")