searchState.loadedDescShard("zng", 2, "Physical key.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nIf the key was pressed or released.\nInstant the event happened.\nInstant the event happened.\nResource failed to load.\nLocalization service.\nRepresents an argument value for a localization message.\nRepresents localization resources synchronized from files …\nLocalized message variable builder.\nRepresents a localization data source.\nRepresents localization resources loaded from a <code>.tar</code> or …\nLanguage of text in a widget context.\nIdentifies the language, region and script of text.\nLocalization resource file path in the localization …\nRepresents a map of <code>Lang</code> keys that can be partially …\nHandle to a localization resource.\nStatus of a localization resource.\nHandle to multiple localization resources.\nList of languages, in priority order.\nResource loaded ok.\nResource is loading.\nLocalization source that is never available.\nResource not available.\nNumber, with optional style details.\nRepresents localization source that can swap the actual …\nString.\nGets a read-write variable that sets the preferred …\nAdd a format arg variable.\nGets a read-only variable with all lang files that the …\nAvailable localization files.\nGets a read-only variable that is the status of the …\nStatus of the <code>available_langs</code> list.\nThe first lang on the list or <code>und</code> if the list is empty.\nReturns the best match to <code>lang</code> and <code>file</code> currently in the …\nReturns the best match to <code>lang</code> currently in the map.\nBind the command metadata to a message.\nBuild the message var for the contextual language.\nBuild the message var for the given languages.\nRemove all entries.\nGets a file in the current app.\nReturns character direction of the language.\nGets the normalized file name.\nThe file name.\nBorrow argument as a fluent value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the best match for <code>lang</code>.\nReturns the exact match for <code>lang</code>.\nReturns the exact match for <code>lang</code>.\nReturns the current value or insert <code>new</code> and return a …\nReturns the match for <code>lang</code> and <code>file</code>.\nReturns the best match for <code>lang</code>.\nInsert the value with the exact match of <code>lang</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto iterator of values.\nGets if this file is in the <code>current_app</code> resources, or the …\nReturns if the map is empty.\nIterate over key-value pairs.\nIterate over key-value pairs with mutable values.\nIterator over lang keys.\n Gets a variable that localizes and formats the text in a …\n Compile-time validated <code>Lang</code> value.\nGets a read-only variable that provides the fluent …\nGets a handle to the lang file resource.\nGets a read-only variable that is the status of the …\nReturns the number of languages in the map.\nSwaps the backend source with <code>source</code>.\nLoad from TAR data.\nChange the localization resources to <code>source</code>.\nStart watching the <code>dir</code> for <code>dir/{lang}/*.ftl</code> and …\nLoad localization resources from a <code>.tar</code> or <code>.tar.gz</code> …\nCompares a language to another allowing for either side to …\nGets a value that indicates if the resources represented …\nGets a read-only variable that is a localized message in …\nNew with <code>NilL10nSource</code>.\nNew empty default.\nNew from package name, version and file.\nStart watching the <code>dir</code> for localization files.\nDrop all handles without dropping the resource.\nDrop the handle without unloading the resource.\nGets the normalized package name.\nPackage name.\nGets the normalized package version.\nPackage version.\nRemove the last inserted lang.\nRemove the exact match of <code>lang</code>.\nRemove all exact and partial matches of <code>lang</code>.\nRead-only variable with the resource.\nRead-only variable with the resource status.\nGets a read-only variable that is the current system …\nClone argument as a fluent value.\nGet the file path, relative to the localization dir.\nIterator over values.\nIterator over values.\nWait for all the resources to load.\nAwait resource status to not be loading.\nWaits until <code>available_langs_status</code> is not <code>Loading</code>.\nGets a handle to all resource files of the first lang in …\nGets a handle to all resource files for the <code>lang</code> after …\nNew empty with pre-allocated capacity.\nW  Default label style.\nW  Default label style.\nW  Styleable and focusable read-only text widget.\nW  Styleable and focusable read-only text widget.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nP  Defines the widget the label is for.\nStart building a new instance.\nStart building a new instance.\nGets the widget type info.\nGets the widget type info.\nThe layer for <em>adorner</em> display items.\nDefines what properties the layered widget takes from the …\nRepresents two points that position a layer widget with …\nOptions for <code>AnchorMode</code> size constraints.\nOptions for <code>AnchorMode::transform</code>.\nThe layer widget is translated to follow the cursor …\nThe layer widget is translated on the first layout to be …\nThe default layer, just above the normal window content.\nThe available size and final size is the anchor widget’s …\nThe layer widget is translated so that a point in the …\nThe full inner transform of the anchor object is applied …\nThe layer widget is translated so that a point in the …\nThe available size and final size is the anchor widget’s …\nThe full inner transform of the anchor object is applied …\nWindows layers.\nInsert a layer widget on the scoped window.\nRemove a layer widget on the scoped window.\nRepresents a layer in a window.\nWidget does not copy any position from the anchor widget.\nThe layer widget is translated so that a point in the …\nThe available size and final size is the anchor widget’s …\nThe full outer transform of the anchor object is applied …\nThe top-most layer.\nWidget does not copy any size from the anchor widget, the …\nWidget does not copy any size from the anchor widget, the …\nP  Custom layered foreground.\nP  Custom layered foreground.\nP  Custom layered foreground generated using a <code>WidgetFn&lt;()&gt;</code>…\nP  Custom layered foreground generated using a <code>WidgetFn&lt;()&gt;</code>…\nGets a read-only var that tracks the anchor widget in a …\nLayer widget is centered on the anchor widget.\nMode where the widget behaves like a context-menu anchored …\nMode where the widget behaves like a context-menu anchored …\nThe widget’s corner radius is set for the layer.\nTransform <code>InnerOffset</code> top-left, size infinite, copy …\nMode where the widget behaves like a <code>foreground</code> to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>(place, origin)</code>.\nReturns the argument unchanged.\n<code>InnerOffset</code>.\n<code>InnerOffset</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCustom transform and size, all else default.\nCustom transform, all else default.\nReturns the argument unchanged.\nTransform <code>InnerOffset</code>, all else default.\nLayer widget is horizontally centered on the anchor widget …\nLayer widget bottom-left corner aligns with the anchor …\nLayer widget bottom-right corner aligns with the anchor …\nLayer widget is vertically centered on the anchor widget …\nLayer widget is vertically centered on the anchor widget …\nLayer widget is horizontally centered on the anchor widget …\nLayer widget top-left corner aligns with the anchor widget …\nLayer widget top-right corner aligns with the anchor …\nInsert the <code>widget</code> in the layer identified by a <code>LayerIndex</code>.\nInsert the <code>widget</code> in the layer and <em>anchor</em> it to the …\nLike <code>insert_anchored</code>, but does not fail if <code>maybe_widget</code> is …\nLike <code>insert</code>, but does not fail if <code>maybe_widget</code> is not a …\nThe widget <code>interactivity</code> is set to the same as the anchor …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>InnerOffset</code>.\nTransform <code>InnerOffset</code>, all else default.\nCustom transform, all else default.\nWhat size is copied from the anchor widget and used as the …\nWhat size is copied from the anchor widget and used as the …\nGets the const name of this value.\nNew place and origin points from same <code>point</code>.\nPoint in the layer widget.\nLayer widget is horizontally centered on the anchor widget …\nLayer widget top-left corner aligns with anchor widget …\nLayer widget top-right corner aligns with anchor widget …\nLayer widget top-right corner aligns with anchor widget …\nLayer widget bottom-right corner aligns with anchor widget …\nLayer widget is vertically centered on the anchor widget …\nLayer widget bottom-right corner aligns with anchor widget …\nLayer widget top-right corner aligns with anchor widget …\nLayer widget is vertically centered on the anchor widget …\nLayer widget bottom-left corner aligns with anchor widget …\nLayer widget top-left corner aligns with anchor widget …\nLayer widget is horizontally centered on the anchor widget …\nLayer widget bottom-left corner aligns with anchor widget …\nLayer widget bottom-right corner aligns with anchor widget …\nLayer widget bottom-right corner aligns with anchor widget …\nLayer widget bottom-left corner aligns with anchor widget …\nPoint in the anchor widget.\nMode where widget behaves like a flyout menu for the …\nRemove the widget in the next update.\nRemove the widget in the next update.\nCompute <code>self + other</code> saturating at the <code>TOP_MOST</code> bound …\nCompute <code>self - other</code> saturating at the <code>DEFAULT</code> bound …\nMode where the widget behaves like a tooltip anchored to …\nMode where the widget behaves like a tooltip anchored to …\nWhat transforms are copied from the anchor widget and …\nAfter the <code>transform</code> and <code>size</code> are resolved the transform is …\nIf the widget is only layout if the anchor widget is not …\nMode where widget behaves like an unanchored widget, …\nReturns the mode with <code>corner_radius</code> set.\nReturns the mode with <code>interactivity</code> set.\nReturns the mode with <code>max_size</code> set.\nReturns the mode with <code>min_size</code> set.\nReturns the mode with <code>min_size</code> and <code>max_size</code> set.\nReturns the mode with <code>transform</code> set.\nReturns the mode with <code>viewport_bound</code> set.\nReturns the mode with <code>visibility</code> set.\nIf set defines the offset from the anchor widget inner …\nIf set defines the offset from the anchor widget inner …\nIf the latest touch position counts as a cursor.\nIf the latest touch position counts as a cursor.\nThe anchor offset place point is resolved in the cursor …\nThe anchor offset place point is resolved in the cursor …\nPoint is above the origin.\nComputes the absolute layout length.\nSums the both layout length.\n<code>x</code> and <code>y</code> alignment.\nWidget does inline if requested by the parent widget …\nAngle in degrees.\nAngle in gradians.\nAngle in radians.\nAngle in turns (complete rotations).\nExtension methods for initializing angle units.\nAny strong right-to-left (Arabic-type) character.\nAny Arabic-Indic digit.\n<code>Self</code> equivalent in <code>Dip</code> units.\n<code>Self</code> equivalent in <code>Px</code> units.\n(f32::INFINITY, f32::NEG_INFINITY)\n(0.5, f32::NEG_INFINITY)\n(1.0, f32::NEG_INFINITY)\n(0.0, f32::NEG_INFINITY)\n(1.0, f32::NEG_INFINITY)\n(0.0, f32::NEG_INFINITY)\n(0.5, 1.0)\n(1.0, 1.0)\n(0.0, 1.0)\n(1.0, 1.0)\n(0.0, 1.0)\nPoint is below the origin.\nBidi control character.\nWidget disables inline.\nA 2d vector of booleans, useful for component-wise logic …\nMost format characters, control codes, or non-characters.\nOpen or close bidi bracket.\nA length in bytes.\nExtension methods for initializing <code>ByteLength</code> values.\n(0.5, 0.5)\nThe <code>LayoutMetrics::constraints</code>, …\nCommas, colons, and slashes.\nEllipses that define the radius of the four corners of a …\nThe <code>default_value</code>.\nThe <code>LayoutMetrics::direction</code>.\nWrap direction of text in a widget context.\nEvaluates to <code>PxConstraints2d::fill_size</code> when measured, can …\nThe default (initial) value.\nDevice independent pixel.\nThe exact length in device independent units.\nA rectangle box in device independent pixels.\nCorner-radius in device independent pixels.\nThe exact length in device independent units, defined …\nA point in device independent pixels.\nA rectangle in device independent pixels.\nSide-offsets in device independent pixels.\nA size in device pixels.\nConversion from <code>Dip</code> to <code>Px</code> units.\nA vector in device independent pixels.\nComparable key that represents the absolute distance …\nDivide the layout length by the factor.\n(1.0, 0.5)\nRelative to the font-size of the widget.\nEmoji chars, components and zero-width-joiner between …\nAny ASCII digit or Eastern Arabic-Indic digit.\nPlus and minus signs.\nA terminator in a numeric format context, includes …\nAny of the other <code>Length</code> kinds. All contextual metrics …\nExpression.\n(f32::INFINITY, f32::INFINITY)\n(f32::INFINITY, 1.0)\n(1.0, f32::INFINITY)\n(0.0, f32::INFINITY)\n(1.0, f32::INFINITY)\n(0.0, f32::INFINITY)\n(f32::INFINITY, 0.0)\n(f32::INFINITY, 0.5)\n(0.5, f32::INFINITY)\nThe <code>LayoutMetrics::font_size</code>.\nNormalized multiplication factor.\nRelative to the fill length.\nScale factor applied to <em><strong>x</strong></em> and <em><strong>y</strong></em> dimensions.\nMultiplication factor in percentage (0%-100%).\nScale factor applied to margins.\nExtension methods for initializing factor units.\nWidget is not a part of the 3D space of the parent. If it …\nSpacing in-between grid cells in <code>Length</code> units.\nWidget always does inline.\nConstraints for inline measure or layout.\nConstraints for inline layout.\nConstraints for inline measure.\nInline mode explicitly selected for a widget.\nRepresents a segment in an inlined widget first or last …\nPosition of an inline segment set by the inlining parent.\nCurrent layout context.\n(0.0, 0.5)\nThe <code>LayoutMetrics::leftover</code>.\nleft-to-right.\nConstraints the layout pass.\nRepresents a one-dimensional length value that can be …\nRepresents a two-dimensional value that can be converted …\nRepresents a layout dimension.\nDefines the layout flow direction.\nMask of values that can affect the layout operation of a …\nLayout metrics in a <code>LAYOUT</code> context.\nLayout metrics snapshot.\nIdentifies the layout pass of a window.\nPoint is to the left of the origin.\nAny strong left-to-right character.\nThe <code>Length::Leftover</code> value. Evaluates to the …\nRelative to the leftover fill length.\n1D length units.\nRepresents an unresolved <code>Length</code> expression.\nExtension methods for initializing <code>Length</code> units.\nLinear interpolate between lengths by factor.\n2D line in <code>Length</code> units.\nVarious newline characters.\nBuild a <code>Line</code> using the syntax <code>(x1, y1).to(x2, y2)</code>.\nMaximum representable byte length.\nMaximum distance.\n<code>i32::MAX</code>.\nMaximum DIP value.\nMinimum distance.\n<code>i32::MIN</code>.\nMinimum DIP value.\nMaximum layout length.\nConstraints for the measure pass.\nMinimum layout length.\nMultiplies the layout length by the factor.\nValue that is always greater than any distance key.\nValue that is always smaller than any distance key.\nNegate the layout length.\nAny non-spacing mark.\nSimple offset.\nOrientation of two 2D items.\nMost other symbols and punctuation marks.\n2D point in <code>Length</code> units.\nPixels-per-inch resolution.\nPixels-per-meter resolution.\nWidget is a part of the 3D space of the parent. If it has …\nThe exact length in font points.\nDevice pixel.\nThe exact length in device pixel units.\nPixel type.\nA rectangle box in device pixels.\nPixel length constraints.\nPixel <em>size</em> constraints.\nCorner-radius in device pixels.\nThe exact length in device pixel units, defined using a <code>f32</code>…\nComputed <code>GridSpacing</code>.\nComputed <code>Line</code>.\nA point in device pixels.\nA rectangle in device pixels.\nSide-offsets in device pixels.\nA size in device pixels.\nConversion from <code>Px</code> to <code>Dip</code> units.\nA transform in device pixels.\nA vector in device pixels.\n(1.0, 0.5)\nThe <code>LayoutMetrics::root_font_size</code>.\nRight-to-left.\n2D rect in <code>Length</code> units.\nBuild a <code>Rect</code> using the syntax <code>(width, height).at(x, y)</code>.\nExtension methods for initializing resolution units.\nPoint is to the right of the origin.\nAny strong right-to-left (non-Arabic-type) character.\nRelative to the font-size of the root widget.\nThe <code>LayoutMetrics::scale_factor</code>.\nThe <code>LayoutMetrics::screen_ppi</code>.\n(0.0, 0.5)\n2D size offsets in <code>Length</code> units.\nA group of 2D side offsets, which correspond to …\n2D size in <code>Length</code> units.\nSpaces.\nSubtracts the first layout length from the second.\n(0.5, 0.0)\n(1.0, 0.0)\n(0.0, 0.0)\n(1.0, 0.0)\n(0.0, 0.0)\nA sequence of <code>&#39;\\t&#39;, &#39;\\v&#39;</code> or <code>&#39;\\u{1F}&#39;</code>.\nThe type of an inline/text segment.\nExtension methods for initializing <code>Duration</code> values.\nA transform builder type.\nFull transform.\nDefines if a widget is part of the same 3D space as the …\nThe <code>LayoutMetrics::viewport</code>.\n2D vector in <code>Length</code> units.\nRelative to the height of the nearest viewport ancestor.\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the width of the nearest viewport ancestor.\nExact size property info.\nRepresents the in-progress layout pass for a widget tree.\nRepresents the width or height property value set on a …\nRepresents the in-progress measure pass for a widget tree.\nHorizontal.\nVertical.\nDepth.\nComputes the absolute value of self.\nComputes the saturating absolute value of <code>self</code>.\nComputes the saturating absolute value of <code>self</code>.\nComputes the absolute value of x and y.\nReturns a length that computes the absolute layout length …\nReturns a vector that computes the absolute layout vector …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nP  Getter property, gets the latest rendered widget inner …\nCompute a <code>LayoutMask</code> that flags all contextual values that …\nCompute a <code>LayoutMask</code> that flags all contextual values that …\nP  Aligns the widget within the available space.\nP  Aligns the widget within the available space.\nGet a flags value with all known bits set.\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nIf all sides are equal.\nSets if the widget only renders if <code>outer_bounds</code> intersects …\nReturns new vector with by-component AND operation applied.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>[x, y]</code>.\nReturns <code>[width, height]</code>.\nReturns <code>[x, y]</code>.\nCast to <code>Point</code>.\nCast to <code>Size</code>.\nReturns <code>(x, y)</code>.\nReturns <code>(width, height)</code>.\nReturns <code>(x, y)</code>.\nCast to <code>Vector</code>.\nReturns a vector of x: width and y: height.\nNew <code>Rect</code> from <code>self</code> as the size placed at the <code>x, y</code> origin.\nP  Sets if the widget is still visible when it is turned …\nP  Sets if the widget is still visible when it is turned …\nP  Set or overwrite the baseline of the widget.\nP  Set or overwrite the baseline of the widget.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPoint at the bottom-middle of the available space.\nBottom offset.\nBottom offset.\nBottom offset.\nFactor of bottom offset.\nSpacing bellow, in length units.\nPoint at the bottom-left of the available space.\nBottom-left corner radius.\nBottom-left corner radius.\nBottom-left corner radius.\nPoint at the bottom-right of the available space.\nBottom-right corner radius.\nBottom-right corner radius.\nBottom-right corner radius.\nBounding box that fits the line points, in layout units.\nCheck if <code>b</code> is orientation from <code>origin</code>.\nGet more info about the bracket char if <code>self</code> is <code>Bracket(_)</code> …\nBytes.\nLength in bytes.\nIf multiple segments of this same kind can be represented …\nCapture all layout metrics used in <code>f</code>.\nPoint at the center.\nAdds the two lengths, returns <code>None</code> if the sum overflows.\nDivides the two lengths, returns <code>None</code> if the subtraction …\nMultiplies the two lengths, returns <code>None</code> if the sum …\nSubtracts the two lengths, returns <code>None</code> if the subtraction …\nP  Aligns the widget <em>content</em> within the available space.\nP  Aligns the widget <em>content</em> within the available space.\nConstraints that must be used to layout a child node with …\nCompute the offset for a given child size, parent size and …\nReturns <code>self</code> if <code>min &lt;= self &lt;= max</code>, returns <code>min</code> if …\nClamp the <code>px</code> by min and max.\nReturns a length that constraints the computed layout …\nClamp factor to <code>[0.0..=1.0]</code> range.\nClamp factor to [0.0..=100.0] range.\nClamp the <code>size</code> by min and max.\nCollapse the layout of <code>self</code> and descendants, the size and …\nCollapse layout of the child and all its descendants, the …\nCollapse layout of all descendants, the size and offsets …\nSpacing in-between columns, in length units.\nSpacing in-between columns, in layout pixels.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCurrent size constraints.\nCurrent size constraints.\nThe <code>constraints</code>.\nCurrent length constraints for the given axis.\nWhether all set bits in a source flags value are also set …\nIdentity.\nDefault is <code>LTR</code>.\nEmpty.\n<code>Align::START</code>.\n<code>Length::Default</code>\n96ppi.\n96ppi.\nCalculate the corner radius of an inner border inside <code>self</code> …\nDegrees\nThe intersection of a source flags value with the …\nIf top and bottom are equal; and left and right are equal.\nExact size in device independent pixels.\nCurrent layout direction.\nGets the inline or text flow direction.\nThe <code>direction</code>.\nSets <code>is_inline</code> to <code>false</code>.\nCompletes the distance calculation.\nSame as <code>ppi</code>.\nFactor of the font-size of the widget.\nPercentage of the font-size of the widget.\nGet a flags value with all bits unset.\nEnd point in length units.\nEnd point in layout units.\nGets the fixed length if the constraints only allow one …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nNormalized factor.\nConvert to <code>Factor</code>.\nFactor of the fill length.\nGets the fill length, if fill is <code>true</code> this is the maximum …\nLength that fills the available space.\nRect that fills the available space.\nSize that fills the available space.\nFill preference, when this is <code>true</code> and the constraints …\nGets the maximum if fill is preferred and max is bounded, …\nGets the max size if is fill and has max bounds, or gets …\nGets the max size if is fill and has max bounds, or gets …\nGets the maximum fill size that preserves the <code>size</code> ratio.\nGets the fill size, if fill is <code>true</code> this is the maximum …\nGets the maximum if fill is preferred and max is bounded, …\nReturns a boolean vector of the fill values.\nFirst row rect, defined by the parent.\nAvailable space on the first row.\nPosition of inline segments of the first row.\nGets the fixed size if the constraints only allow one …\nFlip factor, around <code>0.5</code>,\nCurrent font size.\nCurrent computed font size.\nThe <code>font_size</code>.\nP  Exact height of the widget ignoring the contextual max.\nP  Exact height of the widget ignoring the contextual max.\nP  Exact size of the widget ignoring the contextual max.\nP  Exact size of the widget ignoring the contextual max.\nP  Exact width of the widget ignoring the contextual max.\nP  Exact width of the widget ignoring the contextual max.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNew exact.\nReturns the argument unchanged.\nNew range, the minimum and maximum is computed.\nNew exact.\nReturns the argument unchanged.\nNew top, right, bottom, left.\nAll sides equal.\nReturns the argument unchanged.\nAll sides equal.\nNew dimension, top-bottom, left-right.\nReturns the argument unchanged.\nColumn and row equal relative length.\nColumn and row equal relative length.\nColumn and row equal exact length.\nColumn and row equal exact length.\nSame spacing for both columns and rows.\nColumn and row in device pixel length.\nReturns the argument unchanged.\nConversion to <code>Length::Factor</code>\nConversion to <code>Length::Factor</code>\nConversion to <code>Length::DipF32</code>\nReturns the argument unchanged.\nConversion to <code>Length::Dip</code>\nConversion to <code>Length::Px</code>\nConversion to <code>Length::Dip</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom exact lengths.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSplat relative length.\nSplat.\nTo relative length x and y.\nSplat relative length.\nReturns the argument unchanged.\nSplat exact length.\nSplat exact length.\nReturns the argument unchanged.\nNew in exact length.\nNew in exact length.\nNew from origin and size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAll sides equal.\n(top-bottom, left-right)\n(top, right, bottom, left)\nFrom exact lengths.\nAll sides equal exact length.\nAll sides equal exact length.\nAll sides equal relative length.\nAll sides equal relative length.\nReturns the argument unchanged.\nTo relative width and height.\nSplat.\nSplat relative length.\nSplat relative length.\nSplat exact length.\nSplat exact length.\nReturns the argument unchanged.\nConversion to <code>Length::Factor</code> then to vector.\nReturns the argument unchanged.\nConversion to <code>Length::Dip</code> then to vector.\nConversion to <code>Length::Px</code> then to vector.\nConversion to <code>Length::Dip</code> then to vector.\nConversion to <code>Length::Factor</code> then to vector.\nConversion to <code>Length::Dip</code> then to vector.\nUse the length for x and y.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nFrom bytes.\nSee <code>DipToPx</code>.\nNew distance key from already computed actual distance.\nFrom gibi-bytes.\nFrom giga-bytes.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFrom kibi-bytes.\nFrom kilo-bytes.\nFrom mebi-bytes.\nFrom mega-bytes.\nGet a flags value with the bits of a flag with the given …\nReturns the named alignment.\nNew distance key computed from two points.\nSee <code>PxToDip</code>.\nNew rectangle at <code>Point::zero</code>. The size is in any <code>Length</code> …\nFrom tebi-bytes.\nFrom tera-bytes.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nGet the size set in the state.\nGet the size set in the widget state.\nGibi-bytes.\nLength in gibi-bytes.\nGiga-bytes.\nLength in giga-bytes.\nGradians\nLength that fills 50% of the available space.\nSum total memory used in nested <code>Length::Expr</code> heap memory.\nP  Exact height of the widget.\nP  Exact height of the widget.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\n<em>height</em> in length units.\nLeft + right.\nHours.\nIdentity transform.\nNo scaling.\nNo transform.\nCalculate the corner radius of an outer border around <code>self</code> …\nP  Enforce an inline mode on the widget.\nP  Enforce an inline mode on the widget.\nMutable reference to the current widget’s inline info.\nMutable reference to the current widget’s inline info.\nCurrent inline constraints.\nCurrent inline constraints.\nThe <code>inline_constraints</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a translate transform from <code>self</code>.\nFrom layout corner-radius.\nAll sides equal relative length.\nConversion to <code>Length::Factor</code> color hint.\nConversion to <code>Length::Factor</code> then to vector.\nSplat relative length.\nAll sides equal.\nSplat relative length.\nAll corners same relative length.\nConversion to <code>Length::Factor</code>\nConversion to <code>Length::Factor</code> and to radius.\nColumn and row equal relative length.\nConversion to <code>Length::Factor</code> and to radius.\nSplat relative length.\nAll corners same relative length.\nConversion to <code>Length::Factor</code> color hint.\nAll sides equal relative length.\nConversion to <code>Length::Factor</code> then to vector.\nAll sides equal.\nColumn and row equal relative length.\nSplat relative length.\nConversion to <code>Length::Factor</code>\nConversion to <code>Length::Px</code> and to radius.\nConversion to <code>Length::Px</code> then to vector.\nConversion to <code>Length::Px</code>\nNew exact.\nConversion to <code>Length::Dip</code> and to radius.\nConversion to <code>Length::Dip</code> then to vector.\nConversion to <code>Length::Dip</code>\nFrom exact lengths.\nTo relative length x and y.\nTo relative width and height.\nColumn and row in device pixel length.\nAll corners same length.\nAll sides equal.\nUse the length for x and y.\nSplat.\nEllipse <code>GradientRadius::farthest_corner</code>.\nSame spacing for both columns and rows.\nSplat.\nFrom exact lengths.\nEllipse <code>GradientRadius::farthest_corner</code>.\nAll corners same.\nReturns the inverse transform if possible.\nReturns <code>true</code> if this transform can be represented with a …\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if <code>y</code> is a special value that indicates the …\nGets if the constraints have an upper bound.\nGets if the constraints have an upper bound.\nIf is <code>Length::Default</code>.\nReturns <code>true</code> if all values are <code>Length::Default</code>.\nReturns <code>true</code> if all values are <code>Length::Default</code>.\nReturns <code>true</code> if all values are <code>Length::Default</code>.\nReturns <code>true</code> if all values are <code>Length::Default</code>.\nWhether all bits in this flags value are unset.\nGets if the constraints only allow one length.\nGets if the constraints only allow one length.\nGets if the context prefers the maximum length and there …\nGets if the context prefers the maximum length over the …\nGets if the context prefers the maximum length over the …\nGets if the context prefers the maximum length over the …\nReturns <code>true</code> if <code>x</code> is a special value that indicates the …\nReturns <code>true</code> if <code>y</code> is a special value that indicates the …\nReturns <code>true</code> it is the identity transform.\nIf the parent widget is doing inline flow layout.\nIf the parent widget is doing inline layout and this …\nReturns whether it is possible to compute the inverse …\nReturns <code>true</code> if the segment terminates the current line.\nP  If the layout direction is left-to-right.\nP  If the layout direction is left-to-right.\nMatches <code>LTR</code>.\nIf the key is the <code>NONE_MAX</code> or <code>NONE_MIN</code>.\nP  If the layout direction is right-to-left.\nP  If the layout direction is right-to-left.\nMatches <code>RTL</code>.\nReturns <code>true</code> if the segment can be considered part of …\nGets if the constraints have no upper bound.\nGets if the constraints have no upper bound.\nIf the scale is the same for both <em><strong>x</strong></em> and <em><strong>y</strong></em>.\nReturns <code>true</code> if the segment can be considered part of a …\nReturns <code>true</code> if all side offsets are zero.\nIf this length is zero in any finite layout context.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nKibi-bytes.\nLength in kibi-bytes.\nKilo-bytes.\nLength in kilo-bytes.\nInfo for bidirectional reorder.\nLast row rect, defined by the parent.\nPosition of inline segments of the last row.\nCompute the pixel value in the current <code>LAYOUT</code> context.\nCompute the pixel value in the current <code>LAYOUT</code> context.\nGet the <code>Layout</code> data or default.\nApplies the alignment transform to <code>wl</code> and returns the size …\nCompute a <code>PxTransform</code> in the current <code>LAYOUT</code> context.\nLayout the child node in a context without inline …\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context.\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nLayout the child node with inline enabled in the <code>child</code> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nPoint at the middle-left of the available space.\nLeft offset.\nLeft offset.\nLeft offset.\nFactor of left offset.\nSpacing to the left ,in length units.\nContext leftover length for the widget, given the …\nComputed leftover length for the widget, given the …\nThe <code>leftover</code>.\nContext leftover length for the given axis.\nLine length in rounded pixels.\nLinear interpolation.\nLinear interpolation.\nLinear interpolation.\nLinear interpolation.\nFactor of the leftover layout space.\nP  Margin space around the widget.\nP  Margin space around the widget.\nGets if all of the fields in <code>mask</code> are equal between <code>self</code> …\nCompares and returns the maximum of two lengths.\nReturns the maximum of two factors.\nCompares and returns the maximum of two pixel values.\nCompares and returns the maximum of two pixel values.\nGets the maximum allowed length, or <code>None</code> if is unbounded.\nReturns a length that resolves to the maximum layout …\nMax x and y, this is the sum of <code>origin</code> and <code>size</code>.\nReturns the maximum of the two resolutions.\nReturns the maximum of the two resolutions.\nGets the maximum length if it is bounded, or the minimum …\nGets the maximum size if bounded, or the minimum if not.\nP  Maximum height of the widget.\nP  Maximum height of the widget.\nGets the maximum length if bounded or <code>length</code> clamped by …\nP  Maximum size of the widget.\nP  Maximum size of the widget.\nGets the maximum allowed size, or <code>None</code> if is unbounded in …\nGets the maximum size if bounded, or the <code>size</code> clamped by …\nP  Maximum width of the widget.\nP  Maximum width of the widget.\nMax x, this is the <code>origin.x + width</code>.\nMax y, this is the <code>origin.y + height</code>.\nGet the <code>Measure</code> data or default.\nComputes the size returned by <code>layout</code> for the given child …\nDisable inline and measure child with no inline …\nMeasure the child node with inline enabled for the <code>child</code> …\nComputes the width returned by layout for the given child …\nComputes the height returned by layout for the given child …\nMebi-bytes.\nLength in mebi-bytes.\nMega-bytes.\nLength in mega-bytes.\nGets the total memory allocated by this length.\nGets the total memory allocated by this length expression.\nGets the context metrics.\nExtra space in-between the first row and the mid-rows that …\nCurrent height of the row in the parent. If the widget …\nCompares and returns the minimum of two lengths.\nReturns the minimum of two factors.\nCompares and returns the minimum of two pixel values.\nCompares and returns the minimum of two pixel values.\nGets the minimum allowed length. The minimum is inclusive.\nReturns a length that resolves to the minimum layout …\nMin x and y, this is the <code>origin</code>.\nReturns the minimum of the two resolutions.\nReturns the minimum of the two resolutions.\nP  Minimum height of the widget.\nP  Minimum height of the widget.\nP  Minimum size of the widget.\nP  Minimum size of the widget.\nGets the minimum allowed size. The minimum is inclusive.\nP  Minimum width of the widget.\nP  Minimum width of the widget.\nMin x, this is the <code>origin.x</code>.\nMin y, this is the <code>origin.y</code>.\nMinutes.\nRadians in <code>[0.0 ..= TAU]</code>.\nGradians in <code>[0.0 ..= 400.0]</code>.\nDegrees in <code>[0.0 ..= 360.0]</code>.\nTurns in <code>[0.0 ..= 1.0]</code>.\nMilliseconds.\nReturns the alignment <code>const</code> name if <code>self</code> is equal to one …\nReturns <code>true</code> if this transform is affected by the layout …\nNew with distinct values.\nNew default.\nNew from round integer value.\nConstructor taking a scalar for each side.\nNew root <code>LayoutMetrics</code>.\nNew scale with different scales for each dimension.\nFactors applied to each offset.\nNew column, row from any <code>Length</code> unit..\nNew grid spacing\nNew line defined by two points of any type that converts …\nNew layout line defined by two layout points.\nNew x, y from any <code>Length</code> unit.\nNew rectangle defined by an origin point (top-left) and a …\nNew top, right, bottom left offsets. From any <code>Length</code> type.\nNew width, height from any <code>Length</code> unit.\nNew x, y from any <code>Length</code> unit.\nNew all corners same radius.\nUniform scale applied to all offsets.\nSame spacing for both columns and rows.\nAll sides equal. From any <code>Length</code> type.\nConstructor setting the same value to all sides, taking a …\nNew bounded between zero and <code>max</code> with no fill.\nNew bounded between zero and <code>max_y</code>, <code>max_y</code> with no fill.\nNew bounded between zero and <code>max</code> with no fill.\nNew bounded to only allow the <code>length</code> and fill.\nNew bounded to only allow the <em>size</em> and fill.\nNew bounded to only allow the <code>size</code> and fill.\nnew from floating point.\nNew bounded to fill the <code>length</code>.\nNew bounded to fill the maximum <code>x</code> and <code>y</code>.\nNew bounded to fill the maximum <code>size</code>.\nCreate a 3d perspective transform.\nNew bounded to a inclusive range.\nNew bounded to a inclusive range.\nNew with no widget layouts invalidated.\nCreate a 2d rotation transform.\nCreate a 3d rotation transform.\nCreate a 3d rotation transform around the <em><strong>x</strong></em> axis.\nCreate a 3d rotation transform around the <em><strong>y</strong></em> axis.\nSame as <code>new_rotate</code>.\nCreate a 2d scale transform.\nCreate a 2d scale transform on the X dimension.\nCreate a 2d scale transform.\nCreate a 2d scale transform on the Y dimension.\nCreate a 2d skew transform.\nCreate a 2d skew transform in the X dimension.\nCreate a 2d skew transform in the Y dimension.\nCreate a 2d translation transform.\nCreate a 3d translation transform.\nCreate a 2d translation transform in the X dimension.\nCreate a 2d translation transform in the Y dimension.\nCreate a 3d translation transform in the z dimension.\nNew unbounded constrain.\nNew unbounded constrain.\nSame scale applied to parallel offsets.\nTop-bottom and left-right equal. From any <code>Length</code> type.\nGets the next layout pass ID.\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns a line that starts from the left-top most point …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns new vector with results of negation operation on …\nP  Widget layout offset.\nP  Widget layout offset.\nUniform 100%.\n<code>(1, 1)</code>.\n<code>(1.px(), 1.px())</code>.\nReturns new vector with by-component OR operation applied.\nTop-left origin of the rectangle in length units.\nReturns a 2D box that encompasses the result of …\nReturns a 2D box that encompasses the result of …\nP  Margin space around the content of a widget.\nP  Margin space around the content of a widget.\nCollect the parallel changes back.\nCollect the parallel changes back.\nStart a parallel measure.\nStart a parallel layout.\nGets the current window layout pass.\nPercent factor.\nFactor as percentage.\nPercentage of the fill length.\nP Distance from the Z plane (0) the viewer is, affects 3D …\nP Distance from the Z plane (0) the viewer is, affects 3D …\nNew 3D perspective distance.\nChange <code>self</code> 3d perspective distance.\nP  Vanishing point used by 3D transforms in the widget’s …\nP  Vanishing point used by 3D transforms in the widget’s …\nCheck if <code>point</code> is orientation from <code>origin</code>.\nPixels-per-inch.\nPixels-per-meter.\nReturns a transform with a translation applied before self…\nProject the 2D point onto the transform Z-plane.\nProject the 2D point onto the transform Z-plane.\nExact size in font units.\nConvert a <code>pt</code> unit value to <code>Px</code> given a <code>scale_factor</code>.\nSame operation as <code>pt_to_px</code> but without rounding to nearest …\nExact size in device pixels.\nConvert a <code>Px</code> unit value to a <code>Pt</code> value given a <code>scale_factor</code>.\nRadians\nRegister that the node layout depends on these contextual …\nFactor of the font-size of the root widget.\nPercentage of the font-size of the root widget.\nThe intersection of a source flags value with the …\nReplaces <code>self</code> with <code>overwrite</code> if <code>self</code> is <code>Default</code>.\nReplaces <code>Length::Default</code> values with <code>overwrite</code> values.\nReplaces <code>Length::Default</code> values with <code>overwrite</code> values.\nReplaces <code>Length::Default</code> values with <code>overwrite</code> values.\nReplaces <code>Length::Default</code> values with <code>overwrite</code> values.\nEnsure that the parent <code>with_child</code> will receive a reference …\nPoint at the middle-right of the available space.\nRight offset.\nRight offset.\nRight offset.\nFactor of right offset.\nSpacing to the right, in length units.\nRoot font size.\nComputed font size at the root widget.\nThe <code>root_font_size</code>.\nP  Rotate transform.\nP  Rotate transform.\nChange <code>self</code> to apply a 2d rotation after its …\nChange <code>self</code> to apply a 3d rotation.\nP  Rotate transform.\nP  Rotate transform.\nChange <code>self</code> to apply a 3d rotation around the <em><strong>x</strong></em> axis.\nP  Rotate transform.\nP  Rotate transform.\nChange <code>self</code> to apply a 3d rotation around the <em><strong>y</strong></em> axis.\nP  Same as <code>rotate</code>.\nP  Same as <code>rotate</code>.\nSame as <code>rotate</code>.\nNew 2D rotation.\nNew 3D rotation.\nConvert <code>PxF32</code> to <code>Px</code> and <code>DipF32</code> to <code>Dip</code>.\nSpacing in-between rows, in length units.\nSpacing in-between rows, in layout pixels.\nAdds the two lengths without overflowing or wrapping.\nMultiplies the two lengths without overflowing or wrapping.\nSubtracts the two lengths without overflowing or wrapping.\nP  Scale transform.\nP  Scale transform.\nNew 2D scale.\nChange <code>self</code> to apply a uniform 2d scale after its …\nNew 3D scale.\nCurrent scale factor.\nPixel scale factor.\nThe <code>scale_factor</code>.\nP  Scale X transform.\nP  Scale X transform.\nChange <code>self</code> to apply a <em><strong>x</strong></em> scale after its transformation.\nP  Scale X and Y transform.\nP  Scale X and Y transform.\nChange <code>self</code> to apply a 2d scale after its transformation.\nP  Scale Y transform.\nP  Scale Y transform.\nChange <code>self</code> to apply a <em><strong>y</strong></em> scale after its transformation.\nCurrent screen PPI.\nThe current screen “pixels-per-inch” resolution.\nThe <code>screen_ppi</code>.\nIterator that yields quadrants for efficient search in a …\nSeconds.\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns vector, each component of which or from <code>a</code>, or from …\nSet the size state.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the baseline offset of the widget. The value is up …\nSet the height state.\nSet the 3D perspective that defines the children 3D space.\nSets the vanishing point of the children 3D space as a …\nSet if the widget preserved 3D perspective form the parent.\nSet the width state.\nP  Exact size of the widget.\nP  Exact size of the widget.\nSize of the rectangle in length units.\nP  Skew transform.\nP  Skew transform.\nNew 2D skew.\nChange <code>self</code> to apply a 2d skew after its transformation.\nP  Skew X transform.\nP  Skew X transform.\nChange <code>self</code> to apply a <em><strong>x</strong></em> skew after its transformation.\nP  Skew Y transform.\nP  Skew Y transform.\nChange <code>self</code> to apply a <em><strong>y</strong></em> skew after its transformation.\nSpherical linear interpolation.\nSpherical linear interpolation.\nSpherical linear interpolation.\nSpherical linear interpolation.\nCalls <code>f</code> with <code>is_slerp_enabled</code> set to <code>enabled</code>.\nSpherical linear interpolation sampler.\nClones all current metrics into a snapshot.\nNew x, y from single value of any <code>Length</code> unit.\nNew width, height from single value of any <code>Length</code> unit.\nNew x, y from single value of any <code>Length</code> unit.\nStart point in length units.\nStart point in layout units.\nP  Retain the widget’s previous height if the new layout …\nP  Retain the widget’s previous height if the new layout …\nP  Retain the widget’s previous size if the new layout …\nP  Retain the widget’s previous size if the new layout …\nP  Retain the widget’s previous width if the new layout …\nP  Retain the widget’s previous width if the new layout …\nGets the layout direction this segment will always be in, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTebi-bytes.\nLength in tebi-bytes.\nTera-bytes.\nLength in tera-bytes.\nReturns the multiplication of the two matrices such that …\nChange <code>self</code> to apply <code>other</code> after its transformation.\nReturns a transform with a translation applied after self…\nNew <code>Line</code> from <code>self</code> as a start point to <code>x2, y2</code> end point.\nLine that traces the length from top to bottom.\nLine that traces the length from top-right to bottom-left.\nLine that traces the length from top-left to bottom-right.\nDivide the <code>Px</code> self by the scale.\nReturns <code>self</code> as <code>f32</code>.\nReturns <code>self</code> as <code>i32</code>.\nLine that traces the length from right to left.\nConvert to <code>Length::Expr</code>, logs warning for memory use above …\nCreate an <code>WidgetMeasure</code> for an <code>UiNode::measure</code> call.\nMultiply the <code>Dip</code> self by the scale.\nLine that traces the length from left to right.\nLine that fills the available length from bottom to top.\nLine that traces the length from bottom-right to top-left.\nLine that traces the length from bottom-left to top-right.\nTo full transform.\nConvert to vector.\nConvert to <code>webrender</code> border radius.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPoint at the top-middle of the available space.\nTop offset.\nTop offset.\nTop offset.\nFactor of top offset.\nSpacing above, in length units.\nPoint at the top-left of the available space.\nTop-left corner radius.\nTop-left corner radius.\nTop-left corner radius.\nPoint at the top-right of the available space.\nTop-right corner radius.\nTop-right corner radius.\nTop-right corner radius.\nP  Custom transform.\nP  Custom transform.\nP  Point relative to the widget inner bounds around which …\nP  Point relative to the widget inner bounds around which …\nTransform the pixel point.\nTransform the pixel point.\nP  Defines how the widget and children are positioned in …\nP  Defines how the widget and children are positioned in …\nTransform the pixel vector.\nTransform the pixel vector.\nP  Translate transform.\nP  Translate transform.\nReturns a rectangle of same size that adds the vector to …\nChange <code>self</code> to apply a 2d translation after its …\nAdds the <code>offset</code> to the closest <em>inner</em> bounds offset.\nChange <code>self</code> to apply a 3d translation after its …\nSet if the baseline is added to the inner offset <em>y</em> axis.\nP  Translate X transform.\nP  Translate X transform.\nChange <code>self</code> to apply a <em><strong>x</strong></em> translation after its …\nP  Translate Y transform.\nP  Translate Y transform.\nChange <code>self</code> to apply a <em><strong>y</strong></em> translation after its …\nP  Translate Z transform.\nP  Translate Z transform.\nChange <code>self</code> to apply a <em><strong>z</strong></em> translation after its …\nNew simple 2D translation.\nNew 3D translation.\nCompute a <code>PxTransform</code> if it is not affected by the layout …\nTurns\nUniform scale applied to both <em><strong>x</strong></em> and <em><strong>y</strong></em>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTop + bottom.\nFactor of the height of the nearest viewport ancestor.\nPercentage of the height of the nearest viewport ancestor.\nCurrent viewport size.\nComputed size of the nearest viewport ancestor.\nThe <code>viewport</code>.\nCurrent viewport length for the given axis.\nCurrent largest dimension of the viewport.\nLargest dimension of the <code>viewport</code>.\nCurrent smallest dimension of the viewport.\nSmallest dimension of the <code>viewport</code>.\nFactor of the largest of the nearest viewport’s …\nPercentage of the largest of the nearest viewport’s …\nFactor of the smallest of the nearest viewport’s …\nPercentage of the smallest of the nearest viewport’s …\nFactor of the width of the nearest viewport ancestor.\nPercentage of the width of the nearest viewport ancestor.\nP  Exact width of the widget.\nP  Exact width of the widget.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nWidth of the segment, in pixels.\n<em>width</em> in length units.\nRuns a function <code>f</code> in a layout context that has its max …\nDefines a custom scope that does not affect the widget’s …\nDefines the widget’s child scope, translations inside …\nCalls <code>f</code> with the <code>constraints</code> in context.\nSets the <code>constraints</code> to <code>constraints</code>.\nCalls <code>f</code> with the <code>constraints</code> in context.\nCalls <code>f</code> in a new layout context.\nCalls <code>f</code> with <code>direction</code> in the context.\nSets the <code>direction</code>.\nReturns a copy <code>with_new_exact</code> if the new length clamped by …\nReturns a copy with min and max bounds set to <code>x</code> and <code>y</code> …\nReturns a copy with min and max bounds set to <code>size</code> clamped …\nReturns a copy of the current constraints with the <strong>x</strong> …\nReturns a copy of the current constraints with the <strong>y</strong> …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nCalls <code>f</code> with <code>font_size</code> in the context.\nSets the <code>font_size</code>.\nSet the <code>inline_constraints</code>.\nCalls <code>measure</code> with inline force enabled on the widget.\nCalls <code>layout</code> with inline force enabled on the widget.\nDefines the widget’s inner scope, translations inside …\nCall <code>layout</code> with a different set of <code>layout_updates</code>.\nCalls <code>f</code> with <code>leftover</code> set to <code>with</code> and <code>height</code>.\nSets the <code>leftover</code>.\nReturns a copy of the current constraints with <code>sub</code> …\nReturns a copy of the current constraints with <code>sub_x</code> and …\nReturns a copy of the current constraints with <code>sub</code> …\nReturns a copy of the current constraints with <code>sub_x</code> …\nReturns a copy of the current constraints with <code>sub_y</code> …\nReturns a copy <code>with_new_max</code> if <code>max</code> is less then the …\nReturns a copy of the current constraints that has <code>max_x</code> …\nReturns a copy of the current constraints that has <code>max</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>max_y</code> …\nReturns a copy <code>with_new_min</code> if <code>min</code> is greater then the …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>min</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>min_y</code> …\nReturns a copy of the current constraints with <code>add</code> added …\nReturns a copy of the current constraints with <code>add_x</code> and …\nReturns a copy of the current constraints with <code>add</code> added …\nReturns a copy of the current constraints that has max and …\nReturns a copy with min and max bounds set to <code>x</code> and <code>y</code>.\nReturns a copy with min and max bounds set to <code>size</code>.\nReturns a copy of the current constraints with the <strong>x</strong> …\nReturns a copy of the current constraints with the <strong>y</strong> …\nReturns a copy of the current constraints that has <code>max</code> as …\nReturns a copy of the current constraints that has <code>max_x</code> …\nReturns a copy of the current constraints that has <code>max</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>max_y</code> …\nReturns a copy of the current constraints that has <code>min</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>min</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>min_y</code> …\nCalls <code>f</code> without a layout context.\nCalls <code>f</code> with no inline constraints.\nCalls <code>f</code> in a new layout pass.\nDefines the root widget outer-bounds scope.\nCalls <code>f</code> with <code>scale_factor</code> in the context.\nSets the <code>scale_factor</code>.\nCalls <code>f</code> with <code>screen_ppi</code> in the context.\nSets the <code>screen_ppi</code>.\nRuns a function <code>f</code> in a context that has its max size …\nReturns a copy of the current constraints without upper …\nReturns a copy of the current constraints without upper …\nReturns a copy of the current constraints without a upper …\nReturns a copy of the current constraints without a upper …\nCalls <code>f</code> with <code>viewport</code> in the context.\nSets the <code>viewport</code>.\nMeasure a widget.\nDefines a widget scope, translations inside <code>layout</code> target …\nReturns a copy of the current constraints with <code>x</code> modified …\nReturns a copy of the current constraints with <code>y</code> modified …\nCalls <code>f</code> with the <code>constraints</code> for perspective in context.\nSets the <code>z_constraints</code> to <code>constraints</code>.\nAdds the two lengths wrapping overflows.\nDivides the two lengths wrapping overflows.\nMultiplies the two lengths wrapping overflows.\nSubtracts the two lengths wrapping overflows.\nP  Offset on the <em><strong>x</strong></em> axis.\nP  Offset on the <em><strong>x</strong></em> axis.\nGets the best finite <code>x</code> align value.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nSeg offset to the right from the row origin, in pixels.\n<em>x</em> alignment in a <code>[0.0..=1.0]</code> range.\nConstraints of lengths in the <em>x</em> or <em>width</em> dimension.\nScale factor applied in the <em><strong>x</strong></em> dimension.\n<em>x</em> offset in length units.\n<em>x</em> displacement in length units.\nIf <code>x</code> is flipped (around <code>0.5</code>) in right-to-left contexts.\nGets the best finite <code>x</code> and <code>y</code> align values.\nP  Offset on the <em><strong>y</strong></em> axis.\nP  Offset on the <em><strong>y</strong></em> axis.\nGets the best finite <code>y</code> align value.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\n<em>y</em> alignment in a <code>[0.0..=1.0]</code> range.\nConstraints of lengths in the <em>y</em> or <em>height</em> dimension.\nScale factor applied in the <em><strong>y</strong></em> dimension.\n<em>y</em> offset in length units.\n<em>y</em> displacement in length units.\nSwap x and y.\nSwap <code>x</code> and <code>y</code>.\nSwap <code>x</code> and <code>y</code>.\nCurrent perspective constraints.\nCurrent perspective constraints.\nThe <code>z_constraints</code>.\nAll zeros.\nConstructor, setting all sides to zero.\nUniform 0%.\nZero spacing.\nLength of exact zero.\nLine from zero to zero.\nLine from (0, 0) to (0, 0).\n<em><strong>x:</strong></em> <code>Length::zero</code>, <em><strong>y:</strong></em> <code>Length::zero</code>.\nNew rectangle at <code>Point::zero</code> and <code>Size::zero</code>.\nAll sides zero.\n<em><strong>width:</strong></em> <code>Length::zero</code>, <em><strong>height:</strong></em> <code>Length::zero</code>\n<em><strong>x:</strong></em> <code>Length::zero</code>, <em><strong>y:</strong></em> <code>Length::zero</code>.\nArguments for a markdown block quote view.\nArguments for a markdown code block view.\nArguments for a markdown inlined code text view.\nNo extra resolution, just convert into <code>ImageSource</code>.\nNo extra resolution, just pass the link provided.\nArguments for a markdown footnote definition view.\nArguments for a markdown footnote reference view.\nArguments for a markdown heading view.\nArguments for a markdown image view.\nMarkdown image resolver.\nEvent raised by markdown links when clicked.\nArguments for the <code>LINK_EVENT</code>.\nArguments for a markdown inlined link view.\nMarkdown link resolver.\nArguments for a markdown list view.\nArguments for a markdown list item bullet, check mark or …\nArguments for a markdown list item view.\nW  Render markdown styled text.\nW  Render markdown styled text.\nMarkdown text run style.\nArguments for a markdown panel.\nArguments for a markdown paragraph view.\nCustom resolution.\nCustom resolution.\nArguments for a markdown rule view.\nArguments for a markdown table cell view.\nArguments for a markdown table view.\nArguments for a markdown text view.\nMarkdown extension methods for widget info.\nItems to display when the image does not load and for …\nAlt items in text form.\nP  Set a label that identifies the widget in the context …\nP  Set a label that identifies the widget in the context …\nGets the <code>anchor</code>.\nAnchor label that identifies the header in the markdown …\nResolve file links relative to <code>base</code>.\nP  Widget function that converts <code>BlockQuoteFnArgs</code> to …\nP  Widget function that converts <code>BlockQuoteFnArgs</code> to …\nP  Widget function that converts <code>BlockQuoteFnArgs</code> to …\nInner block items, paragraphs and nested lists.\nCopy of the bullet args.\nCell items.\nIf the list is checked. <code>Some(true)</code> is <code>[x]</code> and <code>Some(false)</code> …\nP  Widget function that converts <code>CodeBlockFnArgs</code> to …\nP  Widget function that converts <code>CodeBlockFnArgs</code> to …\nP  Widget function that converts <code>CodeBlockFnArgs</code> to …\nP  Widget function that converts <code>CodeInlineFnArgs</code> to …\nP  Widget function that converts <code>CodeInlineFnArgs</code> to …\nP  Widget function that converts <code>CodeInlineFnArgs</code> to …\nColumn align.\nColumn definitions with align.\nP  Widget function that converts <code>DefListArgs</code> to widgets.\nP  Widget function that converts <code>DefListItemDefinitionArgs</code> …\nP  Widget function that converts <code>DefListItemTitleArgs</code> to …\nNested list depth, starting from zero for the outer-list.\nNested list depth, starting from zero for items in the …\nItalic.\nFind descendant tagged by the given anchor.\nIf the list is <em>ordered</em>, the first item number.\nP  Widget function that converts <code>FootnoteDefFnArgs</code> to …\nP  Widget function that converts <code>FootnoteDefFnArgs</code> to …\nP  Widget function that converts <code>FootnoteDefFnArgs</code> to …\nP  Widget function that converts <code>FootnoteRefFnArgs</code> to …\nP  Widget function that converts <code>FootnoteRefFnArgs</code> to …\nP  Widget function that converts <code>FootnoteRefFnArgs</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate an anchor label for a header.\nP  Widget function that converts <code>HeadingFnArgs</code> to widgets.\nP  Widget function that converts <code>HeadingFnArgs</code> to widgets.\nP  Widget function that converts <code>HeadingFnArgs</code> to widgets.\nP  Widget function that converts <code>ImageFnArgs</code> to widgets.\nP  Widget function that converts <code>ImageFnArgs</code> to widgets.\nP  Widget function that converts <code>ImageFnArgs</code> to widgets.\nP  Markdown image resolver.\nP  Markdown image resolver.\nP  Markdown image resolver.\nZero-sized index of the paragraph.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the cell is inside the header row.\nIf this widget is a <code>Markdown!</code>.\nInline items.\nInline items.\nInline items.\nList items.\nInline items of the list item.\nBlock items.\nBlock items.\nInline items.\nBlock items.\nFootnote referenced.\nIdentifier label.\nCode language, can be empty.\nLevel.\nNumber of <em>parent</em> quotes in case of nesting.\nLink widget.\nP  Widget function that converts <code>LinkFnArgs</code> to widgets.\nP  Widget function that converts <code>LinkFnArgs</code> to widgets.\nP  Widget function that converts <code>LinkFnArgs</code> to widgets.\nP  Markdown link resolver.\nP  Markdown link resolver.\nP  Markdown link resolver.\nP  Scroll-to mode used by anchor links.\nP  Scroll-to mode used by anchor links.\nP  Scroll-to mode used by anchor links.\nP  Widget function that converts <code>ListFnArgs</code> to widgets.\nP  Widget function that converts <code>ListFnArgs</code> to widgets.\nP  Widget function that converts <code>ListFnArgs</code> to widgets.\nP  Widget function that converts <code>ListItemBulletFnArgs</code> to …\nP  Widget function that converts <code>ListItemBulletFnArgs</code> to …\nP  Widget function that converts <code>ListItemBulletFnArgs</code> to …\nP  Widget function that converts <code>ListItemFnArgs</code> to widgets.\nP  Widget function that converts <code>ListItemFnArgs</code> to widgets.\nP  Widget function that converts <code>ListItemFnArgs</code> to widgets.\nNew <code>Resolve</code>.\nNew <code>Resolve</code>.\nNew args from values that convert into the argument types.\nArguments for event that happened now (<code>INSTANT.now</code>).\nIf the list is <em>ordered</em>, the item number.\nP  Markdown link click.\nP  Markdown link click.\nP Preview <code>on_link</code> event.\nP Preview <code>on_link</code> event.\nP  Widget function that converts <code>PanelFnArgs</code> to a widget.\nP  Widget function that converts <code>PanelFnArgs</code> to a widget.\nP  Widget function that converts <code>PanelFnArgs</code> to a widget.\nP  Widget function that converts <code>ParagraphFnArgs</code> to …\nP  Widget function that converts <code>ParagraphFnArgs</code> to …\nP  Widget function that converts <code>ParagraphFnArgs</code> to …\nResolve the image.\nResolve the link.\nP  Widget function that converts <code>RuleFnArgs</code> to widgets.\nP  Widget function that converts <code>RuleFnArgs</code> to widgets.\nP  Widget function that converts <code>RuleFnArgs</code> to widgets.\nImage, resolved by the <code>image_resolver</code>.\nStrikethrough.\nBold.\nThe style.\nThe style.\nP  Widget function that converts <code>TableFnArgs</code> to widgets.\nP  Widget function that converts <code>TableFnArgs</code> to widgets.\nP  Widget function that converts <code>TableFnArgs</code> to widgets.\nP  Widget function that converts <code>TextFnArgs</code> to widgets.\nP  Widget function that converts <code>TextFnArgs</code> to widgets.\nP  Widget function that converts <code>TextFnArgs</code> to widgets.\nInstant the event happened.\nLink title, usually displayed as a tooltip.\nImage title, usually displayed as a tooltip.\nP  Markdown text.\nThe text run.\nThe code text run.\nRaw text.\nThe link.\nRaw URL.\nStart building a new instance.\nGets the widget type info.\nW  Style applied to all <code>Button!</code> widgets inside <code>Menu!</code>.\nW  Style applied to all <code>Button!</code> widgets inside <code>Menu!</code>.\nW  Default <code>Menu!</code> style.\nW  Default <code>Menu!</code> style.\nW  Menu root panel.\nW  Menu root panel.\nW  Style applied to all <code>Button!</code> widgets inside <code>Menu!</code>.\nW  Style applied to all <code>Button!</code> widgets inside <code>Menu!</code>.\nW  Command button for touch.\nW  Command button for touch.\nContext menu widget and properties.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nP  Menu item icon.\nP  Menu item icon.\nP  Menu item icon from widget function.\nP  Menu item icon from widget function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  Widget function that generates the menu layout.\nP  Widget function that generates the menu layout.\nP  Widget function that generates the menu layout.\nSub-menu popup widget and properties.\nP  Minimum space between a menu item child and the …\nP  Minimum space between a menu item child and the …\nP  Menu item shortcut text.\nP  Menu item shortcut text.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nSubmenu widget and properties.\nStart building a new instance.\nStart building a new instance.\nStart building a new instance.\nStart building a new instance.\nStart building a new instance.\nGets the widget type info.\nGets the widget type info.\nGets the widget type info.\nGets the widget type info.\nGets the widget type info.\nW  Context menu popup.\nW  Context menu popup.\nArguments for context menu widget functions.\nW  Context menu popup default style.\nW  Context menu popup default style.\nW  Touch context menu popup default style.\nW  Touch context menu popup default style.\nID of the widget the menu is anchored to.\nP  Defines the context menu shown when the widget is …\nP  Defines the context menu shown when the widget is …\nP  Set the position of the context-menu widgets opened for …\nP  Set the position of the context-menu widgets opened for …\nP  Defines the context menu function shown when the widget …\nP  Defines the context menu function shown when the widget …\nIs <code>true</code> if the menu is for <code>disabled_context_menu_fn</code>, is …\nP  Defines the context menu shown when the widget is …\nP  Defines the context menu shown when the widget is …\nP  Defines the context menu function shown when the widget …\nP  Defines the context menu function shown when the widget …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  Widget function that generates the context menu layout.\nP  Widget function that generates the context menu layout.\nP  Widget function that generates the context menu layout.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nStart building a new instance.\nStart building a new instance.\nStart building a new instance.\nGets the widget type info.\nGets the widget type info.\nGets the widget type info.\nW  Sub-menu popup default style.\nW  Sub-menu popup default style.\nW  Sub-menu popup.\nW  Sub-menu popup.\nc  Sub-menu items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  Widget function that generates the sub-menu popup …\nP  Widget function that generates the sub-menu popup …\nP  Widget function that generates the sub-menu popup …\nc  Parent sub-menu ID.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nStart building a new instance.\nStart building a new instance.\nGets the widget type info.\nGets the widget type info.\nW  Style applied to <code>SubMenu!</code> not inside any other …\nW  Style applied to <code>SubMenu!</code> not inside any other …\nW  Submenu header and items.\nW  Submenu header and items.\nIterator over sub-menu parents.\nW  Style applied to all <code>SubMenu!</code> widgets inside other …\nW  Style applied to all <code>SubMenu!</code> widgets inside other …\nExtension methods for <code>WidgetInfo</code>.\nP  Sub-menu items.\nP  If the start and end column width is applied as padding.\nP  If the start and end column width is applied as padding.\nP  Sets the content to the <code>Align::END</code> side of the button …\nP  Sets the content to the <code>Align::END</code> side of the button …\nP  Sets the content to the <code>Align::END</code> side of the button …\nP  Sets the content to the <code>Align::END</code> side of the button …\nP  Width of the sub-menu expand symbol column.\nP  Width of the sub-menu expand symbol column.\nP  Width of the sub-menu expand symbol column.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nc  Defines the sub-menu header child.\nP  Delay a sub-menu must be hovered to open the popup.\nP  Delay a sub-menu must be hovered to open the popup.\nP  Delay a sub-menu must be hovered to open the popup.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  If the sub-menu popup is open or opening.\nP  If the sub-menu popup is open or opening.\nP  If the sub-menu popup is open or opening.\nIf this widget is a <code>SubMenu!</code> instance.\nGets a variable that tracks if the sub-menu is open.\nGets the alt-scope parent of the <code>root_submenu</code>.\nP  Sets the content to the <code>Align::START</code> side of the button …\nP  Sets the content to the <code>Align::START</code> side of the button …\nP  Sets the content to the <code>Align::START</code> side of the button …\nP  Sets the content to the <code>Align::START</code> side of the button …\nP  Width of the icon/checkmark column.\nP  Width of the icon/checkmark column.\nP  Width of the icon/checkmark column.\nP  Extends or replaces the widget style.\nGets an iterator over sub-menu parents until root.\nGets the sub-menu that spawned <code>self</code> if <code>is_submenu</code>, …\nGets the last submenu ancestor.\nGets an iterator over the widget, if it is a sub-menu, and …\nStart building a new instance.\nStart building a new instance.\nStart building a new instance.\nGets the widget type info.\nGets the widget type info.\nGets the widget type info.\nAll cursor icons.\nIndicates an alias of/shortcut to something is to be …\nIndicates that the something can be scrolled in any …\nBack button.\nSettings that define the mouse button pressed repeat.\nState a <code>MouseButton</code> has entered.\nIndicates that a cell or set of cells may be selected. …\nDefines how click events are generated for a widget.\nRepresents mouse gestures that can initiate a click.\nIndicates that the item/column can be resized …\nA context menu is available for the object under the …\nIndicates something is to be copied. Often rendered as an …\nA simple crosshair (e.g., short line segments resembling a …\nNamed system dependent cursor icon.\nWindow custom cursor.\nWindow cursor source.\nThe platform-dependent default cursor. Often rendered as …\nThe east border to be moved.\nThe east and west borders to be moved.\nForward button.\nIndicates that something can be grabbed (dragged to be …\nIndicates that something is being grabbed (dragged to be …\nHelp is available for the object under the cursor. Often …\nDon’t show cursor.\nPlatform dependent named cursor icon.\nCustom cursor image, with fallback.\nLeft button.\nAmount in lines or rows to scroll in the horizontal and …\nMouse service.\nMouse click event, any <code>click_count</code>.\nThe top-most hovered widget changed or pointer capture …\nMouse down or up event.\nMouse move event.\nMouse wheel scroll event.\nMiddle button.\nDescribes a button of a mouse controller.\n<code>MOUSE_CLICK_EVENT</code> arguments.\n<code>MOUSE_HOVERED_EVENT</code> arguments.\n<code>MOUSE_INPUT_EVENT</code> arguments.\n<code>MOUSE_MOVE_EVENT</code> arguments.\nMouse cursor position.\nDescribes a difference in the mouse scroll wheel state.\n<code>MOUSE_WHEEL_EVENT</code> arguments.\nIndicates something is to be moved.\nSystem settings needed for implementing double/triple …\nThe north border to be moved.\nThe north-east corner to be moved.\nThe north-east and south-west corners to be moved.\nIndicates that the dragged item cannot be dropped at the …\nIndicates that the requested action will not be carried …\nThe south and north borders to be moved.\nThe north-west corner to be moved.\nThe north-west and south-east corners to be moved.\nAny other button.\nAmount in pixels to scroll in the horizontal and vertical …\nThe cursor is a pointer that indicates a link. Often …\nWidget is clicked when a mouse button is pressed on it.\nWidget is clicked when the same mouse button is pressed …\nThe button was pressed.\nA progress indicator. The program is performing some …\nWidget is clicked when a mouse button is released on it, …\nThe button was released.\nRight button.\nIndicates that the item/row can be resized vertically. …\nThe south border to be moved.\nThe south-east corner to be moved.\nThe south-west corner to be moved.\nIndicates text that may be selected. Often rendered as an …\nIndicates vertical-text that may be selected. Often …\nThe west border to be moved.\nIndicates that the program is busy and the user should …\nMouse config builder methods.\nMouse config methods.\nIndicates that something can be zoomed in. Often rendered …\nIndicates that something can be zoomed in. Often rendered …\nMaximum (x, y) distance in pixels.\nWhich mouse button generated the event.\nWhich mouse button generated the event.\nReturns a read-only variable that tracks the buttons that …\nCurrent pointer capture.\nCurrent pointer capture.\nCurrent pointer capture.\nIf <code>capture</code> is <code>None</code> or <code>allows</code> the <code>WIDGET</code> to receive this …\nIf <code>capture</code> is <code>None</code> or <code>allows</code> the <code>WIDGET</code> to receive this …\nIf <code>capture</code> is <code>None</code> or <code>allows</code> the <code>WIDGET</code> to receive this …\nCount of clicks within the double-click interval. Number <code>1</code> …\nP  Defines how click events are generated for the widget.\nP  Defines how click events are generated for the widget.\nGets the click mode of the widget.\nPositions of the cursor in between the previous event and …\nP  Sets the mouse pointer cursor displayed when hovering …\nP  Sets the mouse pointer cursor displayed when hovering …\n<code>500ms</code> and <code>4, 4</code>.\nFirst <code>PressRelease</code>, double <code>Press</code> and no repeat.\n600ms, 100ms.\nThe <code>target</code> and <code>capture</code>.\nThe <code>target</code>, and <code>capture</code>.\nThe <code>target</code>.\nThe <code>target</code>, <code>prev_target</code> and <code>capture</code>.\nThe <code>target</code>.\nGets the pixel delta, line delta is converted using the …\nWheel motion delta, value is in pixels if the <em>wheel</em> is a …\nId of device that generated the event.\nId of device that generated the event.\nId of device that generated the event.\nId of device that generated the event.\nId of device that generated the event.\nGesture that causes the subsequent clicks, if done within …\nIcon to use if the image cannot be displayed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>true</code> to <code>CursorIcon::Default</code> and <code>false</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHit-test result for the mouse point in the window.\nHit-test result for the mouse point in the window.\nHit-test result for the mouse point in the window, at the …\nHit-test result for the mouse point in the window.\nHit-test result for the mouse point in the window, at the …\nCustom icon image click point, when the image data does …\nPixel in the source image that is the exact mouse position.\nVariable that gets the current hovered window and widgets.\nGet the icon, image fallback or <code>None</code> if is hidden.\nCustom icon image source.\nDelay before each repeat event after the first.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  If the mouse pointer is pressed or captured by the …\nP  If the mouse pointer is pressed or captured by the …\nEvent caused by a pointer capture change.\nIf <code>MOUSE_CLICK_EVENT</code> will notify because of this input.\nIf the <code>button</code> is the context (right).\nIf the <code>button</code> is the context (right).\nIf the <code>widget_id</code> is in the <code>target</code> is disabled.\nReturns <code>true</code> if the widget is disabled in <code>target</code>.\nReturns <code>true</code> if the widget is disabled in <code>target</code>.\nReturns <code>true</code> if the widget is disabled in <code>target</code>.\nIf the <code>click_count</code> is <code>2</code>.\nIf the <code>widget_id</code> is in the <code>target</code> is enabled.\nReturns <code>true</code> if the widget is enabled in <code>target</code>.\nReturns <code>true</code> if the widget is enabled in <code>target</code>.\nReturns <code>true</code> if the widget is enabled in <code>target</code>.\nIf the <code>state</code> is pressed.\nReturns <code>true</code> if the <code>WIDGET</code> was not hovered, but now is.\nReturns <code>true</code> if the <code>WIDGET</code> was not hovered or was enabled, …\nReturns <code>true</code> if the <code>WIDGET</code> was not hovered or was …\nReturns <code>true</code> if the <code>WIDGET</code> was hovered, but now isn’t.\nReturns <code>true</code> if the <code>WIDGET</code> was hovered and disabled, but …\nReturns <code>true</code> if the <code>WIDGET</code> was hovered and enabled, but …\nEvent caused by the mouse position moving over/out of the …\nP  If the mouse pointer is pressed in the widget and it is …\nP  If the mouse pointer is pressed in the widget and it is …\nIf the <code>state</code> is released.\nIf the <code>widget_id</code> is in the <code>target</code>.\nReturns <code>true</code> if the <code>WIDGET</code> is in <code>target</code> and is allowed by …\nIf the <code>button</code> is the primary.\nIf the <code>button</code> is the primary.\nIf the event was generated by holding the button pressed …\nIf the modifiers allow the event to be used for scrolling.\nGets the sign status of x and y.\nGets the sign status of x and y.\nIf the <code>click_count</code> is <code>1</code>.\nIf the <code>click_count</code> is <code>3</code>.\nEvent caused by the widget moving under/out of the mouse …\nIf the modifiers allow the event to be used for zooming.\nClick on press+release or repeat.\nWhat modifier keys where pressed when this event happened.\nWhat modifier keys where pressed when this event happened.\nWhat modifier keys where pressed when this event happened.\nWhat modifier keys where pressed when this event happened.\nVariable that defines the click-count increment time and …\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nP  Mouse clicked on the disabled widget with any button, …\nP  Mouse clicked on the disabled widget with any button, …\nP  Mouse clicked on the disabled widget with the primary …\nP  Mouse clicked on the disabled widget with the primary …\nP  Mouse entered or left the widget and descendant widgets …\nP  Mouse entered or left the widget and descendant widgets …\nP  Mouse button pressed or release while the cursor is …\nP  Mouse button pressed or release while the cursor is …\nP  Mouse wheel scrolled while pointer is hovering widget …\nP  Mouse wheel scrolled while pointer is hovering widget …\nP  Mouse clicked on the widget with any button and …\nP  Mouse clicked on the widget with any button and …\nP  Mouse double clicked on the widget with any button and …\nP  Mouse double clicked on the widget with any button and …\nP  Mouse clicked on the widget with any button but …\nP  Mouse clicked on the widget with any button but …\nP  Mouse triple clicked on the widget with any button and …\nP  Mouse triple clicked on the widget with any button and …\nP  Mouse clicked on the widget with the primary button …\nP  Mouse clicked on the widget with the primary button …\nP  Mouse double clicked on the widget with the primary …\nP  Mouse double clicked on the widget with the primary …\nP  Mouse button pressed while the cursor is over the …\nP  Mouse button pressed while the cursor is over the …\nP  Mouse is now over the widget or a descendant widget, …\nP  Mouse is now over the widget or a descendant widget, …\nP  Mouse entered or left the widget and descendant widgets …\nP  Mouse entered or left the widget and descendant widgets …\nP  Mouse button pressed or released while the cursor is …\nP  Mouse button pressed or released while the cursor is …\nP  Mouse is no longer over the widget or any descendant …\nP  Mouse is no longer over the widget or any descendant …\nP  Mouse cursor moved over the widget and cursor capture …\nP  Mouse cursor moved over the widget and cursor capture …\nP  Mouse wheel scrolled while pointer is hovering the …\nP  Mouse wheel scrolled while pointer is hovering the …\nP  Mouse clicked on the widget with the primary button …\nP  Mouse clicked on the widget with the primary button …\nP  Mouse triple clicked on the widget with the primary …\nP  Mouse triple clicked on the widget with the primary …\nP  Mouse button released while the cursor if over the …\nP  Mouse button released while the cursor if over the …\nP  Mouse wheel scrolled while pointer is hovering widget …\nP  Mouse wheel scrolled while pointer is hovering widget …\nP  Mouse wheel scrolled while pointer is hovering the …\nP  Mouse wheel scrolled while pointer is hovering the …\nP Preview <code>on_disabled_mouse_any_click</code> event.\nP Preview <code>on_disabled_mouse_any_click</code> event.\nP Preview <code>on_disabled_mouse_click</code> event.\nP Preview <code>on_disabled_mouse_click</code> event.\nP Preview <code>on_disabled_mouse_hovered</code> event.\nP Preview <code>on_disabled_mouse_hovered</code> event.\nP Preview <code>on_disabled_mouse_input</code> event.\nP Preview <code>on_disabled_mouse_input</code> event.\nP Preview <code>on_disabled_mouse_wheel</code> event.\nP Preview <code>on_disabled_mouse_wheel</code> event.\nP Preview <code>on_mouse_any_click</code> event.\nP Preview <code>on_mouse_any_click</code> event.\nP Preview <code>on_mouse_any_double_click</code> event.\nP Preview <code>on_mouse_any_double_click</code> event.\nP Preview <code>on_mouse_any_single_click</code> event.\nP Preview <code>on_mouse_any_single_click</code> event.\nP Preview <code>on_mouse_any_triple_click</code> event.\nP Preview <code>on_mouse_any_triple_click</code> event.\nP Preview <code>on_mouse_click</code> event.\nP Preview <code>on_mouse_click</code> event.\nP Preview <code>on_mouse_double_click</code> event.\nP Preview <code>on_mouse_double_click</code> event.\nP Preview <code>on_mouse_down</code> event.\nP Preview <code>on_mouse_down</code> event.\nP Preview <code>on_mouse_enter</code> event.\nP Preview <code>on_mouse_enter</code> event.\nP Preview <code>on_mouse_hovered</code> event.\nP Preview <code>on_mouse_hovered</code> event.\nP Preview <code>on_mouse_input</code> event.\nP Preview <code>on_mouse_input</code> event.\nP Preview <code>on_mouse_leave</code> event.\nP Preview <code>on_mouse_leave</code> event.\nP Preview <code>on_mouse_move</code> event.\nP Preview <code>on_mouse_move</code> event.\nP Preview <code>on_mouse_scroll</code> event.\nP Preview <code>on_mouse_scroll</code> event.\nP Preview <code>on_mouse_single_click</code> event.\nP Preview <code>on_mouse_single_click</code> event.\nP Preview <code>on_mouse_triple_click</code> event.\nP Preview <code>on_mouse_triple_click</code> event.\nP Preview <code>on_mouse_up</code> event.\nP Preview <code>on_mouse_up</code> event.\nP Preview <code>on_mouse_wheel</code> event.\nP Preview <code>on_mouse_wheel</code> event.\nP Preview <code>on_mouse_zoom</code> event.\nP Preview <code>on_mouse_zoom</code> event.\nTouch state if the device that generated the event is a …\nVariable that gets current hovered window and cursor point …\nPosition of the mouse in the window’s content area.\nPosition of the mouse in the window’s content area.\nPosition of the mouse in the coordinates of <code>target</code>.\nPosition of the mouse in the window.\nPosition of the mouse in the coordinates of <code>target</code>.\nMouse position in the window.\nGets position in the widget inner bounds.\nGets position in the widget inner bounds.\nGets position in the widget inner bounds.\nGets position in the widget inner bounds.\nGets position in the widget inner bounds.\nClick on <code>ClickTrigger::Press</code>.\nPrevious pointer capture.\nPrevious top-most hit before the mouse moved.\nRaw mouse hardware events, received independent of what …\nClick on release.\nClick on press and repeat.\nIf a mouse button is held pressed after a delay generate …\nVariable that gets and sets the config for …\nReturns the delta for a scrolling operation, depending on …\nSets the click mode of the widget.\nSwaps the delta axis if <code>modifiers</code> contains <code>SHIFT</code>.\nGesture that causes the <em>first</em> click, that is a click that …\nEstimated icon size and click spot in that size.\nCursor image source.\nDelay before repeat starts.\nThe state the <code>button</code> was changed to.\nVariable that tracks the system click-count increment time …\nFull path to the top-most hit in <code>hits</code>.\nFull path to the top-most hit in <code>hits</code>.\nFull path to the widget that got clicked.\nFull path to the top-most hit in <code>hits</code>.\nFull path to the widget that got scrolled.\nMaximum time interval between clicks.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nTimestamp of the mouse move.\nReturns <code>true</code> if the widget was disabled in <code>prev_target</code>.\nReturns <code>true</code> if the widget was enabled in <code>prev_target</code>.\nReturns <code>true</code> if the <code>WIDGET</code> is in <code>prev_target</code> and is …\nId of window that received the event.\nId of window that received the event.\nId of window that received the event.\nId of window that received the event.\nId of window that received the event.\nWindow the mouse is hovering.\nReturns the delta for a zoom-in/out operation, depending …\nButton press/release from a device, probably a mouse.\nArguments for the <code>BUTTON_EVENT</code>.\nMouse device unfiltered move delta.\nMouse device unfiltered wheel motion delta.\nArguments for <code>MOUSE_MOTION_EVENT</code>.\nArguments for <code>MOUSE_WHEEL_EVENT</code>.\nButton raw id.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nMotion (x, y) delta.\nWheel motion delta, value is in pixels if the <em>wheel</em> is a …\nMouse device that generated the event.\nMouse device that generated the event.\nDevice that generated the event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nIf the button was pressed or released.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nW  Represents a dynamic layout panel.\nW  Represents a dynamic layout panel.\nArguments for <code>panel_fn</code>.\nc  Panel items.\nThe panel children.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPanel widget child node.\nP  Widget function that generates the panel layout widget.\nP  Widget function that generates the panel layout widget.\nP  Widget function that generates the panel layout widget.\nStart building a new instance.\nGets the widget type info.\nInformation about mouse and touch capture in a mouse or …\nMouse and touch capture mode.\nMouse and touch capture service.\nMouse and touch capture changed event.\n<code>POINTER_CAPTURE_EVENT</code> arguments.\nMouse and touch events inside the widget sub-tree …\nMouse and touch events redirected to the widget.\nMouse and touch captured by the window only.\nIf the widget is allowed by the current capture.\nP  Capture mouse and touch for the widget on press.\nP  Capture mouse and touch for the widget on press.\nP  Capture mouse and touch for the widget on init.\nP  Capture mouse and touch for the widget on init.\nSet a widget to be the root of a capture subtree.\nSet a widget to redirect all mouse and touch events to.\nVariable that gets the current capture target and mode.\n<code>CaptureMode::Window</code>\nThe <code>prev_capture</code> and <code>new_capture</code> paths start with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert <code>true</code> to <code>CaptureMode::Widget</code> and <code>false</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the <code>widget_id</code> got pointer capture with this update.\nIf the <code>widget_id</code> lost pointer capture with this update.\nIf the same widget has pointer capture, but the capture …\nIf the same widget has pointer capture, but the widget …\nCapture mode, see <code>allows</code> for more details.\nNew args from values that convert into the argument types.\nnew mouse and capture target and mode.\nArguments for event that happened now (<code>INSTANT.now</code>).\nP  Widget acquired mouse and touch capture.\nP  Widget acquired mouse and touch capture.\nP  Widget lost mouse and touch capture.\nP  Widget lost mouse and touch capture.\nP  Widget acquired or lost mouse and touch capture.\nP  Widget acquired or lost mouse and touch capture.\nP Preview <code>on_got_pointer_capture</code> event.\nP Preview <code>on_got_pointer_capture</code> event.\nP Preview <code>on_lost_pointer_capture</code> event.\nP Preview <code>on_lost_pointer_capture</code> event.\nP Preview <code>on_pointer_capture_changed</code> event.\nP Preview <code>on_pointer_capture_changed</code> event.\nPrevious mouse and touch capture target and mode.\nRelease the current mouse and touch capture back to window.\nWidget that is capturing all mouse and touch events. The …\nInstant the event happened.\nBuild/instantiation context is captured and blended with …\nPopup is closed.\nDefines if a <code>Popup!</code> captures the build/instantiation …\nW  Popup default style.\nW  Popup default style.\nCalls <code>POPUP.force_close</code>.\nNo context capture except the popup configuration context.\nPopup is open and can close itself, or be closed using the …\nPopup will open on the next update.\nPopup service.\nClose the popup.\nClosing popup event.\nW  An overlay container.\nW  An overlay container.\nOptional parameter for <code>POPUP_CLOSE_CMD</code>.\nArguments for <code>POPUP_CLOSE_REQUESTED_EVENT</code>.\nIdentifies the lifetime state of a popup managed by <code>POPUP</code>.\nCalls <code>POPUP.close</code>.\nGets a read-only var that tracks the anchor widget in a …\nP  Defines the popup placement and size for popups open by …\nP  Defines the popup placement and size for popups open by …\nClose the popup widget when <code>state</code> is not already closed.\nP  Delay awaited before actually closing when popup close …\nP  Delay awaited before actually closing when popup close …\nP  Delay awaited before actually closing when popup close …\nClose the popup widget by known ID.\nP  Popup behavior when it loses focus.\nP  Popup behavior when it loses focus.\nP  Defines if the popup captures the local context to load …\nP  Defines if the popup captures the local context to load …\nCaptures all context-vars by default, and blend then over …\nP  Popup focus behavior when it or a descendant receives a …\nClose the popup widget when <code>state</code> is not already closed, …\nClose the popup widget without notifying the request event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  If close was requested for this layered widget and it …\nP  If close was requested for this layered widget and it …\nP  If close was requested for this layered widget and it …\nNew args from values that convert into the argument types.\nArguments for event that happened now (<code>INSTANT.now</code>).\nP  Closing popup event.\nP  Closing popup event.\nP Preview <code>on_popup_close_requested</code> event.\nP Preview <code>on_popup_close_requested</code> event.\nOpen the <code>popup</code> using the current context config vars.\nOpen the <code>popup</code> using the custom config vars.\nThe popup that has close requested.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nP  Extends or replaces the widget style.\nInstant the event happened.\nStart building a new instance.\nStart building a new instance.\nGets the widget type info.\nGets the widget type info.\nWhat context values are captured.\nIf the captured context is blended over or under the node …\nW  Progress view default style (progress bar with message …\nW  Progress view default style (progress bar with message …\nThe progress status value in a <code>ProgressView</code>\nW  Progress indicator widget.\nW  Progress indicator widget.\nW  Progress view style that is only the progress bar, no …\nW  Progress view style that is only the progress bar, no …\nP  Collapse visibility when <code>Progress::is_complete</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nP  Getter property that is <code>true</code> when progress is …\nP  Getter property that is <code>true</code> when progress is …\nP  Getter property that is <code>true</code> when progress is …\nP  Event raised when progress updates to a complete state …\nP  Event raised when progress updates to a complete state …\nP  Event raised when progress updates to a complete state …\nP  Event raised for each progress update, and once after …\nP  Event raised for each progress update, and once after …\nP  Event raised for each progress update, and once after …\nP  The progress status to be displayed.\nP  Extends or replaces the widget style.\nStart building a new instance.\nStart building a new instance.\nStart building a new instance.\nGets the widget type info.\nGets the widget type info.\nGets the widget type info.\nLet the renderer select the algorithm, currently this is …\nEnable synthetic bold. Font resolution finds the closest …\nValue that is updated with frame update requests.\nBuilder for a chain of render and hit-test clips.\nThe image is scaled with an algorithm that preserves …\nNo synthetic font generated, if font resolution does not …\nEnabled all synthetic font possibilities.\nConfigure if a synthetic font is generated for fonts that …\nA full frame builder.\nIdentifier of a frame or frame update.\nA frame quick update.\nRepresents a frame value that may be updated.\nUnique key of an updatable value in the view-process frame.\nRepresents an update targeting a previously setup …\nBuilder for the hit-testable shape of the inner-bounds of …\nBuilder for a chain of hit-test clips.\nDummy frame ID.\nImage scaling algorithm in the renderer.\nEnable synthetic oblique. If the font resolution does not …\nWhen scaling the image up, the image appears to be …\nRepresents an unique key for a spatial reference frame …\nRepresents a display list reuse range.\nUnique ID of a reference frame.\nValue is not updated, a new frame must be send to change …\nGet a flags value with all known bits set.\nIf the value is updating rapidly.\nCurrent culling rect, widgets with outer-bounds that don’…\nReturns <code>true</code> if hit-tests are automatically pushed by …\nReturns <code>true</code> if all transform updates are also applied to …\nCreate a binding with this key.\nLike <code>bind</code> but the key is modified to include the …\nCreate a binding with this key and <code>var</code>.\nLike <code>bind_var</code> but the key is modified to include the …\nCreate a binding with this key, <code>var</code> and already mapped …\nLike <code>bind_var_mapped</code> but the key is modified to include …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIf previously generated display list items are available …\nIf widget update can be <em>skipped</em> by setting reuse in …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n<code>FontSynthesis::ENABLED</code>\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet the full frame ID.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFinalizes the build.\nFinalize the update.\nCreate first frame id of a window.\nId of the new frame.\nId of the new frame.\nFrame that owns the reused items selected by this range.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert to full <code>ENABLED</code> or <code>DISABLED</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nKey from a <code>FrameValueKey&lt;PxTransform&gt;</code>.\nKey from a <code>FrameValueKey&lt;PxTransform&gt;</code> and <code>u32</code> index.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nKey from <code>SpatialFrameId</code>.\nKey from <code>SpatialFrameId</code> and <code>u32</code> index.\nKey from <code>WidgetId</code> and <code>u32</code> index.\nRetrieve the underlying value.\nGet the raw ID.\nCalls <code>update</code> with <code>is_visible</code> set to <code>false</code>.\nCalls <code>render</code> with <code>is_visible</code> set to <code>false</code>.\nGets the inner-bounds hit-test shape builder.\nValue ID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto the (initial) value.\nWhether all known bits in this flags value are set.\nIf the reuse range did not capture any display item.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if hit-testing is enabled in the widget …\nIf the widget is hit-testable, if this is <code>false</code> all …\nReturns <code>true</code> if the widget reference frame and stacking …\nReturns <code>true</code> if the widget stacking context is still being …\nReturns <code>true</code> if the widget inner transform update is still …\nIf is building a frame for a headless and renderless …\nReturns <code>true</code> if display items are actually generated, if …\nReturns <code>true</code> if view updates are actually collected, if …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nNew builder.\nNew frame update builder.\n<code>new</code> with only the inputs required for renderless mode.\nGenerates a new unique ID.\nGenerates a new unique ID.\nCreate the next full frame ID after the current one.\nCreate the next update frame ID after the current one.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCollect display list from <code>split</code> into <code>self</code>.\nCollect updates from <code>split</code> into <code>self</code>.\nCreate a new display list builder that can be built in …\nCreate an update builder that can be send to a parallel …\nPush a standalone backdrop filter.\nPush a border.\nPushes a composite hit-test that defines a border.\nPush a nine-patch border with conic gradient source.\nPush a nine-patch border with image source.\nPush a nine-patch border with linear gradient source.\nPush a nine-patch border with radial gradient source.\nPre-starts the scope of a widget with <code>offset</code> set for the …\nPush a clip ellipse.\nPush a clip ellipse that affects the <code>inner_hit_test</code>.\nCalls <code>render</code> with a new clip context that adds the …\nPushes the <code>clip_rect</code>.\nPush a clip <code>rect</code>.\nPush a clip <code>rect</code> that affects the <code>inner_hit_test</code>.\nCalls <code>render</code> with a new clip context that adds the …\nPush the <code>clip_rect</code> with rounded <code>corners</code>.\nPush a clip <code>rect</code> with rounded <code>corners</code>.\nPush a clip <code>rect</code> with rounded <code>corners</code> that affects the …\nCalls <code>clips</code> to push multiple clips that define a new clip …\nPush clips that affect the <code>inner_hit_test</code>.\nPush a color rectangle.\nPush a repeating conic gradient rectangle.\nPush a <code>color</code> dot to mark the <code>offset</code>.\nRecord the <code>offset</code> in the current context and <code>push_debug_dot</code>…\nPush a hit-test ellipse.\nPush a custom display extension context that wraps <code>render</code>.\nPush a custom display extension context with custom …\nPush a custom display extension item.\nPush a custom display extension item with custom encoding.\nCalls <code>render</code> with added <code>blend</code> and <code>filter</code> stacking context.\nPush an image.\nPush the widget reference frame and stacking context then …\nInclude a widget backdrop filter and continue the render …\nSets the widget blend mode and continue the render build.\nIncludes a widget filter and continues the render build.\nIncludes a widget opacity filter and continues the render …\nInclude the <code>transform</code> on the widget inner reference frame.\nPush a styled vertical or horizontal line.\nPush a repeating linear gradient rectangle.\nPush an image mask that affects all visual rendered by …\nCalls <code>render</code> with added opacity stacking context.\nPush a repeating radial gradient rectangle.\nPush a hit-test <code>rect</code>.\nCalls <code>render</code> inside a new reference frame transformed by …\nIf <code>group</code> has a range and <code>can_reuse</code> a reference to the …\nPush a hit-test <code>rect</code> with rounded <code>corners</code>.\nPush a text run.\nPushes a transform that affects the <code>inner_hit_test</code>.\nStart a new widget outer context, this sets <code>is_outer</code> to …\nThe intersection of a source flags value with the …\nExternal render update requests for this frame.\nExternal render update requests for this frame.\nExternal render requests for this frame.\nConnection to the renderer that will render this frame.\nUpdate the info transforms of the widget and descendants.\nPixel scale factor used by the renderer.\nUn-scramble the underlying value to get the original …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the color used to clear the pixel frame before drawing …\nChange the color used to clear the pixel buffer when …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTo view key.\nTo view key with an extra <code>index</code> modifier.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCurrent transform.\nCurrent transform.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreate a value update with this key.\nGet the frame update ID.\nLike <code>update</code> but the key is modified to include the …\nUpdate a color value.\nUpdate a color value, if there is one.\nUpdate a custom extension value.\nUpdate a custom extension value with custom encoding.\nUpdate a float value.\nUpdate a float value, if there is one.\nUpdate the widget’s inner transform.\nUpdate a transform value that does not potentially affect …\nUpdate a transform value, if there is one.\nCreate a value update with this key and <code>var</code>.\nLike <code>update_var</code> but the key is modified to include the …\nCreate a value update with this key, <code>var</code> and already …\nLike <code>update_var_mapped</code> but the key is modified to include …\nUpdate the widget’s outer transform.\nReference the (initial) value.\nNew value.\nId of the current widget context.\nRuns <code>render</code> and <code>hide</code> all widgets with outer-bounds that don…\nRuns <code>render</code> with <code>auto_hit_test</code> set to a value for the …\nRuns <code>render_update</code> with <code>auto_hit_test</code> set to a value for …\nCalls <code>render</code> with back face visibility set to <code>visible</code>.\nCalls <code>render_update</code> with an <code>offset</code> that affects the first …\nRuns <code>render</code> with <code>aa</code> used as the default text anti-aliasing …\nRuns <code>render</code> with hit-tests disabled, inside <code>render</code> …\nUpdate the transform applied after the inner bounds …\nCalls <code>render</code> to render a separate nested window on this …\nCalls <code>update</code> to render update a separate nested window on …\nCalls <code>render</code> with <code>can_reuse</code> set to <code>false</code>.\nCalls <code>render_update</code> with <code>can_reuse_widget</code> set to <code>false</code>.\nUpdate a transform that potentially affects widget bounds.\nUpdate a transform that potentially affects widget bounds, …\nCalls <code>render_update</code> while the <code>transform</code> is updated to …\nIf the value will update rapidly.\nID that will be used to update the value.\nInitial value.\nW  Draws a horizontal or vertical rule line.\nW  Draws a horizontal or vertical rule line.\nc  Line color.\nReturns the argument unchanged.\nHorizontal rule line widget and properties.\nCalls <code>U::from(self)</code>.\nc  Line length.\nc  Line style.\nP  Margin around the line.\nc  Line orientation.\nc  Line stroke thickness.\nVertical rule line widget and properties.\nStart building a new instance.\nGets the widget type info.\nW  Draws an horizontal <code>RuleLine!</code>.\nW  Draws an horizontal <code>RuleLine!</code>.\nP  Sets the <code>COLOR_VAR</code> that affects all horizontal rules …\nP  Sets the <code>COLOR_VAR</code> that affects all horizontal rules …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nP  Sets the <code>LINE_STYLE_VAR</code> that affects all horizontal …\nP  Sets the <code>LINE_STYLE_VAR</code> that affects all horizontal …\nP  Sets the <code>MARGIN_VAR</code> that affects all horizontal rules …\nP  Sets the <code>MARGIN_VAR</code> that affects all horizontal rules …\nP  Sets the <code>STROKE_THICKNESS_VAR</code> that affects all …\nP  Sets the <code>STROKE_THICKNESS_VAR</code> that affects all …\nStart building a new instance.\nGets the widget type info.\nW  Draws a vertical <code>RuleLine!</code>.\nW  Draws a vertical <code>RuleLine!</code>.\nP  Sets the <code>COLOR_VAR</code> that affects all vertical rules …\nP  Sets the <code>COLOR_VAR</code> that affects all vertical rules …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nP  Sets the <code>LINE_STYLE_VAR</code> that affects all vertical rules …\nP  Sets the <code>LINE_STYLE_VAR</code> that affects all vertical rules …\nP  Sets the <code>MARGIN_VAR</code> that affects all vertical rules …\nP  Sets the <code>MARGIN_VAR</code> that affects all vertical rules …\nP  Sets the <code>STROKE_THICKNESS_VAR</code> that affects all vertical …\nP  Sets the <code>STROKE_THICKNESS_VAR</code> that affects all vertical …\nStart building a new instance.\nGets the widget type info.\nNode always loaded.\nNode lazy loaded.\nContent can be any width and scrolls horizontally if …\nLazy loading mode of a widget.\nContent size is constrained by the viewport and is not …\nContent can be any size and scrolls if overflow.\nScroll amount added to the offset already rendered, this …\nControls the parent scroll.\nW  A container that can pan and zoom a child of any size.\nW  A container that can pan and zoom a child of any size.\nArguments for scrollbar widget functions.\nDefines a scroll delta and to what value source it is …\nShared reference to the viewport bounds of a scroll.\nWhat dimensions are scrollable in a widget.\nm  Properties that define scroll units.\nW  Scrollbar widget.\nW  Scrollbar widget.\nm  Properties that defines the scrollbar widget used in …\nSmooth scrolling config.\nW  Scrollbar thumb widget.\nW  Scrollbar thumb widget.\nContent can be any height and scrolls vertically if …\nScroll amount added to the offset var current value, if …\nScroll amount added to the value the offset var is …\nScroll extensions for <code>WidgetInfo</code>.\nContent can be any size and scrolls if overflow (<code>PAN</code>) and …\nGet a flags value with all known bits set.\nP  Scroll unit multiplier used when alternate scrolling.\nP  Scroll unit multiplier used when alternate scrolling.\nP  Scroll unit multiplier used when alternate scrolling.\nP  Extra space added to the viewport auto-hide rectangle.\nP  Extra space added to the viewport auto-hide rectangle.\nP  Extra space added to the viewport auto-hide rectangle.\nAnimate scroll at the direction and velocity (in DIPs per …\nP  Enables or disables auto scroll on mouse middle click.\nP  Auto scroll icon/indicator node.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets a var that is <code>true</code> when the content height is greater …\nGets a var that is <code>true</code> when the content width is greater …\nGets a var that is <code>true</code> when the content width is greater …\nGets a var that is <code>true</code> when the content width is greater …\nGets a var that is <code>true</code> when the content height is greater …\nGets a var that is <code>true</code> when the content height is greater …\nReturns <code>true</code> if the content can be scaled and the current …\nReturns <code>true</code> if the content can be scaled and the current …\nSet the horizontal offset to a new offset derived from the …\nSet the vertical offset to a new offset derived from the …\nSet the zoom scale to a new scale derived from the last …\nP  Content alignment when it is smaller then the viewport.\nQuick ease horizontal overscroll to zero.\nQuick ease vertical overscroll to zero.\nP  Clip content to only be visible within the scroll …\nc  Clip content to only be visible within the viewport, …\nc  Clip content to only be visible within the viewport, …\nc  Clip content to only be visible within the viewport, …\nScroll commands.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNew node that holds data for the <code>SCROLL</code> context.\nWhether all set bits in a source flags value are also set …\nLatest content offset and size.\nGets the context variable that gets if the scrollbar …\nLatest computed content size of the parent scroll.\nInsert the context values used by <code>SCROLL</code> in the <code>set</code>.\nc  Width if orientation is vertical, otherwise height if …\nP  If the scroll defines its viewport size as the …\nP  If the scroll defines its viewport size as the …\nP  If the scroll defines its viewport size as the …\nThe intersection of a source flags value with the …\nNo smooth scrolling, scroll position updates immediately.\nChase transition duration.\nChase transition easing function.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nP  Enables keyboard controls.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>ZOOM</code> for <code>true</code> and <code>NONE</code> for <code>false</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLinear duration of smooth transition.\nReturns default config for <code>true</code>, <code>disabled</code> for <code>false</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nP  Horizontal offset added when the <code>SCROLL_RIGHT_CMD</code> runs …\nP  Horizontal offset added when the <code>SCROLL_RIGHT_CMD</code> runs …\nP  Horizontal offset added when the <code>SCROLL_RIGHT_CMD</code> runs …\nP  Horizontal offset added when the <code>PAGE_RIGHT_CMD</code> runs …\nP  Horizontal offset added when the <code>PAGE_RIGHT_CMD</code> runs …\nP  Horizontal offset added when the <code>PAGE_RIGHT_CMD</code> runs …\nP  Horizontal scrollbar function for all scroll widget …\nP  Horizontal scrollbar function for all scroll widget …\nP  Horizontal scrollbar function for all scroll widget …\nP  Horizontal offset added when the mouse wheel is …\nP  Horizontal offset added when the mouse wheel is …\nP  Horizontal offset added when the mouse wheel is …\nIf the horizontal scrollbar should be visible.\nHorizontal offset of the parent scroll.\nP  Binds the <code>horizontal_offset</code> scroll var to the property …\nExtra horizontal offset requested that could not be …\nRatio of the scroll parent viewport width to its content.\nGets the ID of the scroll ancestor represented by the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nIf this config represents <code>disabled</code>.\nIf lazy init is disabled.\nWhether all bits in this flags value are unset.\nIf lazy init is mode.\nReturns <code>true</code> if the widget is a <code>Scroll!</code>.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGets the layout size of both scroll-bars.\nP  Enables lazy init for the widget.\nP  Enables lazy init for the widget.\nEnable lazy mode with a node that estimates the widget …\nLike <code>lazy</code>, but only considers the width and horizontal …\nLike <code>lazy</code>, but only considers the height and vertical …\nP  Horizontal and vertical offsets used when scrolling.\nP  Horizontal and vertical offsets used when scrolling.\nP  Horizontal and vertical offsets used when scrolling.\nP  Maximum scale allowed when <code>ScrollMode::ZOOM</code> is enabled.\nP  Maximum scale allowed when <code>ScrollMode::ZOOM</code> is enabled.\nP  Maximum scale allowed when <code>ScrollMode::ZOOM</code> is enabled.\nP  Minimum scale allowed when <code>ScrollMode::ZOOM</code> is enabled.\nP  Minimum scale allowed when <code>ScrollMode::ZOOM</code> is enabled.\nP  Minimum scale allowed when <code>ScrollMode::ZOOM</code> is enabled.\nc  Scroll mode.\nc  Scroll mode.\nScroll mode of the parent scroll.\nc  Scroll mode.\nP  Scroll by grabbing and dragging the content with the …\nP  Scroll by grabbing and dragging the content with the …\nP  Scroll by grabbing and dragging the content with the …\nArguments from scroll context.\nNew custom smooth scrolling config.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nc  Content offset.\nGets the context variable that gets and sets the offset …\nLike <code>lazy</code> but the widget stays inited after the first, …\nLike <code>once</code>, but only considers the width and horizontal …\nLike <code>once</code>, but only considers the height and vertical …\nc  Scrollbar orientation.\nScrollbar orientation.\nP  Color of the overscroll indicator.\nP  Color of the overscroll indicator.\nP  Color of the overscroll indicator.\nP  Horizontal and vertical offsets used when …\nP  Horizontal and vertical offsets used when …\nP  Horizontal and vertical offsets used when …\nThe intersection of a source flags value with the …\nLatest rendered offset.\nLatest rendered zoom scale factor.\nApplies the <code>delta</code> to the horizontal offset.\nApplies the <code>delta</code> to the horizontal offset, but clamps the …\nApplies the <code>delta</code> to the horizontal offset without smooth …\nAnimates to <code>delta</code> over <code>duration</code>.\nReturns a reference to the viewport bounds if the widget …\nScroll the <code>WIDGET</code> into view.\nP  Scroll-to mode used by scroll widgets when scrolling to …\nP  Scroll-to mode used by scroll widgets when scrolling to …\nP  Scroll-to mode used by scroll widgets when scrolling to …\nScroll the <code>WIDGET</code> into view and adjusts the zoom scale.\nApplies the <code>delta</code> to the vertical offset.\nApplies the <code>delta</code> to the vertical offset, but clamps the …\nApplies the <code>delta</code> to the vertical offset without smooth …\nAnimates to <code>delta</code> over <code>duration</code>.")