searchState.loadedDescShard("zng_view", 0, "View-Process implementation.\nExtensions API\nOpenGL bindings used by Webrender.\nPlatform specific types.\nRuns the view-process server in the current process and …\nLike <code>run_same_process</code> but with custom API extensions.\nRegister a <code>FnOnce(&amp;mut ViewExtensions)</code> closure to be …\nRuns the view-process server.\nWebrender build used in the view-process.\n<code>Self</code> equivalent in <code>webrender::units::DevicePixel</code> units.\n<code>Self</code> equivalent in <code>webrender::units::LayoutPixel</code> units.\n<code>Self</code> equivalent in <code>Px</code> units.\n<code>Self</code> equivalent in `webrender::units::WorldPixel units.\nSnapshot of a <code>BlobExtension</code> that can render/copy pixels.\nArguments for <code>BlobExtension::add</code>.\nRepresents a Webrender blob handler that can coexist with …\nArguments for <code>BlobExtension::prepare_resources</code>.\nArguments for <code>AsyncBlobRasterizer::rasterize</code>.\nArguments for <code>BlobExtension::update</code>.\nSender of <code>Event::ExtensionEvent</code> events.\nTracks extension external images for a renderer.\nArguments for <code>RendererExtension::frame_ready</code>.\nRepresents a managed OpenGL context connected to a window …\nConversion from <code>Px</code> to <code>webrender</code> units.\nArguments for <code>RendererExtension::redraw</code>.\nArguments for <code>RendererExtension::render_start</code> and …\nArguments for <code>RendererExtension::render_push</code> and …\nArguments for <code>RendererExtension::render_update</code>.\nArguments for <code>RendererExtension::command</code>.\nArguments for <code>RendererExtension::configure</code>\nArguments for <code>RendererExtension::renderer_deinited</code>.\nRepresents a view extension associated with a renderer …\nArguments for <code>RendererExtension::renderer_inited</code>.\nThe extension API.\nArguments for <code>ViewExtension::init</code>.\nView extensions register.\nArguments for <code>WindowExtension::command</code>.\nArguments for <code>WindowExtension::configure</code>\nArguments for <code>WindowExtension::window_deinited</code>.\nArguments for <code>WindowExtension::event</code>.\nRepresents a view extension associated with a headed …\nArguments for <code>WindowExtension::window_inited</code>.\nConversion from <code>webrender</code> to <code>Px</code> units.\nRegister a blob image if the request addresses this …\nThe window or surface render API.\nThe window or surface render API.\nThe window or surface render API.\nThe API used by the window or surface.\nThe render API used by the window or surface.\nThe API sender connected with the new renderer.\nAdd <code>other</code> to self.\nBlob extensions.\nCleanup any state related with the namespace.\nRun the extension as an app level command.\nCalled when a command request is made for the extension …\nCalled when a command request is made for the extension …\nRegister a command extension.\nRegister a command extension with custom encoded messages.\nConfig payload send with the window creation request …\nConfig payload send with the renderer creation request …\nEdit attributes for the new window.\nEdit options for the new renderer.\nOpenGL context used by the renderer.\nOpenGL context that will be used by the new renderer.\nOpenGL context used by the new renderer.\nOpenGL context.\nOpenGL context connected to the window or headless surface.\nOpenGL context connected to the window or headless surface.\nOpenGL context connected to the window or headless surface.\nOpenGL context connected to the window or headless surface.\nOpenGL context associated with the renderer.\nCreates a snapshot of the current state of blob images in …\nNew blob extension instance of the same type.\nEncoded data.\nEncoded data.\nRemove a blob image if the key was generated by this …\nCleanup any prepared resource for the font.\nCleanup any prepared resource for the font instance.\nWebrender value.\nThe document ID of the main content.\nThe document ID of the main content, already deinited.\nSets if multi-threading is allowed.\nCalled when the window receives an event.\nThe event.\nSender of <code>Event::ExtensionEvent</code> events.\nExtension index.\nExtension index.\nExternal images registry for the <code>renderer</code>.\nExternal images registry for the <code>renderer</code>.\nExternal images registry for the <code>renderer</code>.\nExternal images registry for the <code>renderer</code>.\nId of the new frame.\nFrame that finished rendering and is ready to redraw.\nCalled when Webrender finishes rendering a frame and it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe context.\nReturns the extension ID.\nCalled once at the start of the view-process.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContext is current on the calling thread.\nIf this extension can be dropped after window creation.\nIf this extension can be dropped after render creation.\nIf the display item is reused.\nIf the context runs on the CPU, not a GPU.\nBlob key.\nBlob key.\nThe webrender display list.\nThe webrender display list.\nSystem warning low memory, release unused memory, caches.\nSystem warning low memory, release unused memory, caches.\nSystem warning low memory, release unused memory, caches.\nRasterization request can be schedules in a way that …\nMake context current on the calling thread.\nUnique name and version of this extension.\nSet to <code>true</code> to rebuild the display list.\nWebrender options.\nPush payload, is empty for pop.\nUpdate payload.\nThe pipeline of the main content.\nThe pipeline of the main content, already deinited.\nPrepare resources that are not bundled in with the encoded …\nWebrender binding updates.\nRasterize the requests addressed for this rasterizer.\nCalled every time the window or surface redraws, after …\nIf a screen redraw is requested.\nRedraw flag.\nRegister an extension with the ID that will be assigned to …\nRegister a loaded image.\nRegister an OpenGL texture.\nCalled when a new display list finishes building.\nActual render mode used to create the context.\nCalled when a display item pop for the extension is found.\nCalled when a display item push for the extension is found.\nCalled when a new display list begins building.\nCalled when a render-update for the extension is found.\nCreate a <code>RendererExtension</code> for a new renderer instance.\nRegister a renderer extension with its own ID.\nThe window or surface renderer.\nThe window or surface renderer.\nThe window or surface renderer.\nThe new renderer.\nThe renderer.\nCalled just before the renderer is destroyed.\nCalled just after the renderer is created.\nThe command request.\nThe command request.\nRequests targeting any of the blob extensions. Each …\nRasterization requests for all rasterizers.\nResize surface.\nRasterization responses.\nApp resumed from a suspended state.\nSpace and clip tracker.\nSpace and clip tracker.\nScale factor of the screen or window.\nSend the event <code>payload</code>.\nWebrender services.\nCurrent size of the surface or window content.\nApp is being suspended, all graphic resources must be …\nSwap buffers if the context is double-buffered.\nA pool of blob tile buffers to mitigate the overhead of …\nWebrender value.\nReturns <code>self</code> in <code>Px</code> units.\nReturns <code>self</code> in <code>webrender::units::LayoutPixel</code> units.\nReturns <code>self</code> in <code>webrender::units::DevicePixel</code> units.\nReturns <code>self</code> in <code>webrender::units::WorldPixel</code> units.\nThe transaction that will send the display list.\nThe transaction that will send the display list.\nThe transaction that will send the properties update.\nUnregister the image or texture.\nUpdate a blob image if the request addresses this …\nWebrender value.\nWebrender value.\nCreate a <code>WindowExtension</code> for a new window instance.\nRegister a window extension with its own ID.\nWindow attributes that will be used to build the headed …\nWinit window if the renderer is associated with a headed …\nWinit window if the renderer is associated with a headed …\nWinit window if the renderer is associated with a headed …\nUnderlying winit window.\nUnderlying winit window.\nUnderlying winit window.\nUnderlying winit window.\nWinit window if the renderer is associated with a headed …\nCalled just after the window closes.\nCalled just after the window is created.")