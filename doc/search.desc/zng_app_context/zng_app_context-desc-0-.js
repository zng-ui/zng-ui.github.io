searchState.loadedDescShard("zng_app_context", 0, "App execution context.\nCapture all <code>context_local!</code> values and …\nIdentifies an app instance.\nAn app local storage.\nIdentifies an <code>AppLocal&lt;T&gt;</code> instance.\nRepresents an app lifetime, ends the app on drop.\nDefines a <code>LocalContext::capture_filtered</code> filter.\nRepresents an <code>AppLocal&lt;T&gt;</code> value that can be temporarily …\nProvides an identifying key for a context local value.\nCapture all <code>context_local!</code> and <code>TracingDispatcherContext</code> …\nIdentifies a selection of <code>LocalContext</code> values.\nCapture all variables not excluded, no <code>context_local!</code> nor …\nCapture all except this set.\nCapture only this set.\nTracks the current execution context.\nRepresents a read guard for an <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> that owns a …\nRepresents a write guard for an <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> that owns a …\nDon’t capture any.\nRead-only wrapper on an <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> contextual value.\nHelper, runs a cleanup action once on drop.\nRepresents a read guard for an <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> that owns a …\nRepresents a read guard for an <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> that owns a …\nRepresents the <code>tracing::dispatcher::get_default</code> dispatcher …\n Declares new app local variable.\nCapture a snapshot of the current context that can be …\nCapture a snapshot of the current context that only …\nChecks if the context local is in the set.\n Declares new app and context local variable.\nGets the key.\nCapture all <code>context_local!</code> and <code>TracingDispatcherContext</code>, …\nCapture all variables, no <code>context_local!</code> nor …\nGet the ID of the app that owns the current context.\nCalls <code>named</code> in a debug build and <code>new_unique</code> in a release …\nBlend <code>ctx</code> over <code>self</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nGet a clone of the value.\nClone a reference to the current value in the context or …\nRetrieve the underlying value.\nGet the underlying value.\nClone the current value in the context or the default …\nGets an ID for this local instance that is valid for the …\nGets an ID for this context local instance that is valid …\nInsert a context local.\nExtend this set with all <code>other</code> contexts.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets if no value is set in the context.\nIf the set has any values.\nNumber of unique values in the set.\nLock owned.\nLock owned.\nLocks this <code>RwLock</code> with shared read access, blocking the …\nMake a new <code>MappedRwLockReadGuardOwned</code> for a component of …\nMake a new <code>MappedRwLockReadGuardOwned</code> for a component of …\nMake a new <code>MappedRwLockReadGuardOwned</code> for a component of …\nMake a new <code>MappedRwLockWriteGuardOwned</code> for a component of …\nReturns the name associated with the ID or <code>&quot;&quot;</code>.\nGet or generate an ID with associated name.\nGenerate a new ID with associated name.\nNew.\nNew with closure that will run once on drop.\nNew empty context.\nNew empty.\nGenerates a new unique ID.\nGets if the read-only shared reference is to the same lock …\nRead lock the value associated with the current app.\nLocks this <code>RwLock</code> with shared read access, blocking the …\nLocks this <code>RwLock</code> with shared read access, blocking the …\nCreate a read lock and <code>map</code> it to a sub-value.\nGets a read-only shared reference to the current context …\nLocks this <code>RwLock</code> with shared read access, blocking the …\nLocks this <code>RwLock</code> with shared read access, blocking the …\nRegister to run when the app deinits and all clones of the …\nRemove a context local.\nRemoves all <code>other</code> contexts from this set.\nUn-scramble the underlying value to get the original …\nSet the value.\nAssociate a <code>name</code> with the ID, if it is not named.\nStart an app scope in the current thread.\nTry to get a clone of the value.\nTry lock owned.\nLock owned.\nTry lock owned.\nTry read lock the value associated with the current app.\nTry lock this <code>RwLock</code> with shared read access, blocking the …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nTry to create a read lock and <code>map</code> it to a sub-value.\nLocks this <code>RwLock</code> with shared read access, blocking the …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nTry to set the value.\nTry to write lock the value associated with the current …\nLocks this <code>RwLock</code> with exclusive write access, blocking …\nTry to create a write lock and <code>map</code> it to a sub-value.\nCollects a set of all the values in the context.\nCalls <code>f</code> with the <code>value</code> loaded in context.\nCalls <code>f</code> in the captured context.\nCalls <code>f</code> while all contextual values of <code>self</code> are set on the …\nSame as <code>with_context</code>, but <code>value</code> represents a variable.\nCalls <code>f</code> with no value loaded in context.\nWrite lock the value associated with the current app.\nLocks this <code>RwLock</code> with exclusive write access, blocking …\nCreate a write lock and <code>map</code> it to a sub-value.\nVars to not include.\nLocals to not include.")