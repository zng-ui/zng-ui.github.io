searchState.loadedDescShard("zng_var", 0, "Batch updated variables in an app context.\nOutput of <code>Var::actual_var</code>.\nMethods of <code>Var&lt;T&gt;</code> that are object safe.\nArguments for <code>AnyVar::hook_any</code>.\nTrait implemented for all <code>VarValue</code> types.\nRepresents a weak reference to an <code>AnyVar</code>.\nArc value that implements equality by pointer comparison.\nReference counted read/write variable.\nRepresents a type erased boxed var.\nRepresents a weak reference to a <code>BoxedAnyVar</code>.\nRepresents a <code>Var&lt;T&gt;</code> boxed.\nRepresents a weak reference to a <code>BoxedVar&lt;T&gt;</code>.\nVar capabilities can change.\nIdentifies the unique context a <code>ContextualizedVar</code> is in.\nRepresents another variable in a context.\nOutput of <code>Var::downgrade</code>.\nOutput of <code>Var::easing</code>.\nOutput of <code>Var::filter_map</code>.\nOutput of <code>Var::filter_map_bidi</code>.\nOutput of <code>Var::flat_map</code>.\nA property value that is not a variable but can be …\nA value-to-var conversion that consumes the value.\nRepresents a single value as <code>Var&lt;T&gt;</code>.\nVar can be modified.\nOutput of <code>Var::map</code>.\nOutput of <code>Var::map_bidi</code>.\nOutput of <code>Var::map_ref</code>.\nOutput of <code>Var::map_ref_bidi</code>.\nBuild a merge-var from any number of input vars of the …\nVar value can change.\nRepresents a <code>Vec&lt;T&gt;</code> that tracks changes when used inside a …\nOutput of <code>Var::read_only</code>.\nRead-only <code>ArcVar&lt;T&gt;</code>.\nContext var that is always read-only, even if it is …\nVariable used to notify the completion of an async …\nVariable used to listen to a one time signal that an async …\nArgs for <code>Var::trace_value</code>.\nOutput of <code>WeakVar::upgrade</code>.\nVariable updates and animation service.\nVARS APP integration.\nRepresents an observable value.\nVariable type that will wrap the <code>T</code> value.\nKinds of interactions allowed by a <code>Var&lt;T&gt;</code> in the current …\nHandle to a variable hook.\nRepresents a collection of var handles.\nArguments for <code>Var::hook</code>.\nError when an attempt to modify a variable without the …\nRepresents the current value in a <code>Var::modify</code> handler.\nRepresents an <code>AnyVar</code> <em>pointer</em> that can be used for …\nRepresents the last time a variable was mutated or the …\nRepresents a type that can be a <code>Var&lt;T&gt;</code> value.\nRepresents a weak reference to a <code>Var&lt;T&gt;</code>.\nGets the current <em>inner</em> var represented by this var. This …\nGets a clone of the represented var from <code>ContextVar&lt;T&gt;</code>, …\nGet a flags value with all known bits set.\nAdds an <code>animation</code> closure that is called every frame to …\nSchedule an animation that targets this variable.\nVar animation types and functions.\nVariable that defines a global scale for the elapsed time …\nRead-write that defines if animations are enabled on the …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nApply all pending updates, call hooks and update bindings.\nAccess to <code>dyn Any</code> methods.\nAccess to <code>dyn Any</code> methods.\nAccess to <code>dyn Any</code> methods.\nAccess to mut <code>dyn Any</code> methods.\nRemove only the <code>MODIFY</code> flag without removing <code>NEW</code>.\nTry cast to strongly typed args.\nAccess to <code>dyn Any</code> methods, on the underlying variable type …\nSetup a hook that assigns <code>other</code> with the new values of <code>self</code>…\nSetup two hooks that assigns <code>other</code> with the new values of …\nSetup a hook that assigns <code>other</code> with the new values of <code>self</code>…\nBind <code>self</code> to <code>other</code> and back with the new values of <code>self</code> …\nSetup a hook that assigns <code>other</code> with the new values of <code>self</code>…\nBind <code>self</code> to <code>other</code> and back without causing an infinite …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets the weak reference a as <code>BoxedWeakVar&lt;T&gt;</code>, does not …\nGets the variable as a <code>BoxedVar&lt;T&gt;</code>, does not double box.\nGets the variable as a <code>BoxedAnyVar</code>, does not double box.\nBuild the merge var.\nHas the <code>MODIFY</code> capability.\nFlags that indicate what operations the variable is …\nVariable capabilities when the request was made.\nChanges applied in the last var update.\nStarts an easing animation that <em>chases</em> a target value that …\nRemoves all elements.\nDrop all handles.\nClone the variable into a type erased box.\nClone the weak reference.\nClone the value.\nClone the value into a new boxed <code>LocalVar&lt;Self&gt;</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n Declares new <code>ContextVar</code> static items.\nCreate a var that redirects to this variable until the …\nGets the current context handle.\nInfo about the current context when requesting variable …\nReturns a wrapper that implements <code>fmt::Debug</code> to write the …\nThe intersection of a source flags value with the …\nReturns a wrapper that implements <code>fmt::Display</code> to write …\nAccess to <code>Box&lt;dyn Any&gt;</code> methods, with the <code>BoxedVar&lt;T&gt;</code> type.\nReference all custom tag values of type <code>T</code>.\nReference the value, if it is of type <code>T</code>.\nCreate a weak reference to this <em>Arc</em> variable.\nCreate a weak handle that can be used to monitor <code>self</code>, but …\nCreate a weak reference to this <em>Arc</em> variable.\nRemoves the specified range from the vector in bulk, …\nHandle to no variable.\nEmpty collection.\nSchedule an easing transition from the current value to …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nOscillate between the current value and <code>new_value</code> with an …\nOscillate between the current value and <code>new_value</code> with an …\nSchedule an easing transition from the current value to …\nCreate a vars that <code>ease</code> to each new value of <code>self</code>.\nCreate a vars that <code>ease_with</code> to each new value of <code>self</code>.\nGet a flags value with all bits unset.\nGets if <code>self</code> equals <code>other</code>.\n New variable from an expression with interpolated vars.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nClones and appends all elements in a slice to the Vec.\nCopies elements from <code>src</code> range to the end of the vector.\nCreates a ref-counted var that maps from this variable, …\nCreate a var that maps from this variable on read and to …\nCreate a <code>filter_map</code> that tries to convert from <code>T</code> to <code>O</code> …\nCreate a <code>filter_map</code> that tries to convert from <code>T</code> to <code>O</code> …\nReturns …\nCreate a var that maps to an inner variable that is found …\nVariable that defines the global frame duration, the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a clone of the current value.\nGet a clone of the current value, with type erased.\nGet the value as a debug <code>Txt</code>.\nGet a clone of the current value into <code>value</code>.\nMutate the <code>index</code>.\nGet a clone of the current value into <code>value</code> if the current …\nGet a clone of the current value, if it <code>is_new</code>.\nGet a clone of the current value into <code>value</code> if the current …\nGet a clone of the current value into <code>value</code> if the …\nGets the value as a display <code>String</code>.\nGets the value as a display <code>Txt</code>.\nVariable for getter properties (<code>get_*</code>, <code>actual_*</code>).\nIf <code>apply_updates</code> will do anything.\nKeep <code>value</code> alive until the handle or <code>self</code> are dropped.\nKeep <code>other</code> alive until the handle or <code>self</code> are dropped.\nSetups a callback for just after the variable value update …\nRegister a <code>handler</code> to be called when the current animation …\nSetups a callback for just after the variable value update …\nImplements <code>T: IntoVar&lt;U&gt;</code>, <code>T: IntoValue&lt;U&gt;</code> and optionally …\nRegister a closure called when <code>apply_updates</code> should be …\nRegister a closure called when a variable modify is about …\nInsert the <code>element</code> at the <code>index</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess to <code>Box&lt;dyn Any&gt;</code> methods.\nConverts into <code>BoxedVar&lt;T&gt;</code>.\nInto response, if received.\nConvert this variable to the value, if possible moves the …\nConverts the source value into a var.\nWhether all known bits in this flags value are set.\nIf cannot <code>MODIFY</code> and is not <code>CAPS_CHANGE</code>.\nIf cannot <code>NEW</code> and is not <code>CAPS_CHANGE</code>.\nIf the variable current value was set by an active …\nIf the variable represents different values depending on …\nIf the response is received.\nReturns <code>true</code> if the handle is a <code>dummy</code>.\nReturns <code>true</code> if empty or all handles are dummy.\nWhether all bits in this flags value are unset.\nGets if the <code>last_update</code> is the current update, meaning the …\nIf the response is not received yet.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLast update ID a variable was modified, if the ID is equal …\nCreates a var that maps from this variable.\nCreate a var that maps from this variable on read and to …\nCreate a <code>map</code> that converts from <code>T</code> to a <code>Txt</code> debug print.\nCreates a <code>map</code> that converts from <code>T</code> to <code>O</code> using <code>Into&lt;O&gt;</code>.\nCreate a mapping wrapper around <code>self</code>. The <code>map</code> closure is …\nCreate a mapping wrapper around <code>self</code>. The <code>map</code> closure is …\nMap to another response variable.\nMap the response value using <code>map</code>, if the variable is …\nCreate a <code>map</code> that converts from <code>T</code> to <code>String</code> using <code>ToString</code>.\nCreates a <code>map</code> that converts from <code>T</code> to <code>Txt</code> using <code>ToTxt</code>.\n Initializes a new <code>Var</code> with value made by merging multiple …\nSchedule a variable update, it will be applied on the end …\nInfallible <code>Var::modify</code>.\nGets a value that indicates the <em>importance</em> clearance that …\nID that is never new.\nNew empty.\nConstructs a new <code>ArcEq&lt;T&gt;</code>.\nNew from current value.\nNew from updated value and custom tag.\nGenerates a new unique handle.\nNew empty vec.\nRegister the next animation frame, if there are any active …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nKeep the <code>value</code> alive for  the app lifetime.\nHold the variable in memory until the app exit.\nDrop the handle without stopping the behavior it …\nDrop all handles without stopping their behavior.\nRemove the last element from the vec.\nPush an input.\nInsert the <code>element</code> at the end of the vec.\nAdd the <code>other</code> handle to the collection, if it is not dummy.\nAdd a custom tag object that will be shared with the var …\nAdd all custom tags.\nGets the pointer.\nGets a clone of the var that is always read-only.\nMove the element <code>from</code> index <code>to</code> index.\nRemove the <code>index</code> element.\nThe intersection of a source flags value with the …\nReserves capacity for at least additional more elements.\nResizes the Vec in-place so that len is equal to <code>new_len</code>.\nSets the one time response.\nSets the one time response.\nNew <code>ResponseVar</code> in the done state.\nNew paired <code>ResponderVar</code> and <code>ResponseVar</code> in the waiting …\nCreates a <code>ResponseVar</code> linked to this responder.\nCreates a <code>ResponseVar</code> linked to this responder.\nRetains only the elements specified by the predicate, …\nClone the response value, if present.\nClone the response, if present and new.\nSchedule animations started by <code>animate</code>, the closure is …\nReplace the value.\nSchedule a new <code>value</code> for the variable, it will be set in …\nInfallible <code>Var::set</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSchedule a new <code>value</code> for the variable, it will be set in …\nCalls <code>other.set_from(self)</code> and <code>self.bind(other)</code>.\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule a new <code>value</code> for the variable, it will be set in …\nInfallible <code>Var::set_from</code>.\nSet from <code>other</code> value at the time of update, mapped to the …\nInfallible <code>Var::set_from_map</code>.\nSets a custom <code>AnyVar::modify_importance</code> value.\nOscillate between <code>from</code> and <code>to</code>, the variable is set to <code>from</code> …\nSets the <code>sys_animations_enabled</code> read-only variable.\nMutate the <code>range</code>.\nVariable for state properties (<code>is_*</code>, <code>has_*</code>).\nSet the variable to <code>new_value</code> after a <code>delay</code>.\nOscillate between the current value and <code>new_value</code>, every …\nSet the variable to a sequence of values as a time <code>duration</code>…\nGets the number of strong references to the variable.\nGets the number of strong references to the variable.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoves an element from the vector and returns it.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRead-only that tracks if animations are enabled in the …\nCustom tags that will be shared with the var hooks if the …\nCustom tag objects.\nClone the custom tag objects set by the code that updated …\nReturns a mutable reference for modification.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDebug helper for tracing the lifetime of a value in this …\nShortens the vector, keeping the first <code>len</code> elements and …\nOther variable types.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSchedule a variable update, even if the value does no …\nNotify an update, even if the value does not actually …\nIf update was explicitly requested.\nInfallible <code>AnyVar::update</code>.\nDoes one animation frame if the frame duration has elapsed.\nId of the current vars update in the app scope.\nUpgrade to a strong <code>BoxedVar&lt;T&gt;</code> clone.\nUpgrade to a strong <code>AnyVar</code> clone.\nReference the updated value.\nReference the updated value.\nStrongly-typed reference to the new value.\nValue type ID.\nNew ref counted read/write variable with initial <code>value</code>.\nNew ref counted read/write variable with default initial …\nNew ref counted read/write variable with initial value …\nVar <em>pointer</em>, that can be used to identify if two variables …\nGets the <code>TypeId</code> of <code>T</code> in <code>Var&lt;T&gt;</code>.\nAwaits for <code>is_animating</code> to change from <code>true</code> to <code>false</code>.\nReturns a future that awaits until a response is received.\nReturns a future that awaits until a response is received …\nReturns a future that awaits until a response is received …\nAwaits for the <code>last_update</code> to change.\nAwaits for a value that passes the <code>predicate</code>.\nGets the number of weak references to the variable.\nGets the number of weak references to the variable.\n Initializes a new conditional var.\nVisit the current value of the variable.\nCreate a <code>VarHandles</code> collection with <code>self</code> and <code>other</code>.\nCalls <code>animate</code> while <code>controller</code> is registered as the …\nVisit the current value of the variable.\nNew with pre-allocated inputs.\nNew empty vec with pre-allocated capacity.\nRuns <code>action</code> with this context var representing the other …\nRuns <code>action</code> with <code>self</code> as the current context ID.\nRuns <code>action</code> with this context var representing the other …\nVisit the current value of the variable, if it <code>is_new</code>.\nVisit the current value of the variable, if it <code>is_new</code>.\nVisit the response, if present and new.\nVisit the response, if present.\nRepresents an animation in its closure.\nAnimations controller.\nRepresents a running animation.\nView on an app loop timer.\nRepresents the editable final value of a <code>Var::chase</code> …\nAn <code>AnimationController</code> that forces animations to run even …\nRepresents the current <em>modify</em> operation when it is …\nRepresents a simple transition between two values.\nRepresents a transition across multiple keyed values that …\nRepresents a type that can be animated between two values.\nImplement transition by delegating all type parts.\nWeak <code>AnimationHandle</code>.\nReturns <code>true</code> if <code>self</code> and <code>other</code> have the same animation or …\nReturns a value that indicates if animations are enabled …\n<code>dummy</code>.\nCreate a weak handle.\nCreate dummy handle that is always in the <em>stopped</em> state.\nCommon easing functions.\nReturns <code>true</code> if the <code>deadline</code> has elapsed, <code>false</code> if the …\nCompute the elapsed <code>EasingTime</code>, in the span of the total …\nCompute the time elapsed from <code>start_time</code> to <code>now</code>.\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nSet <code>animations_enabled</code> to <code>true</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nValue sampled at the <code>0.fct()</code> step.\nRegister a <code>handler</code> to be called once when the animation …\nRegister a <code>handler</code> to be called once when the current …\nIndicates the <em>override</em> importance of the operation, when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the <em>modify</em> request was made from inside an …\nIf another handle has called <code>perm</code>.\nIf another handle has called <code>stop</code>.\nKeyed values.\nSample the linear interpolation from <code>self</code> -&gt; <code>to</code> by <code>step</code>.\nModify the chase target, replaces the animation with a new …\nInitial value, is always of lowest importance.\nNew transition.\nNew weak handle that does not upgrade.\nNew transition.\nFrame timestamp.\nThe instant the current animation update started.\nCalled for each <code>animation</code> that starts in the controller …\nCalled for each <code>animation</code> that ends in the controller …\nDrops the handle but does <strong>not</strong> stop.\nRegister the future <code>deadline</code> for waking.\nSet the animation start time to now.\nNumber of times the animation restarted.\nCompute the transition value at the <code>step</code>.\nCompute the transition value at the <code>step</code>.\nReplace the chase target, replaces the animation with a …\nChange the start to an instant that computes the <code>elapsed</code> …\nChange the start time to an arbitrary value.\nSet the duration to the next animation update. The …\nThe instant this animation (re)started.\nDrops the handle and forces the animation to drop.\nDrop the animation after applying the current update.\nIf the animation will be dropped after applying the update.\nCurrent animation target.\nGlobal time scale for animations.\nValue sampled at the <code>1.fct()</code> step.\nGet the animation handle if it is still animating.\n<code>easing::back</code>.\nA unit cubic Bézier curve, used for timing functions in …\n<code>easing::bounce</code>.\n<code>easing::circ</code>.\n<code>easing::cubic</code>.\nCustom function.\nEasing functions as a value.\nEasing function output.\nEasing function input.\n<code>easing::elastic</code>.\n<code>easing::expo</code>.\n<code>easing::linear</code>.\n<code>easing::none</code>.\n<code>easing::quad</code>.\n<code>easing::quart</code>.\n<code>easing::quint</code>.\n<code>easing::sine</code>.\nCubic transition that goes slightly negative to start and …\nOscillating transition that grows in magnitude, does not …\nCubic transition with slightly slowed start then <code>cubic</code>.\nCubic transition (t³).\nX coordinate is time, Y coordinate is function advancement.\nNew custom function.\nCreate a closure that calls the easing function.\nApplies the <code>ease_fn</code>.\nApplies <code>ease_in</code> for the first half then <code>ease_out</code> scaled to …\nCreates a custom function that is <code>self</code> modified by …\nApplies the <code>ease_fn</code> in reverse and flipped.\nCreates a custom function that is <code>self</code> modified by …\nApplies <code>ease_out</code> for the first half then <code>ease_in</code> scaled to …\nCreates a custom function that is <code>self</code> modified by …\nNew easing time from total <code>duration</code>, <code>elapsed</code> time and …\nOscillating transition that grows in magnitude, goes …\nGets the end time, one.\nExponential transition. Very slow start, very fast end.\nGet the time as a <code>Factor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the time represents the end of the animation.\nIf the time represents the start of the animation.\nSimple linear transition, no easing, no acceleration.\nCreates a custom function that is <code>self</code> modified by <code>modifier</code>\nCreate a unit cubic Bézier curve from the two middle …\nNew from <code>Factor</code>.\nAlways <code>1.fct()</code>, that is, the completed transition.\nGet the time as a <code>FactorPercent</code>.\nQuadratic transition (t²).\nFourth power transition (t⁴).\nFifth power transition (t⁵).\nApplies the <code>ease_fn</code> in reverse.\nFlip the time.\nCreates a custom function that is <code>self</code> modified by …\nApplies the <code>ease_fn</code> flipped.\nCreates a custom function that is <code>self</code> modified by …\nSine transition. Slow start, fast end.\nSolve the bezier curve for a given <code>x</code> and an <code>epsilon</code>, that …\nGets the start time, zero.\nJumps to the final value by a number of <code>steps</code>.\nJumps to the final value by a number of <code>steps</code>.\nManually build a <code>ArcWhenVar&lt;T&gt;</code> from type erased parts.\nSee <code>Var::cow</code>.\nSee <code>Var::flat_map</code>.\nSee <code>merge_var!</code>.\nSee <code>when_var!</code>.\nAll elements removed/replaced.\nRepresents a variable that delays initialization until the …\nResponder has set the response.\nElements inserted.\nSee <code>Var::map_ref</code>.\nSee <code>Var::map_ref_bidi</code>.\nInput arguments for the merge closure of <code>MergeVarBuilder</code> …\nElement removed an reinserted.\nSee <code>Var::read_only</code>.\nElements removed.\nRaw value in a <code>ResponseVar</code>.\nIdentifies the source variable in another variable a value …\nAPI for app implementers to replace the transitionable …\nHelper type for debug printing <code>Var&lt;T&gt;</code>.\nHelper type for display printing <code>Var&lt;T&gt;</code>.\nRepresents a change in a <code>ObservableVec</code>.\nResponder has not set the response yet.\nWeak reference to a <code>ArcVar&lt;T&gt;</code>.\nWeak <code>ContextInitHandle</code>.\nWeak var that upgrades to an uninitialized …\nWeak reference to a <code>ArcCowVar&lt;T&gt;</code>.\nWeak reference to a <code>ArcFlatMapVar&lt;T, V&gt;</code>.\nWeak var that can upgrade to <code>MapRef&lt;I, O, S&gt;</code> if the source …\nWeak var that can upgrade to <code>MapRefBidi&lt;I, O, S&gt;</code> if the …\nWeak reference to <code>ArcMergeVar&lt;T&gt;</code>.\nWeak <code>ReadOnlyVar&lt;T&gt;</code>.\nWeak reference to a <code>ArcWhenVar&lt;T&gt;</code>.\nManually build a <code>ArcWhenVar&lt;T&gt;</code>.\nBorrow/initialize the actual var.\nBuild the when var if all value variables are of type …\nFinish the build.\nReturns the number of conditions set.\nReference condition, value pairs.\nThe default value var.\nGets the response if done.\nCreate a variable similar to <code>Var::easing</code>, but with …\nExtend the conditions with clones of <code>other</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a builder from the parts of a formed <code>when_var!</code>.\nReplace the <code>Rgba</code> lerp implementation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the initialized actual var or initializes it now.\nInto response, if received.\nReturns <code>true</code> if the strong handle still exists.\nIf the response is received.\nHas response.\nGets if slerp mode is enabled in the context.\nIf the response is not received yet.\nDoes not have response.\nIterate over the values.\nNumber of inputs.\nMap to another response variable.\nMap the response value using <code>map</code>, if the variable is …\nInfallible <code>Var::modify</code>.\nNew with initialization function.\nNew.\nStart building with only the default value.\nNew reference to nothing.\nStart building with the default value.\nTag that identifies the <code>source</code> variable.\nStart building with already boxed var.\nNew with initialization function that produces a value.\nPush a when condition.\nPush a condition and value.\nPush a when condition already boxed and type erased.\nReplace the default value if <code>other</code> has default and extend …\nClone the response value, if present.\nClone the response, if present and new.\nInfallible <code>Var::set</code>.\nSet/replace the default value.\nSet/replace the default value with an already typed erased …\nInfallible <code>Var::set_from</code>.\nInfallible <code>Var::set_from_map</code>.\nCalls <code>f</code> with <code>is_slerp_enabled</code> set to <code>enabled</code>.\nSpherical linear interpolation sampler.\nInfallible <code>AnyVar::update</code>.\nReturns a future that awaits until a response is received.\nReturns a future that awaits until a response is received …\nReturns a future that awaits until a response is received …\nVisit the response, if present and new.\nVisit the response, if present.\nNumber of elements removed.\nNumber of elements inserted.\nIndex the element was first at.\nIndex of the first element removed, at the time of removal.\nIndex of the first element inserted, at the time of …\nIndex the element was reinserted after removal.")