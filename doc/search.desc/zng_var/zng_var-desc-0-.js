searchState.loadedDescShard("zng_var", 0, "Batch updated variables in an app context.\nVariable of any type.\nArguments for <code>AnyVar::hook</code>.\nMutable reference to a variable value.\nRepresents any variable value.\nType erased <code>when_var!</code> manual builder.\nArc value that implements equality by pointer comparison.\nSmall box for <code>AnyVarValue</code> values.\nVar represents different inner variables depending on the …\nVariable capabilities can change to sometimes have the …\nAll elements removed/replaced.\nIdentifies the unique context a <code>contextual_var</code> is in.\nRepresents a named contextual variable.\nResponder has set the response.\nElements inserted.\nA property value that is not a variable but can be …\nA value-to-var conversion that consumes the value.\nVariable can be modified.\nVariable capabilities can change to sometimes have the …\nBuild a <code>merge_var!</code> from any number of input vars of the …\nElement removed an reinserted.\nVariable value can change.\nID for variables that are not <code>SHARE</code>.\nRepresents a <code>Vec&lt;T&gt;</code> that tracks changes when used inside a …\nElements removed.\nRepresents a read-write variable used to notify the …\nRaw value in a <code>ResponseVar</code>.\nRepresents a read-only variable used to listen to a one …\nVar is an <em>arc</em> reference to the value and variable state, …\nVariable updates and animation service.\nVARS APP integration.\nVariable of type <code>T</code>.\nKinds of interactions allowed by a <code>Var&lt;T&gt;</code> in the current …\nRepresents a <code>Var&lt;T&gt;</code> as a value inside another variable.\nHandle to a variable or animation hook.\nRepresents a collection of var handles.\nArguments for <code>Var::hook</code>.\nUnique identifier of a share variable, while it is alive.\nError when an attempt to modify a variable without the …\nInput arguments for the merge closure of <code>MergeVarBuilder</code> …\nMutable reference to a variable value.\nRepresents the last time a variable was mutated or the …\nRepresents a type that can be a <code>Var&lt;T&gt;</code> value.\nRepresents a change in a <code>ObservableVec</code>.\nResponder has not set the response yet.\nWeak reference to a <code>AnyVar</code>.\nWeak <code>ContextInitHandle</code>.\nWeak reference to a <code>Var&lt;T&gt;</code>.\nManual <code>when_var!</code> builder.\n Declares new app and context local variable.\nGet a flags value with all known bits set.\nSchedule an animation that targets this variable.\nSchedule a custom animation that targets this variable.\nAdds an <code>animation</code> closure that is called every frame to …\nVar animation types and functions.\nVariable that defines a global scale for the elapsed time …\nRead-write that defines if animations are enabled on the …\nType erased <code>const_var</code>.\nCreate a type erased contextualized variable.\nNew read/write shared reference type-erased variable.\nNew read/write shared reference type-erased variable that …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nApply all pending updates, call hooks and update bindings.\nReference the variable without the strong value type.\nReference the weak variable without the strong value type.\nType erased reference.\nReference the type erased when builder.\nReference the actual context var.\nBind <code>other</code> to receive the new values from this variable.\nBind <code>other</code> to receive the new values from this variable.\nBind <code>other</code> to receive the new values from this variable …\nBind <code>other</code> to receive the new values from this variable …\nBind strongly typed <code>other</code> to receive the new values …\nBind <code>other</code> to receive the new values filtered mapped from …\nBind <code>other</code> to receive the new values filtered mapped from …\nBind <code>other</code> to receive the new filtered mapped values from …\nBind <code>other</code> to receive the new filtered mapped values from …\nBind strongly typed <code>other</code> to receive the new values mapped …\nBind <code>other</code> to receive the new values mapped from this …\nBind <code>other</code> to receive the new values mapped from this …\nBind <code>other</code> to receive the new mapped values from this …\nBind <code>other</code> to receive the new mapped values from this …\nBind <code>other</code> to be modified when this variable updates.\nBind <code>other</code> to be modified when this variable updates.\nBind <code>other</code> to be modified when this variable updates.\nBind <code>other</code> to be modified when this variable updates and …\nBind <code>other</code> to be modified when this variable updates and …\nBind <code>other</code> to be modified when this variable updates and …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuild the merge var.\nBuild the when var.\nBuild the when var.\nBuild a variable similar to <code>Var::easing</code>, but with …\nHas the <code>MODIFY</code> capability.\nFlags that indicate what operations the variable is …\nCreate a <code>VarHandles</code> collection with <code>self</code> and <code>other</code>.\nChanges applied in the last var update.\nStarts an easing animation that <em>chases</em> a target value that …\nDrop all handles.\nRemoves all elements.\nClone the value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the number of conditions set.\nNew immutable variable that stores the <code>value</code> directly.\nWhether all set bits in a source flags value are also set …\nGets if the <code>tag</code> is in <code>tags</code>.\n Declares new <code>ContextVar&lt;T&gt;</code> static items.\nCreate a contextualized variable.\nCreate a var that redirects to this variable until the …\nCreate a var that redirects to this variable until the …\nGets the current context handle.\nGets the underlying var in the current calling context.\nGets the underlying var in the current calling context.\nInfo about the current context when requesting variable …\nAlternate formatter that writes detailed debug info about …\nThe intersection of a source flags value with the …\nGets the response if done.\nDowncast to value.\nReturns the strongly typed variable, if its of of value …\nTry cast to strongly typed args.\nStrongly typed reference, if it is of the same type.\nReturns some mutable reference to the inner value if it is …\nReturns <code>downcast</code> or <code>fallback_var</code>.\nReturns some reference to the inner value if it is of type …\nReference all custom tag values of type <code>T</code>.\nReference the value, if it is of type <code>T</code>.\nCreate a weak reference to this variable.\nCreate a weak reference to this variable.\nCreate a weak handle that can be used to monitor this …\nRemoves the specified range from the vector in bulk, …\nHandle to no variable.\nEmpty collection.\nSchedule an easing transition from the current value to …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nOscillate between the current value and <code>new_value</code> with an …\nOscillate between the current value and <code>new_value</code> with an …\nSchedule an easing transition from the current value to …\nCreate a vars that <code>ease</code> to each new value of <code>self</code>.\nCreate a vars that <code>ease_with</code> to each new value of <code>self</code>.\nGet a flags value with all bits unset.\nGets if <code>self</code> and <code>other</code> are equal.\n New variable from an expression with interpolated vars.\nExtend the conditions with clones of <code>other</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nClones and appends all elements in a slice to the Vec.\nCopies elements from <code>src</code> range to the end of the vector.\nCreate a strongly typed mapping variable that can skip …\nCreate a mapping variable that can skip updates.\nCreate a mapping variable that can skip updates.\nCreate a bidirectional mapping variable that can skip …\nCreate a bidirectional mapping variable that can skip …\nCreate a <code>filter_map</code> that tries to convert from <code>T</code> to <code>O</code> …\nCreate a <code>filter_map</code> that tries to convert from <code>T</code> to <code>O</code> …\nCreate a <code>filter_map_bidi</code> that tries to convert between <code>T</code> …\nCreate a strongly typed flat mapping variable.\nCreate a flat mapping variable that <em>unwraps</em> an inner …\nCreate a mapping variable from any to any that <em>unwraps</em> an …\nCreate a <code>flat_map</code> to the inner variable.\nVariable that defines the global frame duration, the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a clone of the current value.\nGet a clone of the current value.\nDebug format the current value.\nGet a clone of the current value into <code>value</code>.\nMutate the <code>index</code>.\nGets a clone of the current value if it <code>is_new</code>.\nGets a clone of the current value if it <code>is_new</code>.\nGets a clone of the current value into <code>value</code> if it <code>is_new</code>.\nIf <code>apply_updates</code> will do anything.\nHold arbitrary <code>thing</code> for the lifetime of this variable or …\nSetups a callback for just after the variable value update …\nSetups a callback for just after the variable value update …\nRegister a <code>handler</code> to be called when the current animation …\nImplements <code>T: IntoVar&lt;U&gt;</code>, <code>T: IntoValue&lt;U&gt;</code> and optionally …\nRegister a closure called when <code>apply_updates</code> should be …\nRegister a closure called when a variable modify is about …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert the <code>element</code> at the <code>index</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to typed builder.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nReturns <code>true</code> if the strong handle still exists.\nWhether all known bits in this flags value are set.\nHas the <code>CONTEXT</code> capability and does not have …\nIf does not have <code>MODIFY</code> capability and is not …\nIf the variable current value was set by an active …\nIf cannot <code>NEW</code> and is not <code>MODIFY_CHANGES</code>.\nHas the <code>CONTEXT</code> capability.\nIf the response is received.\nHas response.\nReturns <code>true</code> if the handle is a <code>dummy</code>.\nReturns <code>true</code> if empty or all handles are dummy.\nWhether all bits in this flags value are unset.\nDoes not have the <code>SHARE</code> capability.\nGets if the value updated.\nHandle represents the state before first contextualization.\nIf does not have <code>MODIFY</code> capability.\nHas the <code>SHARE</code> capability.\nIf the response is not received yet.\nDoes not have response.\nIterate over the values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLast update ID a variable was modified.\nNumber of inputs.\nCreate a strongly typed mapping variable.\nCreate a read-only mapping variable.\nCreate a mapping variable from any to any.\nCreate a bidirectional mapping variable.\nCreate a bidirectional mapping variable.\nCreate a bidirectional mapping variable that modifies back …\nCreate a bidirectional mapping variable that modifies the …\nCreate a mapping variable that contains the debug …\nCreate a <code>map</code> that references and clones <code>O</code> from <code>T</code> using …\nCreate a <code>map_bidi_modify</code> that references and clones <code>O</code> from …\nCreate a <code>map</code> that converts from <code>T</code> to <code>O</code> using <code>Into&lt;O&gt;</code>.\nCreate a <code>map_bidi</code> that converts between <code>T</code> and <code>O</code> using <code>Into</code>.\nMap to another response variable.\nMap the response value using <code>map</code>, if the variable is …\nCreate a <code>map</code> that converts from <code>T</code> to <code>Txt</code> using <code>ToTxt</code>.\n Initializes a new <code>Var&lt;T&gt;</code> with value made by merging …\nSchedule <code>modify</code> to be called on the value for the next …\nSchedule <code>modify</code> to be called on the value for the next …\nGets the minimum <em>importance</em> clearance that is needed to …\nID that is never new.\nBox <code>value</code>.\nConstructs a new <code>ArcEq&lt;T&gt;</code>.\nNew from updated value and custom tag.\nGenerates a new unique handle.\nNew empty.\nNew with value variable used when no other conditions are …\nNew with value variable used when no other conditions are …\nNew empty vec.\nRegister the next animation frame, if there are any active …\nIdentifies the state before first contextualization.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nHold the variable in memory until the app exit.\nDrop the handle without stopping the behavior it …\nDrop all handles without stopping their behavior.\nRemove the last element from the vec.\nPush an input.\nPush a conditional value.\nPush a conditional value.\nAdd the <code>other</code> handle to the collection, if it is not dummy.\nInsert the <code>element</code> at the end of the vec.\nAdd a custom tag object that will be shared with the var …\nAdd a custom tag object that will be shared with the var …\nGets a clone of the var that is always read-only.\nGets a clone of the var that is always read-only.\nMove the element <code>from</code> index <code>to</code> index.\nThe intersection of a source flags value with the …\nRemove the <code>index</code> element.\nReplace the default value if <code>other</code> has default and extend …\nReserves capacity for at least additional more elements.\nResizes the Vec in-place so that len is equal to <code>new_len</code>.\nSets the one time response.\nNew <code>ResponseVar</code> in the done state.\nNew paired <code>ResponderVar</code> and <code>ResponseVar</code> in the waiting …\nCreates a <code>ResponseVar</code> linked to this responder.\nRetains only the elements specified by the predicate, …\nClone the response value, if present.\nClone the response, if present and new.\nSchedule animations started by <code>animate</code>, the closure is …\nSchedule animations started by <code>animate</code>, the closure is …\nSchedule <code>new_value</code> to be assigned next update.\nSchedule <code>new_value</code> to be assigned next update.\nReplace the value if not equal.\nReplace the value if not equal.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nLike <code>bind</code> but also sets <code>other</code> to the current value.\nLike <code>bind</code> but also sets <code>other</code> to the current value.\nLike <code>bind_map_any</code> but also sets <code>other</code> to the current value.\nLike <code>bind_map</code> but also sets <code>other</code> to the current value.\nLike <code>bind_map_any</code> but also sets <code>other</code> to the current value.\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule a keyframed transition animation for the …\nSchedule a keyframed transition animation for the …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nOscillate between <code>start_value</code> to <code>end_value</code> with an easing …\nSchedule an easing transition from the <code>start_value</code> to …\nSchedule a new <code>value</code> for the variable, it will be set in …\nSchedule a new <code>value</code> for the variable, it will be set in …\nLike <code>set_from</code>, but uses <code>map</code> to produce the new value from …\nLike <code>set_from</code>, but uses <code>map</code> to produce the new value from …\nSets a custom <code>AnyVar::modify_importance</code> value.\nSets a custom <code>AnyVar::modify_importance</code> value.\nOscillate between <code>from</code> and <code>to</code>, the variable is set to <code>from</code> …\nSets the <code>sys_animations_enabled</code> read-only variable.\nMutate the <code>range</code>.\nSet the variable to <code>new_value</code> after a <code>delay</code>.\nOscillate between the current value and <code>new_value</code>, every …\nSet the variable to a sequence of values as a time <code>duration</code>…\nCurrent count of strong references to this variable.\nCurrent count of strong references to the variable.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoves an element from the vector and returns it.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRead-only that tracks if animations are enabled in the …\nCustom tag objects.\nCustom tags that will be shared with the var hooks if the …\nCustom tags that will be shared with the var hooks if the …\nClone the custom tag objects set by the code that updated …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDebug helper for tracing the lifetime of a value in this …\nDebug helper for tracing the lifetime of a value in this …\nShortens the vector, keeping the first <code>len</code> elements and …\nIf the <code>var</code> was built by <code>build</code> clones the internal …\nIf the <code>var</code> was built by <code>build</code> clones the internal …\nSchedule <code>modify</code> to be called on the value for the next …\nSchedule <code>modify</code> to be called on the value for the next …\nSchedule <code>new_value</code> to be assigned next update, if the …\nSchedule <code>new_value</code> to be assigned next update.\nSchedule a new <code>value</code> for the variable, it will be set in …\nSchedule a new <code>value</code> for the variable, it will be set in …\nLike <code>try_set_from</code>, but uses <code>map</code> to produce the new value …\nLike <code>try_set_from</code>, but uses <code>map</code> to produce the new value …\nSwap value with <code>other</code> if both are of the same type.\nSchedule an update notification, without actually changing …\nGets the <code>TypeId</code> of the boxed value.\nValue type name.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nShow variable value as new next update, without actually …\nIf update was explicitly requested.\nNotify an update, even if the value does not actually …\nNotify an update, even if the value does not actually …\nDoes one animation frame if the frame duration has elapsed.\nId of the current vars update in the app scope.\nAttempt to create a strong reference to the variable.\nAttempt to create a strong reference to the variable.\nReference the updated value.\nReference the updated value.\nImmutable reference to the value.\nImmutable reference to the value.\nGets if the value type is <code>T</code>.\nMutable reference to the value.\nMutable reference to the value.\nGets the value type.\nValue type ID.\nGets the value type name.\nNew read/write shared reference variable.\nNew read/write shared reference variable with default …\nNew read/write shared reference type-erased variable that …\nGets if this variable is the same as <code>other</code>.\nGets if this variable is the same as <code>other</code>.\nNew read/write shared reference variable from any type …\nVariable for getter properties (<code>get_*</code>, <code>actual_*</code>).\nCopy ID that identifies this variable instance.\nTag that represents the viable.\nVariable for state properties (<code>is_*</code>, <code>has_*</code>).\nAwaits for <code>is_animating</code> to change from <code>true</code> to <code>false</code>.\nReturns a future that awaits until a response is received.\nAwaits for a value that passes the <code>predicate</code>, including …\nAwaits for a value that passes the <code>predicate</code>, including …\nAwaits for an update them <code>get</code> the value.\nAwaits for an update them <code>get</code> the value.\nReturns a future that awaits until a response is received …\nAwaits for the <code>last_update</code> to change.\nWeak variable that never upgrades.\nWeak variable that never upgrades.\n Initializes a new conditional var.\nVisit a reference to the current value.\nVisit a reference to the current value.\nCalls <code>animate</code> while <code>controller</code> is registered as the …\nNew with pre-allocated inputs.\nNew empty vec with pre-allocated capacity.\nRuns <code>action</code> with this context var representing the other …\nRuns <code>action</code> with <code>self</code> as the current context ID.\nRuns <code>action</code> with this context var representing the other …\nVisit a reference to the current value if it <code>is_new</code>.\nVisit a reference to the current value if it <code>is_new</code>.\nVisit the response, if present and new.\nVisit the response, if present.\nNumber of elements removed.\nNumber of elements inserted.\nIndex the element was first at.\nIndex of the first element removed, at the time of removal.\nIndex of the first element inserted, at the time of …\nIndex the element was reinserted after removal.\nRepresents an animation in its closure.\nAnimations controller.\nRepresents a running animation.\nView on an app loop timer.\nRepresents the editable final value of a <code>Var::chase</code> …\nAn <code>AnimationController</code> that forces animations to run even …\nRepresents the current <em>modify</em> operation when it is …\nAPI for app implementers to replace the transitionable …\nRepresents a simple transition between two values.\nRepresents a transition across multiple keyed values that …\nRepresents a type that can be animated between two values.\nImplement transition by delegating all type parts.\nWeak <code>AnimationHandle</code>.\nReturns <code>true</code> if <code>self</code> and <code>other</code> have the same animation or …\nReturns a value that indicates if animations are enabled …\n<code>dummy</code>.\nCreate a weak handle.\nCreate dummy handle that is always in the <em>stopped</em> state.\nCommon easing functions.\nReturns <code>true</code> if the <code>deadline</code> has elapsed, <code>false</code> if the …\nCompute the elapsed <code>EasingTime</code>, in the span of the total …\nCompute the time elapsed from <code>start_time</code> to <code>now</code>.\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nCompute the elapsed <code>EasingTime</code>, if the time <code>is_end</code> …\nSet <code>animations_enabled</code> to <code>true</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nValue sampled at the <code>0.fct()</code> step.\nRegister a <code>handler</code> to be called once when the current …\nRegister a <code>handler</code> to be called once when the animation …\nIndicates the <em>override</em> importance of the operation, when …\nReplace the <code>Rgba</code> lerp implementation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the <em>modify</em> request was made from inside an …\nIf another handle has called <code>perm</code>.\nGets if slerp mode is enabled in the context.\nIf another handle has called <code>stop</code>.\nKeyed values.\nSample the linear interpolation from <code>self</code> -&gt; <code>to</code> by <code>step</code>.\nModify the chase target, replaces the animation with a new …\nInitial value, is always of lowest importance.\nNew transition.\nNew weak handle that does not upgrade.\nNew transition.\nFrame timestamp.\nThe instant the current animation update started.\nCalled for each <code>animation</code> that starts in the controller …\nCalled for each <code>animation</code> that ends in the controller …\nDrops the handle but does <strong>not</strong> stop.\nRegister the future <code>deadline</code> for waking.\nSet the animation start time to now.\nNumber of times the animation restarted.\nCompute the transition value at the <code>step</code>.\nCompute the transition value at the <code>step</code>.\nReplace the chase target, replaces the animation with a …\nChange the start to an instant that computes the <code>elapsed</code> …\nChange the start time to an arbitrary value.\nSet the duration to the next animation update. The …\nCalls <code>f</code> with <code>is_slerp_enabled</code> set to <code>enabled</code>.\nSpherical linear interpolation sampler.\nThe instant this animation (re)started.\nDrop the animation after applying the current update.\nDrops the handle and forces the animation to drop.\nIf the animation will be dropped after applying the update.\nCurrent animation target.\nGlobal time scale for animations.\nValue sampled at the <code>1.fct()</code> step.\nGet the animation handle if it is still animating.\n<code>easing::back</code>.\nA unit cubic Bézier curve, used for timing functions in …\n<code>easing::bounce</code>.\n<code>easing::circ</code>.\n<code>easing::cubic</code>.\nCustom function.\nEasing functions as a value.\nEasing function output.\nEasing function input.\n<code>easing::elastic</code>.\n<code>easing::expo</code>.\n<code>easing::linear</code>.\n<code>easing::none</code>.\n<code>easing::quad</code>.\n<code>easing::quart</code>.\n<code>easing::quint</code>.\n<code>easing::sine</code>.\nCubic transition that goes slightly negative to start and …\nOscillating transition that grows in magnitude, does not …\nCubic transition with slightly slowed start then <code>cubic</code>.\nCubic transition (t³).\nX coordinate is time, Y coordinate is function advancement.\nNew custom function.\nCreate a closure that calls the easing function.\nApplies the <code>ease_fn</code>.\nApplies <code>ease_in</code> for the first half then <code>ease_out</code> scaled to …\nCreates a custom function that is <code>self</code> modified by …\nApplies the <code>ease_fn</code> in reverse and flipped.\nCreates a custom function that is <code>self</code> modified by …\nApplies <code>ease_out</code> for the first half then <code>ease_in</code> scaled to …\nCreates a custom function that is <code>self</code> modified by …\nNew easing time from total <code>duration</code>, <code>elapsed</code> time and …\nOscillating transition that grows in magnitude, goes …\nGets the end time, one.\nExponential transition. Very slow start, very fast end.\nGet the time as a <code>Factor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the time represents the end of the animation.\nIf the time represents the start of the animation.\nSimple linear transition, no easing, no acceleration.\nCreates a custom function that is <code>self</code> modified by <code>modifier</code>\nCreate a unit cubic Bézier curve from the two middle …\nNew from <code>Factor</code>.\nAlways <code>1.fct()</code>, that is, the completed transition.\nGet the time as a <code>FactorPercent</code>.\nQuadratic transition (t²).\nFourth power transition (t⁴).\nFifth power transition (t⁵).\nApplies the <code>ease_fn</code> in reverse.\nFlip the time.\nCreates a custom function that is <code>self</code> modified by …\nApplies the <code>ease_fn</code> flipped.\nCreates a custom function that is <code>self</code> modified by …\nSine transition. Slow start, fast end.\nSolve the bezier curve for a given <code>x</code> and an <code>epsilon</code>, that …\nGets the start time, zero.\nJumps to the final value by a number of <code>steps</code>.\nJumps to the final value by a number of <code>steps</code>.")