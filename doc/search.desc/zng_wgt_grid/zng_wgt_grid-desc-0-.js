searchState.loadedDescShard("zng_wgt_grid", 0, "Grid widgets, properties and nodes.\nArguments for <code>auto_grow_fn</code>.\nGrid auto-grow direction.\nW  Grid cell container.\nW  Grid column definition.\nAuto generate columns.\nW  Grid layout with cells of variable sizes.\nW  Grid row definition.\nAuto generate rows.\nc  Widget function used when new rows or columns are …\nc  Widget function used when new rows or columns are …\nc  Defines the direction the grid auto-grows and the …\nc  Defines the direction the grid auto-grows and the …\nCell widget and properties.\nc  Cell widget items.\nc  Cell widget items.\nColumn widget and properties.\nc  Column definitions.\nc  Column definitions.\nColumns, not specific maximum limit.\nValue that does not generate any new row or column.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nColumn index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuto-grow direction.\nNew args.\nGrid node.\nRow widget and properties.\nc  Row definitions.\nc  Row definitions.\nRows, not specific maximum limit.\nc  Space in-between cells.\nc  Space in-between cells.\nStart building a new instance.\nGets the widget type info.\nSet the maximum columns or rows allowed.\nValue for <code>at</code> that causes the cell to be positioned based …\nW  Grid cell container.\nRepresents values set by cell properties in a widget.\nId for widget state set by cell properties.\nCompute or correct the column and row of the cell.\nP  Cell column and row indexes.\nP  Cell column and row indexes.\nP  Cell column index.\nP  Cell column index.\nThe <code>column</code> value.\nP  Cell column span.\nP  Cell column span.\nThe <code>column_span</code> value.\nReturns the argument unchanged.\nGet the cell info stored in the <code>WIDGET</code> state.\nGet the cell info stored in the <code>wgt</code> state.\nCalls <code>U::from(self)</code>.\nP  Cell row index.\nP  Cell row index.\nThe <code>row</code> value.\nP  Cell row span.\nP  Cell row span.\nThe <code>row_span</code> value.\nP  Cell column and row span.\nP  Cell column and row span.\nStart building a new instance.\nGets the widget type info.\nW  Grid column definition.\nP  Get the column index.\nP  Get the column index.\nP  Get the column index and number of columns.\nP  Get the column index and number of columns.\nP  Get the column index, starting from the last column at <code>0</code>…\nP  Get the column index, starting from the last column at <code>0</code>…\nP  If the column index is even.\nP  If the column index is even.\nP  If the column is the first.\nP  If the column is the first.\nP  If the column is the last.\nP  If the column is the last.\nP  If the column index is odd.\nP  If the column index is odd.\nP  Column max width.\nP  Column min width.\nStart building a new instance.\nGets the widget type info.\nP  Column width.\nW  Grid row definition.\nP  Get the row index.\nP  Get the row index.\nP  Get the row index and number of rows.\nP  Get the row index and number of rows.\nP  Get the row index, starting from the last row at <code>0</code>.\nP  Get the row index, starting from the last row at <code>0</code>.\nP  Row height.\nP  If the row index is even.\nP  If the row index is even.\nP  If the row is the first.\nP  If the row is the first.\nP  If the row is the last.\nP  If the row is the last.\nP  If the row index is odd.\nP  If the row index is odd.\nP  Row max height.\nP  Row min height.\nStart building a new instance.\nGets the widget type info.")