searchState.loadedDescShard("zng_wgt_rule_line", 0, "Rule line widgets.\nIdentifies a line widget that can be collapsed by …\nContextual service managed by <code>collapse_scope</code>.\nIdentifies a widget (and descendants) to be ignored by the …\nRepresents what rule lines are collapsed in a …\nAdjacent lines without intermediary visible siblings are …\nW  Draws a horizontal or vertical rule line.\nCollapse start and end.\nCollapse the last line(s) if it has no next visible …\nCollapse first line(s) if it has no previous visible …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets if the line widget needs to collapse\nP  Collapse adjacent descendant rule lines.\nP  Defines if this widget and descendants are ignored by …\nc  Line color.\nc  Line color.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nHorizontal rule line.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nc  Line length.\nc  Line length.\nc  Line style.\nc  Line style.\nP  Margin around the line.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nc  Line orientation.\nc  Line orientation.\nThe intersection of a source flags value with the …\nGet the parent scope ID.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nc  Line stroke thickness.\nc  Line stroke thickness.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVertical rule line.\nStart building a new instance.\nGets the widget type info.\nLine color, inherits from <code>FONT_COLOR_VAR</code>.\nW  Draws an horizontal <code>RuleLine!</code>.\nLine style, default is <code>Solid</code>.\nMargin around line.\nLine stroke thickness, default is <code>1.dip()</code>\nHorizontal line length.\nP  Sets the line color of all descendant <code>Hr!()</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nP  Sets the line style of all descendant <code>Hr!()</code>.\nP  Sets the margin around line of all descendant <code>Hr!()</code>.\nP  Sets the line stroke thickness of all descendant <code>Hr!()</code>.\nStart building a new instance.\nGets the widget type info.\nP  Sets the horizontal line length of all descendant <code>Hr!()</code>.\nLine color, inherits from <code>FONT_COLOR_VAR</code>.\nVertical line length.\nLine style, default is <code>Solid</code>.\nMargin around line.\nLine stroke thickness, default is <code>1.dip()</code>\nW  Draws a vertical <code>RuleLine!</code>.\nP  Sets the line color of all descendant <code>Vr!()</code>.\nReturns the argument unchanged.\nP  Sets the vertical line length of all descendant <code>Vr!()</code>.\nCalls <code>U::from(self)</code>.\nP  Sets the line style of all descendant <code>Vr!()</code>.\nP  Sets the margin around line of all descendant <code>Vr!()</code>.\nP  Sets the line stroke thickness of all descendant <code>Vr!()</code>.\nStart building a new instance.\nGets the widget type info.")