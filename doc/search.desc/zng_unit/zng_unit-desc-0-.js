searchState.loadedDescShard("zng_unit", 0, "Base unit types.\nPoint is above the origin.\nAngle in degrees.\nAngle in gradians.\nAngle in radians.\nAngle in turns (complete rotations).\nExtension methods for initializing angle units.\n<code>Self</code> equivalent in <code>Dip</code> units.\n<code>Self</code> equivalent in <code>Px</code> units.\nPoint is below the origin.\nA length in bytes.\nExtension methods for initializing <code>ByteLength</code> values.\nEllipses that define the radius of the four corners of a …\nDevice independent pixel.\nA rectangle box in device independent pixels.\nCorner-radius in device independent pixels.\nA point in device independent pixels.\nA rectangle in device independent pixels.\nSide-offsets in device independent pixels.\nA size in device pixels.\nConversion from <code>Dip</code> to <code>Px</code> units.\nA vector in device independent pixels.\nComparable key that represents the absolute distance …\nMinimal difference between values in around the 0.0..=1.0 …\nMinimal difference between values in around the …\nNormalized multiplication factor.\nMultiplication factor in percentage (0%-100%).\nExtension methods for initializing factor units.\nPoint is to the left of the origin.\nMaximum representable byte length.\nMaximum distance.\n<code>i32::MAX</code>.\nMaximum DIP value.\nMinimum distance.\n<code>i32::MIN</code>.\nMinimum DIP value.\nValue that is always greater than any distance key.\nValue that is always smaller than any distance key.\nSimple offset.\nOrientation of two 2D items.\nDevice pixel.\nA rectangle box in device pixels.\nCorner-radius in device pixels.\nA point in device pixels.\nA rectangle in device pixels.\nSide-offsets in device pixels.\nA size in device pixels.\nConversion from <code>Px</code> to <code>Dip</code> units.\nA transform in device pixels.\nA vector in device pixels.\nRGB + alpha.\nColor functions argument conversion helper.\nPoint is to the right of the origin.\nA group of 2D side offsets, which correspond to …\nExtension methods for initializing <code>Duration</code> values.\nFull transform.\n<code>f32</code> equality used in floating-point units.\n<code>f32</code> hash compatible with <code>about_eq</code> equality.\n<code>f32</code> ordering compatible with <code>about_eq</code> equality.\nComputes the absolute value of self.\nComputes the saturating absolute value of <code>self</code>.\nComputes the saturating absolute value of <code>self</code>.\nAlpha channel value, in the <code>[0.0..=1.0]</code> range.\nBlue channel value, in the <code>[0.0..=1.0]</code> range.\nBottom offset.\nBottom offset.\nBottom offset.\nBottom-left corner radius.\nBottom-left corner radius.\nBottom-left corner radius.\nBottom-right corner radius.\nBottom-right corner radius.\nBottom-right corner radius.\nCheck if <code>b</code> is orientation from <code>origin</code>.\nBytes.\nLength in bytes.\nAdds the two lengths, returns <code>None</code> if the sum overflows.\nDivides the two lengths, returns <code>None</code> if the subtraction …\nMultiplies the two lengths, returns <code>None</code> if the sum …\nSubtracts the two lengths, returns <code>None</code> if the subtraction …\nReturns <code>self</code> if <code>min &lt;= self &lt;= max</code>, returns <code>min</code> if …\nClamp factor to <code>[0.0..=1.0]</code> range.\nClamp factor to [0.0..=100.0] range.\nIdentity.\nCalculate the corner radius of an inner border inside <code>self</code> …\nDegrees\nCompletes the distance calculation.\nNormalized factor.\nConvert to <code>Factor</code>.\nFlip factor, around <code>0.5</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom bytes.\nSee <code>DipToPx</code>.\nNew distance key from already computed actual distance.\nFrom gibi-bytes.\nFrom giga-bytes.\nFrom kibi-bytes.\nFrom kilo-bytes.\nFrom mebi-bytes.\nFrom mega-bytes.\nNew distance key computed from two points.\nSee <code>PxToDip</code>.\nNew distance key computed from the nearest point inside <code>a</code> …\nFrom tebi-bytes.\nFrom tera-bytes.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nGibi-bytes.\nLength in gibi-bytes.\nGiga-bytes.\nLength in giga-bytes.\nGradians\nGreen channel value, in the <code>[0.0..=1.0]</code> range.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nLeft + right.\nHours.\nIdentity transform.\nCalculate the corner radius of an outer border around <code>self</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse transform if possible.\nReturns <code>true</code> if this transform can be represented with a …\nReturns <code>true</code> it is the identity transform.\nReturns whether it is possible to compute the inverse …\nIf the key is the <code>NONE_MAX</code> or <code>NONE_MIN</code>.\nReturns <code>true</code> if all side offsets are zero.\nKibi-bytes.\nLength in kibi-bytes.\nKilo-bytes.\nLength in kilo-bytes.\nLeft offset.\nLeft offset.\nLeft offset.\nLinear interpolation.\nLinear interpolation.\nLinear interpolation.\nLinear interpolation.\nCompares and returns the maximum of two lengths.\nCompares and returns the maximum distance.\nReturns the maximum of two factors.\nCompares and returns the maximum of two pixel values.\nCompares and returns the maximum of two pixel values.\nMebi-bytes.\nLength in mebi-bytes.\nMega-bytes.\nLength in mega-bytes.\nCompares and returns the minimum of two lengths.\nCompares and returns the minimum distance.\nReturns the minimum of two factors.\nCompares and returns the minimum of two pixel values.\nCompares and returns the minimum of two pixel values.\nMinutes.\nRadians in <code>[0.0 ..= TAU]</code>.\nGradians in <code>[0.0 ..= 400.0]</code>.\nDegrees in <code>[0.0 ..= 360.0]</code>.\nTurns in <code>[0.0 ..= 1.0]</code>.\nMilliseconds.\nNew from RGB of a the same type and A that can be of a …\nNew with distinct values.\nNew from round integer value.\nConstructor taking a scalar for each side.\nNew all corners same radius.\nConstructor setting the same value to all sides, taking a …\nnew from floating point.\nReturns a 2D box that encompasses the result of …\nReturns a 2D box that encompasses the result of …\nPercent factor.\nFactor as percentage.\nNew 3D perspective distance.\nCheck if <code>point</code> is orientation from <code>origin</code>.\nReturns a transform with a translation applied before self…\nProject the 2D point onto the transform Z-plane.\nProject the 2D point onto the transform Z-plane.\nRadians\nRed channel value, in the <code>[0.0..=1.0]</code> range.\nRight offset.\nRight offset.\nRight offset.\nNew 2D rotation.\nNew 3D rotation.\nAdds the two lengths without overflowing or wrapping.\nMultiplies the two lengths without overflowing or wrapping.\nSubtracts the two lengths without overflowing or wrapping.\nNew 2D scale.\nNew 3D scale.\nIterator that yields quadrants for efficient search in a …\nSeconds.\nSet the <code>alpha</code> component from any type that converts to …\nSet the <code>blue</code> component from any type that converts to …\nSet the <code>green</code> component from any type that converts to …\nSet the <code>red</code> component from any type that converts to …\nNew 2D skew.\nSpherical linear interpolation.\nSpherical linear interpolation.\nSpherical linear interpolation.\nSpherical linear interpolation.\nTebi-bytes.\nLength in tebi-bytes.\nTera-bytes.\nLength in tera-bytes.\nReturns the multiplication of the two matrices such that …\nReturns a transform with a translation applied after self…\nConvert a copy to [R, G, B, A] bytes.\nDivide the <code>Px</code> self by the scale.\nReturns <code>self</code> as <code>f32</code>.\nReturns <code>self</code> as <code>i32</code>.\nMultiply the <code>Dip</code> self by the scale.\nTo full transform.\nTop offset.\nTop offset.\nTop offset.\nTop-left corner radius.\nTop-left corner radius.\nTop-left corner radius.\nTop-right corner radius.\nTop-right corner radius.\nTop-right corner radius.\nTransform the pixel point.\nTransform the pixel point.\nTransform the pixel vector.\nTransform the pixel vector.\nNew simple 2D translation.\nNew 3D translation.\nReturns a copy of the color with the alpha set to <code>0</code>.\nTurns\nTop + bottom.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nReturns a copy of the color with a new <code>alpha</code> value.\nReturns a copy of the color with a new <code>blue</code> value.\nReturns a copy of the color with a new <code>green</code> value.\nReturns a copy of the color with a new <code>red</code> value.\nAdds the two lengths wrapping overflows.\nDivides the two lengths wrapping overflows.\nMultiplies the two lengths wrapping overflows.\nSubtracts the two lengths wrapping overflows.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nAll zeros.\nConstructor, setting all sides to zero.")