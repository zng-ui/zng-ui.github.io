searchState.loadedDescShard("zng_ext_undo", 0, "Undo-redo app extension, service and commands.\nRepresents the <strong>clear history</strong> action.\nUndo extension methods for commands.\nCollect display info.\nInitialize data in the execution context.\nTry merge the <code>next_data</code> onto self data (at the undone …\nNormal undo/redo.\nRepresents the <strong>redo</strong> action.\nRedo the action.\nRepresents a single redo action.\nSelection collector.\nUndo-redo service.\nRepresents the <strong>undo</strong> action.\nContextual undo interval.\nContextual undo limit.\nUndo the action.\nRepresents a single undo action.\nArguments for <code>UndoAction::merge</code>.\nRepresents a full undo/redo action.\nMetadata info about an action registered for undo action.\nUndo-redo app extension.\nRepresents an undo/redo action.\nSelects actions to undo or redo.\nRepresents a type that can select actions for undo or redo …\nSnapshot of the undo or redo stacks in an <code>UNDO</code> scope.\nRepresents captured undo actions in an <code>UNDO.transaction</code> …\nIdentifies var modify requests by undo/redo action.\nUndo extension methods for widget info.\nRepresents a widget undo scope.\nAccess <code>dyn Any</code> methods.\nIf the redo stack is not empty.\nGets if the redo stack is not empty.\nIf the undo stack is not empty.\nGets if the undo stack is not empty.\nClear all undo and redo actions.\nClear all redo actions.\nGets the command that represents the OP.\nPush all undo actions captured by the transaction into the …\nPush a single action in the current undo scope that …\nDeinit the scope in the <code>WIDGET</code>.\nShort display description of the action that will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRun <code>actions</code> as a <code>transaction</code> and commits as a group if any …\nCalled for each undo or redo action from the last item in …\nGets display info about the action that registered this …\nGets display info about the action that will be redone.\nSets the <code>WIDGET</code> info.\nInit the scope in the <code>WIDGET</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto <code>Arc&lt;dyn UndoInfo&gt;</code> without double wrapping.\nIf the transaction did not capture any undo action.\nGets if the undo service is enabled in the current context.\nif the scope is already inited in a widget.\nReturns <code>true</code> if the widget is an undo scope.\nIterate over the <code>stack</code>, grouped by <code>undo_interval</code>.\nTry merge the <code>next</code> action with the previous <code>self</code>.\nAny extra metadata associated with the item. This can be a …\nNew, not inited in a widget.\nThe action that was registered after the one receiving …\nTimestamp of the previous action registered.\nRedo action and returns a <code>UndoAction</code> that undoes it.\nRedo all actions within the <code>undo_interval</code>.\nRedo a selection of actions.\nLatest undo stack for the given scope, same as calling …\nClones the timestamp and info of all entries in the …\nRegister an already executed action for undo in the …\nRegister an already executed action for undo in the …\nRegister an already executed action for undo in the …\nRun the <code>action</code> and register the undo in the current scope.\nRun the <code>op</code> once with <code>UndoFullOp::Init { .. }</code> and …\nRun the <code>op</code> once with <code>UndoOp::Redo</code> and register it for undo …\nGets the parent ID that defines an undo scope, or <code>None</code> if …\nStart selecting action for the <code>op</code>.\nSets if the undo/redo is enabled in this scope.\nClones the timestamp and info of all entries in the …\nRun <code>actions</code> in a new undo scope, capturing all undo …\nRun <code>actions</code> as a <code>transaction</code> and commits if the result is …\nRun <code>actions</code> as a <code>transaction</code> and commits as a group if the …\nUndo action and returns a <code>RedoAction</code> that redoes it.\nUndo all actions within the <code>undo_interval</code>.\nCancel the transaction, undoes all captured actions.\nGets or sets the time interval that <code>undo</code> and <code>redo</code> cover …\nGrouping interval.\nGets or sets the maximum length of each undo stack of each …\nGets the first ancestor that is an undo scope.\nGets the command scoped in the undo scope widget that is …\nUndo a selection of actions.\nLatest undo stack for the given scope, same as calling …\nClones the timestamp and info of all entries in the …\nTrack changes on <code>var</code>, registering undo actions for it.\nRuns <code>f</code> in a disabled scope, all undo actions registered …\nRuns <code>f</code> in a new <code>scope</code>. All undo actions inside <code>f</code> are …\nIf the <code>prev_timestamp</code> is within the <code>UNDO.undo_interval</code>. …\nSet this to respond.\nSet this to <code>true</code> if the next action can be dropped because …\nClosure data for the next undo action.\nTimestamp of the previous action registered.\nIf the op must actually be executed.\nIf the <code>prev_timestamp</code> is within the <code>UNDO.undo_interval</code>. …")