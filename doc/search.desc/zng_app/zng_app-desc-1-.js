searchState.loadedDescShard("zng_app", 1, "Widget outer rectangle in the window space.\nGets the widget’s last layout outer bounds size.\nSize of the widget outer area, not transformed.\nGets the global transform of the widget’s outer bounds …\nWidget outer transform in window space.\nCollect info from <code>split</code> into <code>self</code>.\nCollect the parallel changes back.\nCollect the parallel changes back.\nCreate a new info builder that can be built in parallel …\nStart a parallel measure.\nStart a parallel layout.\nReference to the widget that contains this widget.\nOffset rendered in the widget inner set by the parent …\nThe widget parent, if it is not the root widget.\nFull path to this widget.\nGets the widget perspective and perspective origin (in the …\nGets the 3D perspective for this widget.\nThe point in the window that was hit-tested.\nPrevious interactivity of this widget.\nReference to the previous widget within the same parent.\nIterator over all previous widgets within the same parent.\nIterator over all previous widgets within the same <code>ancestor</code>…\nPrevious widget tree.\nPrevious tree with old interactivity values.\nGets the previous visibility of the widget, if it has …\nAdd the <code>interactivity</code> bits to the current widget’s …\nRegister a closure that returns the <code>Interactivity</code> allowed …\nCalls <code>f</code> to build the context widget info.\nValue that indicates the distance between the nearest …\nLike <code>rect_distance_key</code>, but only consider rectangles …\nThe intersection of a source flags value with the …\nGets the widget’s latest render info, if it was rendered …\nEnsure that the parent <code>with_child</code> will receive a reference …\nCount of widgets that where reused from a previous tree.\nReference to the root widget in the tree.\nReference to the root widget.\nGets a path to the root widget of this path.\nGets a path to the root widget of this path.\nLast layout rows of the widget.\nScale factor of the last rendered frame.\nIterator over self -&gt; parent -&gt; grandparent -&gt; .. -&gt; root.\nIterator over the widget and the direct descendants of the …\nIterator over the widget and all widgets contained by it.\nIterator over self and all next widgets within the same …\nIterator over self, descendants and all next widgets …\nIterator over self and all previous widgets within the …\nIterator over self, descendants and all previous widgets …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the baseline offset of the widget. The value is up …\nSet the info tree build metadata <code>id</code> to <code>value</code>.\nReplace the <code>first_segs</code> with <code>segs</code>.\nReplace the <code>last_segs</code> with <code>segs</code>.\nSet the widget info metadata <code>id</code> to <code>value</code>.\nSet the 3D perspective that defines the children 3D space.\nSets the vanishing point of the children 3D space as a …\nSet if the widget preserved 3D perspective form the parent.\nGet the inner most widget parent shared by both <code>self</code> and …\nGet the inner most widget parent shared by both <code>self</code> and …\nFirst ancestor of <code>self</code> and <code>other</code>.\nAll parent children except this widget.\nGets the bounds box that envelops all widgets, including …\nCompute the bounding box that envelops self and …\nIterator over self and descendants, first self, then all …\nStatistics abound the info tree.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGets a path to the <code>widget_id</code> of this path.\nGets a sub-path up to <code>widget_id</code> (inclusive), or <code>None</code> if …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe top hit.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nBuild an access tree from the info tree.\nBuild partial or full access trees for updated widgets.\nBuild partial access trees for widgets that changed …\nCreate an <code>WidgetMeasure</code> for an <code>UiNode::measure</code> call.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDetailed id text.\nPath details to help finding the widget during debug.\nGets if the widget preserves 3D perspective.\nGets the transform style for this widget.\nAdds the <code>offset</code> to the closest <em>inner</em> bounds offset.\nSet if the baseline is added to the inner offset <em>y</em> axis.\nReference the <code>WidgetInfoTree</code> that owns <code>self</code>.\nNew widget tree.\nWidget tree where some widgets have new inner transforms.\nWidget tree where some widgets have new visibility.\nNew tree with new interactivity values.\nGets the <code>ENABLED</code> or <code>DISABLED</code> part of the path, or none if …\nGets the union of all row rectangles.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nView-process generation.\nReturns the previous and new interactivity if the widget …\nLast window frame that changed visibility of at least one …\nGets the visibility of the widget or the widget’s …\nCall <code>visitor</code> for each <code>inner_rects</code> without allocating or …\nBlank window that contains only the root widget taking no …\nCurrent widget id.\nThe widget.\nID of widget hit.\n<code>ancestors</code> and <code>widget_id</code>, root first.\nSegment width.\nId of the window that contains the widgets.\nId of the window that owns all widgets represented in the …\nThe window that was hit-tested.\nWindow ID.\nDefines a custom scope that does not affect the widget’s …\nWidget info tree build metadata.\nDefines the widget’s child scope, translations inside …\nCalls the <code>info</code> closure and returns the range of children …\nVisit a mutable reference to the new <code>first_segs</code> value, <code>f</code> …\nCalls <code>measure</code> with inline force enabled on the widget.\nCalls <code>layout</code> with inline force enabled on the widget.\nDefines the widget’s inner scope, translations inside …\nVisit a mutable reference to the new <code>last_segs</code> value, <code>f</code> is …\nCall <code>layout</code> with a different set of <code>layout_updates</code>.\nCurrent widget info metadata.\nDefines the root widget outer-bounds scope.\nMeasure a widget.\nDefines a widget scope, translations inside <code>layout</code> target …\nSegment offset from the row rectangle origin.\nGet the z-index of the widget in the latest frame if it …\nZ-index of the hit.\nZip widgets and interactivity.\nIndicates the entered value does not conform to the format …\nAccess info is collected in the app-process and is …\nArguments for <code>on_access_build</code> handlers.\nAccessibility command without associated data.\nDefines how accessibility info is enabled.\nAccessibility role of a node in the accessibility tree.\nIdentifies important, and usually time-sensitive, …\nIdentifies a modal alert dialogs that interrupt a user’s …\nIndicates to assistive technologies that a widget and all …\nIndicates a section of a page that could easily stand on …\nItems are sorted in ascending order by this column.\nIndicates that updates to the region have the highest …\nDefines how inputting text could trigger display of one or …\nAn input to offer both models at the same time. When a …\nIdentifies the global header, which usually includes a …\nClickable widgets that trigger a response when activated …\nIdentifies a widget as being a cell in a tabular container …\ncheckable interactive widget.\n<code>AccessCmd::Click</code>\nIdentifies a column of cells within a tabular structure.\nIdentifies a widget as being a cell in a row contains …\nIdentifies a widget as an input that controls another …\nIdentifies a supporting section that relates to the main …\nIdentifies a footer, containing identifying information …\nKind of current item a widget represents.\nRepresents the current date within a collection of dates …\nIndicates the widget is a definition of a term or concept.\nItems are sorted in descending order by this column.\nIdentifies a widget that has content separate from the …\nThe popup is a dialog.\nFocusable content within complex composite widgets or …\nIdentifies a dynamic scrollable list of articles in which …\nIdentify a figure inside page content where appropriate …\n<code>AccessCmd::Focus</code>\n<code>AccessCmd::FocusNavOrigin</code>\nIdentify a group of widgets that are a register form.\nIndicates the entered value contains a grammatical error.\nIdentifies a container of columns, rows and cells.\nThe popup is a grid.\nIdentifies a cell in a grid widget.\nIdentifies a set of user interface objects that is not …\nDefines a heading to a page or section, with …\nWidget is horizontal.\nText suggesting one way to complete the provided input may …\nIdentifies a widget container that should be considered as …\n<code>AccessCmd::Increment</code>\nDefines the kind of invalid data error of a widget.\nRepresents the current item within a set.\nWhen a user is providing input, a widget containing a …\nInteractive reference to a resource\nIdentifies a list of items.\nIdentifies a list of selectable items.\nThe popup is a list-box.\nIdentifies an item inside a list of items.\nDefines how a live update is communicated to the user.\nRepresents the current location within an environment or …\nIdentifies a widget that creates a live region where new …\nIdentifies the primary content.\nIdentifies a live region containing non-essential …\nIndicates that the content represents a mathematical …\nIdentifies a composite widget that offers a list of …\nThe popup is a menu.\nIdentifies the part of a menu that always stays visible.\nIndicates the widget is an option in a set of choices …\nWidget is a checkable option in a menu.\nWidget is a selectable option in a menu where only one …\nIdentifies major groups of links used for navigating the …\nIdentifies a section whose content is parenthetic or …\nIndicates that updates to the region should <strong>not</strong> be …\nSelectable items in a list-box.\nWidget orientation.\nRepresents the current page within a set of pages such as …\nIndicates that updates to the region should be presented …\nPopup type.\nDefines a widget that displays the progress status for …\nSelectable items in a list where only one item may be …\nIdentifies a group of radio buttons.\nIdentifies significant areas. Usually set with …\n<code>AccessCmd::ReplaceSelectedText</code>\nIdentifies a row of cells within a tabular structure.\nIdentifies a group of rows within a tabular structure.\nIdentifies a cell containing header information for a row …\nIndicates the entered value contains a spelling error.\n<code>AccessCmd::Scroll</code>\nWidget controls the scrolling of content within a viewing …\nIdentifies the search area or form.\nIdentifies a text-box that is used for searching.\n<code>AccessCmd::SelectText</code>\nIdentifies a divider that separates and distinguishes …\n<code>AccessCmd::SetExpanded</code>\n<code>AccessCmd::SetNumber</code>\n<code>AccessCmd::SetString</code>\n<code>AccessCmd::SetToolTipVis</code>\nDefines an input where the user selects a value from …\nSort direction.\nDefines a type of range that expects the user to select a …\nIdentifies a live region containing advisory information …\nRepresents the current step within a process such as the …\nIdentifies a check-box with named states.\nIdentifies a widget in a tab-list that selects the active …\nIdentifies the widget that serves as the container for a …\nIdentifies a container for the active tab.\nIdentifies the widget containing the role as having a …\nIdentifies a word or phrase with an optional corresponding …\nIdentifies a widget that allows the input of free-form …\nRepresents the current time within a set of times such as …\nIndicates to assistive technologies that a widget is a …\nDefines the containing widget as a collection of commonly …\nIdentifies a contextual text bubble that displays a …\nWidget that allows the user to select one or more items …\nThe popup is a tree.\nIdentifies a widget as being grid whose rows can be …\nIdentifies an item in a tree widget.\nAccess info is send to the view-process because it was …\nWidget is vertical.\nAccessibility info for a widget.\nAccessibility metadata.\nIdentifies the currently active widget when focus is on a …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nHow input text triggers display of one or more predictions …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIf the widget is checked (<code>Some(true)</code>), unchecked (…\nDefines the total number of columns in a <code>Table</code>, <code>Grid</code>, or …\nDefines a widget’s column index in the parent table or …\nDefines the number of columns spanned by the widget in the …\nAccessibility commands supported by the widget.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWidget(s) whose contents or presence are controlled by …\nKind of current item the widget represents.\nIdentifies the widget(s) that describes this widget.\nIdentifies the widget that is described by this widget.\nIdentifies the widget(s) that provide additional …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGets the invalid widget that this widget is an error …\nGets visibility of related widgets.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExclude the widget and descendants from the view-process …\nUses the accessible children as <code>labelled_by</code>.\nSets if the widget is modal when displayed.\nIndicates that the user may select more than one item from …\nIndicates that the widget is not editable, but is …\nIndicates that user input is required on the widget before …\nIndicates that the widget is selected.\nOptions for next widget to read.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nIndicates the availability and type of interactive popup …\nFull widget info.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the widget data has errors.\nIf the widget and descendants is <em>visible</em> in the …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nIs not enabled in app nor view.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nIs enabled in app at least.\nIndicates that the user may select more than one item from …\nIndicates that the widget is not editable, but is …\nIndicates that user input is required on the widget before …\nIndicates that the widget is selected.\nDefines the number of items in the current set of list …\nDefines the widget’s number or position in the current …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGets the accessibility name explicitly set on this widget.\nIdentifies the widget(s) that labels the widget it is …\nIf the widget children must be used like <code>labelled_by</code>.\nIdentifies the widget that is labelled by this widget.\nGets the language of texts inside this widget and …\nDefines the hierarchical level of a widget within a …\nGets the live indicator, atomic and busy.\nIndicates whether the widget is modal when displayed.\nPartially build view info, does not include children info.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRegister a <code>handler</code> that is called every time view-process …\nIndicates whether the widget’s orientation is …\nExtra widgets that are <em>child</em> to this widget, but are not …\nShort hint (a word or short phrase) intended to help the …\nAdd a supported access command.\nPush a widget whose contents or presence are controlled by …\nPush a widget that describes this widget.\nPush a widget that provide additional information related …\nPush an option for next widget read that is not the next …\nPush a widget that provide additional information related …\nPush a widget that is a <em>child</em> of this widget, but is not …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nAccessibility role of the widget.\nDefines the total number of rows in a <code>Table</code>, <code>Grid</code>, or …\nDefines a widget’s column index in the parent table or …\nDefines the number of columns spanned by the widget in the …\nNormalized (0..1) horizontal scroll, 0 is showing the …\nNormalized (0..1) vertical scroll, 0 is showing the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nIdentifies the currently active widget when focus is on a …\nSet how input text triggers display of one or more …\nIf the widget is checked (<code>Some(true)</code>), unchecked (…\nSets the total number of columns in a <code>Table</code>, <code>Grid</code>, or …\nSets the widget’s column index in the parent table or …\nSets the number of columns spanned by the widget in the …\nIndicates that the widget represents the current item of a …\nSet a widget that is described-by this widget.\nIndicates that the widget is an error message for the …\nIndicate that the widget toggles the visibility of related …\nIndicates that the widget’s data is invalid with …\nSets the number of items in the current set of list items …\nSets the widget’s number or position in the current set …\nSets a custom name for the widget in accessibility info.\nSet a widget that is labelled-by this widget.\nDefines the language used by screen-readers to read text …\nSets the hierarchical level of the widget within a parent …\nIndicate that the widget can change, how the change can be …\nIndicates whether the widget’s orientation is …\nShort hint (a word or short phrase) intended to help the …\nIndicates the availability and type of interactive popup …\nSet the accessibility role of the widget.\nSets the total number of rows in a <code>Table</code>, <code>Grid</code>, or <code>TreeGrid</code>…\nSets the widget’s row index in the parent table or grid.\nSets the number of rows spanned by the widget in the …\nSets the amount scrolled horizontally if allowed.\nSets the amount scrolled vertically if allowed.\nSets the sort direction for the table or grid items.\nSet the current value.\nSet the maximum value (inclusive).\nSet the minimum value (inclusive).\nSet a text that is a readable version of the current value.\nIndicates if items in a table or grid are sorted in …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCurrent value.\nMaximum value (inclusive).\nMinimum value (inclusive).\nCurrent value in a readable format.\nWidget that is converting to view info.\nIterator over all ancestors of a widget.\nIterator over all children of a widget.\nInclude the descendant and continue filtering its …\nIterator over all next siblings of a widget.\nIterator over all next siblings of a widget.\nReversing tree iterator.\nSkip the descendant but continue filtering its descendants.\nSkip the descendant and its descendants.\nInclude the descendant but skips its descendants.\nWidget tree filter selected for a widget in the tree.\nFiltering tree iterator.\nPrimary implementer of <code>TreeIterator</code>.\nIterator that traverses the branches of a widget tree.\nNew empty iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>Include</code> for <code>true</code> and <code>Skip</code> for <code>false</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew with a children selection.\nCheck if any item is not filtered out by a <code>TreeFilter</code> …\nCreates an iterator which uses a closure to filter items …\nGets the first item not filtered out by a <code>TreeFilter</code> …\nCreates a reverse tree iterator.\nQuery pattern for the <code>WidgetInfoInspectorExt</code> inspect …\nQuery pattern for the <code>WidgetInfoInspectorExt</code> inspect …\nInspected contextual variables actualized at the moment of …\nWidget instance inspector info.\nWidget instance item.\nMarks an intrinsic node instance inserted by the widget.\nProperty instance.\nExtensions methods for <code>WidgetInfo</code>.\nInspected contextual variables actualized at the moment of …\nBuilder that was used to instantiate the widget.\nIf a <code>inspector_info</code> is defined for the widget.\nGet and downcast.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the actualized property var, if at the moment of info …\nGet and map debug.\nReturns the first ancestor that matches.\nReturns the first child that matches.\nReturns the first descendant that matches.\nSearch for a property set on the widget.\nReference the builder that was used to generate the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinal instance items.\nReturns <code>true</code> if the pattern includes the widget.\nReturns <code>true</code> if the pattern includes the property.\nGets the parent property that has this widget as an input.\nIterate over property items.\nFinal property args.\nIf the property was captured by the widget.\nIntrinsic node nest group.\nName given to this intrinsic by the widget.\nPlaceholder for the dynamic child of an adoptive node.\nRepresents a node setup to dynamically swap child.\nA reference counted <code>UiNode</code>.\nA reference counted <code>UiNodeList</code>.\nWidget is rendered first causing all overlapping siblings …\nAn <code>UiNode</code> in a box.\nAn <code>UiNodeList</code> in a box.\nThe <code>PanelListData::child_offset</code> changed since last layout.\nZ-index of widgets that don’t set the index.\nThe <code>PanelListData::define_reference_frame</code> changed since …\nDefault <code>PanelList</code> associated data.\nThe <code>UiNode::deinit</code>.\nThe <code>UiNodeOp::Deinit</code>.\nRepresents an <code>UiNodeList</code> that can be modified using a …\nRepresents a sender to an <code>EditableUiNodeList</code>.\nThe <code>UiNode::event</code>.\nThe <code>UiNodeOp::Event</code>.\nWidget is rendered after all siblings causing it to render …\nA UI node that fills the available layout space.\nThe <code>UiNode::info</code>.\nThe <code>UiNodeOp::Info</code>.\nThe <code>UiNode::init</code>.\nThe <code>UiNodeOp::Init</code>.\nThe <code>UiNode::layout</code>.\nThe <code>UiNodeOp::Layout</code>.\nChild node of <code>match_node</code>.\nChildren node of <code>match_node_list</code>.\nChild node of <code>match_widget</code>.\nThe <code>UiNode::measure</code>.\nThe <code>UiNodeOp::Measure</code>.\nA UI node that does nothing and has collapsed layout (zero …\nRepresents an <code>UiNodeListObserver</code> that applies an offset to …\nRepresents the final <code>UiNodeList</code> in a panel layout node.\nRepresents an item’s associated data in a <code>PanelList</code>.\nIdentifies changes in <code>PanelListData</code> since last layout.\nFirst and last child widget in a <code>PanelList</code>.\nThe <code>UiNode::render</code>.\nThe <code>UiNodeOp::Render</code>.\nThe <code>UiNode::render_update</code>.\nThe <code>UiNodeOp::RenderUpdate</code>.\nRepresents the contextual parent <code>SortingList</code> during an …\nRepresents a sorted view into an <code>UiNodeList</code>.\nRepresents an UI tree node.\nRepresents a list of UI nodes.\nAdds the <code>chain</code> method for all <code>UiNodeList</code> implementors.\nImplementation of <code>UiNodeListChain::chain</code>.\nRepresents an <code>UiNodeList::update_all</code> observer that can be …\nRepresents a node operation in a <code>match_node</code>.\nIdentifies an <code>UiNodeOp</code> method without the associated data.\nVec of boxed UI nodes.\nThe <code>UiNode::update</code>.\nThe <code>UiNodeOp::Update</code>.\nWeak reference to a <code>ArcNode&lt;U&gt;</code>.\nWeak reference to a <code>ArcNodeList&lt;U&gt;</code>.\nBuilds a node that can be one of multiple options, …\nBuilds a node list that can be one of multiple options, …\nPosition of a widget inside an <code>UiNodeList</code> render operation.\nAccess to widget z-index in a parent <code>PanelList</code>.\nReturns the <code>type_id</code> of the unboxed list.\nReturns the <code>type_id</code> of the unboxed node.\nReturns <code>true</code> if the <code>EditableUiNodeList</code> still exists.\nGet a flags value with all known bits set.\nAccess to mut <code>dyn Any</code> methods.\nAccess to <code>dyn Any</code> methods.\nAccess to mut <code>dyn Any</code> methods.\nAdapter to <code>match_node</code> child type.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets <code>self</code> boxed, or itself if it is already boxed.\nBox this node or just returns <code>self</code> if it is already a …\nBuild a node that is always the first <code>true</code> condition or …\nBuild a list that is always the first <code>true</code> condition or …\nHelper for complying with the <code>&quot;dyn_node&quot;</code> feature, boxes …\nCreates a new <code>UiNodeList</code> that chains <code>self</code> and <code>other</code>.\nBorrow the actual child.\nBorrow the actual child.\nGets the child offset to be used in the default <code>render_all</code> …\nChild offset to be used in the default <code>render_all</code> and …\nReference the children.\nRequest a removal of all current widgets.\nCommit <code>child_offset</code> and <code>define_reference_frame</code> changes.\nCalls <code>commit</code> for each child data, aggregate changes.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReference the associated data.\nIf a new reference frame should be created for the item …\nIf a new reference frame should be created for the item …\nDeinitializes the node in the current UI context.\nDeinit the list in a context, all nodes are also deinited.\nFlags the current operation as <em>delegated</em>, stopping the …\nFlags the current operation as <em>delegated</em>, stopping the …\nFlags the current operation as <em>delegated</em>, stopping the …\nThe intersection of a source flags value with the …\nDowncast to <code>L</code>, if <code>self</code> is <code>L</code> or is a <code>BoxedUiNodeList</code> that …\nDowncast to <code>T</code>, if <code>self</code> is <code>T</code> or <code>self</code> is a <code>BoxedUiNode</code> that …\nCreates a <code>WeakNode&lt;U&gt;</code> reference to this node.\nCreates a <code>WeakNodeList&lt;L&gt;</code> reference to this list.\nMove all nodes into <code>vec</code>.\nNew reference to no list.\nGet a flags value with all bits unset.\nGets an static string representing the enum variant …\nReceives an event.\nReceive an event for the list in a context, all nodes are …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreate a widget node that wraps the <code>widget</code> with any number …\nCalls <code>f</code> for each node in the list with the index, …\nCalls <code>f</code> for each node in the list with the index and …\nIterate over widget contexts.\nIterate over the list in the Z order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nFrom parts, assumes the nodes are not inited and that <code>child</code>…\nNew from list and associated data.\nNew from an already allocated vec.\nGets the index set on the <code>WIDGET</code>.\nGets the panel children if the <code>parent</code> contains the <code>panel_id</code>…\nGets the index set on the <code>widget</code>.\nIf the current operation was already delegated to the …\nIf the current operation was already delegated to the …\nIf the current operation was already delegated to the …\nBuilds widget info.\nRebuilds the list in a context, all node info is rebuilt.\nGets the ID set on the parent widget info if …\nInitializes the node in a new UI context.\nInit the list in a context, all nodes are also inited.\nGets a <code>BoxedUiNode</code> that already is a full widget or will …\nBox and <code>insert</code> the node.\nRequest an update for the insertion of the <code>widget</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCalled when a node is inserted at <code>index</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto child reference and node.\nInto list and associated data.\nGets a <code>BoxedUiNode</code> that is a full widget.\nCalls <code>SortingList::invalidate_sort</code> on the parent list.\nInvalidate the sort, the list will resort on the nest time …\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the list does not contain any nodes.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this node is inited.\nIf the current call has a parent sorting list.\nGets if this node does nothing and is layout collapsed.\nReturns true if this observer does not use the item …\nGets if this node represents a full widget, that is, it is …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nComputes the widget layout given the contextual layout …\nCall <code>layout</code> for each node and combines the final size …\nCall <code>layout</code> for each node and combines the final size …\nGets the current number of nodes in the list.\nMutable borrow the inner list.\nCreates a node that is implemented as a closure that …\nCreates a node that is implemented as a closure that …\nCreates a node that is implemented as a closure that …\nLike <code>match_node</code>, but does not change the child type when …\nCreates a widget that is implemented as a closure that …\nComputes the widget size given the contextual layout …\nCall <code>measure</code> for each node and combines the final size …\nCall <code>measure</code> for each node and combines the final size …\nRequest a widget move, the widget is searched by <code>id</code>, if …\nRequest a widget remove and re-insert.\nCalled when a node is removed from <code>removed_index</code> and …\nGets the operation without the associated data.\nGets an static string representing the method name …\nCreate the adoptive node, the <code>AdoptiveChildNode</code> must be …\nNew node.\nNew list.\nNew with node that is used when no condition is active.\nNew with list that is used when no condition is active.\nNew from list and sort function.\nNew default empty.\nNew from <code>list</code> and default data.\nNew default.\nNew from <code>list</code> and custom data type.\nNew node that contains a weak reference to itself.\nNew rc list that contains a weak reference to itself.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nKey used to define reference frames for each item.\nRuns the <code>UiNodeOp</code>.\nRuns the  <code>UiNodeOp</code>.\nCalls <code>f</code> for each node in the list with the index, in …\nCalls <code>f</code> for each node in the list with the index and …\nCalls <code>fold</code> for each node in the list in parallel, with …\nCalls <code>fold</code> for each node in the list with the index and …\nPush a conditional node.\nPush a conditional list.\nBox and <code>push</code> the node.\nRequest an update for the insertion of the <code>widget</code> at the …\nReborrow the op.\nCreate a sender that can edit this list.\nRequest an update for the removal of the widget identified …\nThe intersection of a source flags value with the …\nCalled when a node is removed from <code>index</code>.\nGenerates render instructions and updates transforms and …\nRender all nodes.\nUpdates values in the last generated frame.\nRender all nodes.\nReplaces the child node.\nRequest render or render update if there are any changes.\nCalled when large or unspecified changes happen to the …\nRequest a filtered mass removal of nodes in the list.\nComputes <code>other</code> above <code>self</code>, caps at <code>FRONT</code>.\nComputes <code>other</code> below <code>self</code>, stops at <code>BACK</code>.\nReplace the current node with the <code>new_node</code> in the current …\nReplace the current list with the <code>new_list</code> in the current …\nTry set the z-index in the current <code>WIDGET</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCreate a slot node that takes ownership of this node when …\nCreate a slot list that takes ownership of this list when …\nCreate a slot node that takes ownership of this node as …\nCreate a slot node list that takes ownership of this list …\nCreate a slot node that takes ownership of this node when …\nCreate a slot list that takes ownership of this list when …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nWraps the node in a node that, before delegating each …\nEnable tracking the first and last child in the parent …\nCalls <code>f</code> in the context of the node, if it can be locked …\nCreate the adoptive node using a closure that can fail.\nCreates an <code>UiVec</code> containing the arguments.\nCreates an <code>UiVec</code> containing the arguments.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReceives variable and other non-event updates.\nGets the panel children if it may have changed since …\nReceive updates for the list in a context, all nodes are …\nAttempts to upgrade to a <code>ArcNode&lt;U&gt;</code>.\nAttempts to upgrade to a <code>ArcNodeList&lt;U&gt;</code>.\nNew <code>with_capacity</code>.\nCalls <code>f</code> with the <code>WIDGET</code> context of the node if it <code>is_widget</code>…\nWraps <code>child</code> in a node that provides a unique …\nVisit the specific node.\nVisit the specific node with associated data, panic if …\nGets the <code>index</code> sorted in the <code>list</code>.\nReturn value, the widget’s desired size after measure.\nReturn value, the widget’s final size after layout.\nFrame builder.\nInfo builder.\nEvent update args and targets.\nFame updater.\nUpdate targets\nLayout pass state.\nMeasure pass state.\nNormal mode, shows a system window with content rendered.\nHeadless mode, no system window and no renderer. The …\nHeadless mode, no visible system window but with a …\nUnique identifier of a monitor screen.\nCurrent context window.\nDefines the backing data of <code>WINDOW</code>.\nUnique identifier of an open window.\nMode of an open window.\nReturns <code>true</code> if the <code>id</code> is set or flagged in the window.\nCalls <code>named</code> in a debug build and <code>new_unique</code> in a release …\nID of a fake monitor for cases where no monitor is …\nSets the window state <code>id</code> without value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>WindowId::named</code>.\nCalls <code>WindowId::named</code>.\nReturns the argument unchanged.\nCalls <code>WindowId::named</code>.\nCalls <code>WindowId::named</code>.\nCalls <code>WindowId::named</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nCreates an ID from a <code>sequential</code> number.\nRetrieve the underlying value.\nRetrieve the underlying value.\nGet the window state <code>id</code>, if it is set.\nIf it is the <code>Headed</code> or <code>HeadlessWithRenderer</code> modes.\nGets the window ID.\nGets the window ID.\nGets the window info tree.\nCalls <code>init</code> and sets <code>id</code> if the <code>id</code> is not already set in the …\nSets the <code>id</code> to the default value if it is not already set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf it is the <code>Headed</code> mode.\nIf it is the <code>Headless</code> or <code>HeadlessWithRenderer</code> modes.\nReturns <code>true</code> if called inside a window.\nGets the window mode.\nGets the window mode.\nReturns the name associated with the ID or <code>&quot;&quot;</code>.\nGet or generate an ID with associated name.\nGenerate a new ID with associated name.\nNew window context.\nGenerates a new unique ID.\nGenerates a new unique ID.\nRequire the window state <code>id</code>.\nUn-scramble the underlying value to get the original …\nUn-scramble the underlying value to get the original …\nAssociate a <code>name</code> with the ID, if it is not named.\nSet the window state <code>id</code> to <code>value</code>.\nSet test window <code>size</code>.\nSets the widget tree, must be called after every info …\nClone a reference to the window context.\nCall inside <code>with_test_context</code> to deinit the <code>content</code> as a …\nCall inside <code>with_test_context</code> to delivery an event to the …\nCall inside <code>with_test_context</code> to rebuild info the <code>content</code> …\nCall inside <code>with_test_context</code> to init the <code>content</code> as a …\nCall inside <code>with_test_context</code> to layout the <code>content</code> as a …\nCall inside <code>with_test_context</code> to layout the <code>content</code> as a …\nCall inside <code>with_test_context</code> to render the <code>content</code> as a …\nCall inside <code>with_test_context</code> to render_update the <code>content</code> …\nCall inside <code>with_test_context</code> to update the <code>content</code> as a …\nGet the test window size.\nGets the window ID, if called inside a window.\nGets the window tree.\nCalls <code>f</code> while the window is set to <code>ctx</code>.\nCalls <code>f</code> while no window is available in the context.\nCalls <code>f</code> with a read lock on the current window state map.\nCall <code>f</code> with an exclusive lock to the window state.\nCalls <code>f</code> with a write lock on the current window state map.\nCalls <code>f</code> inside a new headless window and root widget.")