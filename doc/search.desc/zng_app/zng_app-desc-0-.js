searchState.loadedDescShard("zng_app", 0, "App process implementation.\nStart and manage an app process.\nDesired next step of app main loop.\nObserver for <code>HeadlessApp::update_observed</code>.\nA sender that can awake apps and insert events into the …\nRepresents a channel receiver in an app extension.\nRepresents a channel sender that causes an extensions …\nError when the app connected to a sender/receiver channel …\nApplication builder.\nAn app extension.\nInfo about an app-extension.\nList of app-extensions that are part of an app.\nArguments for <code>on_app_start</code> handlers.\nDuration elapsed since an epoch.\nRepresents a timeout instant.\nDeadline that is always elapsed.\nEarliest instant.\nRepresents the app process <code>exit</code> request.\nCancellable event raised when app process exit is …\nExit the loop and drop the app.\nCancellation message of an exit request.\nArguments for <code>EXIT_REQUESTED_EVENT</code>.\nA headless app controller.\nInstant service.\nDefines how the <code>INSTANT.now</code> value updates in the app.\nThe maximum representable instant.\nDeadline that is practically never reached.\nTime is controlled by the app.\nEvery call to <code>now</code> resamples the time.\nImmediately try to receive more app events.\nCalls during an update pass (or layout, render, etc.) read …\nSleep until an app event is received.\nAccessibility/automation events.\nAdds the <code>advance</code> to the current manual time.\n Declare a mutable <em>clone-move</em> app event handler.\n Declare a <em>clone-move</em> app event handler that is only …\nCast to dynamically dispatched observer, this can help …\nAssert that the value is <code>AppControlFlow::Exit</code>.\nAssert that the value is <code>AppControlFlow::Wait</code>.\n Declare an async <em>clone-move</em> app event handler.\n Declare an async <em>clone-move</em> app event handler that is …\n Declare an async <em>clone-move</em> event handler.\n Declare an async <em>clone-move</em> event handler that is only …\nCalls an <code>AppHandler&lt;A&gt;</code> once and blocks until the update …\nPolls a <code>future</code> and updates the app repeatedly until it …\nCalls multiple <code>AppHandler&lt;A&gt;</code> once each and blocks until …\nGets the extension boxed.\nReturns <code>Some(t)</code> where t is the time <code>self + duration</code> if t …\nReturns the amount of time elapsed from another instant to …\nReturns <code>Some(t)`` where t is the time </code>self - duration<code>if</code>…\n Declares new <code>Command</code> static items.\nGets if the extension <code>E</code> is in the list.\nGets i the extension is in the list.\nApp-process crash handler.\n Register a <code>FnOnce(&amp;mut CrashConfig)</code> closure to be called …\nCalled when the application is exiting.\nBroadcast to all.\nIf device events are enabled for the current app.\nCalls the <code>handler</code> once and <code>block_on</code> it with a 60 seconds …\nCalls the <code>handlers</code> once each and <code>block_on_multi</code> with a 60 …\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since this instant.\nIf the application should notify raw device events.\nIf the application should notify raw device events.\nEnable widget instantiation in crates that can’t depend …\nResumes normal time.\nInstant of first usage of the <code>INSTANT</code> service in the …\nApp event and commands API.\nCalled after <code>event_ui</code>.\nCalled just after <code>AppExtension::event</code>.\n Declares new <code>EventArgs</code> types.\n Declares new <code>Event&lt;A&gt;</code> static items.\nCalled just before <code>event_ui</code> when an event notifies.\nCalled just after <code>AppExtension::event_preview</code>.\nCalled just before <code>event</code>.\nCalled just after <code>AppExtension::event_ui</code>.\nRequests and wait for app exit.\nRegister a request for process exit with code <code>0</code> in the …\nCreate an unbound channel that causes an extension update …\nCreate a bounded channel that causes an extension update …\nIncludes an application extension.\nList of app extensions that are part of the current app.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandler types and macros.\nReturns <code>true</code> if the deadline was reached.\nIf the app has exited.\n Declare a mutable <em>clone-move</em> event handler.\n Declare a <em>clone-move</em> event handler that is only called …\nGets the unique ID of the current app.\nCalled when info rebuild is requested for windows and …\nCalled just after <code>AppExtension::info</code>.\nInitializes this extension.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf an app is already running in the current thread.\nGets a variable that tracks if the app is suspended by the …\nCalled when layout is requested for windows and widgets.\nCalled just after <code>AppExtension::layout</code>.\nReturns the deadline further into the future.\nReturns the deadline further into the past or closest to …\nStarts building an application with no extensions.\nDefines how the <code>now</code> value updates.\nIf the crate was built with <code>feature=&quot;multi_app&quot;</code>.\nNew info for <code>E</code>.\nNew args from values that convert into the argument types.\nReturns an instant corresponding to “now” or an …\nArguments for event that happened now (<code>INSTANT.now</code>).\nRegister a <code>handler</code> to run when an <code>APP</code> starts running in …\nGets a variable that configures if <code>INSTANT.now</code> is the same …\nEnables <code>tracing</code> events printing if a subscriber is not …\nFilter used by <code>print_tracing</code>, removes some log noise from …\n New <code>Box&lt;PropertyArgs&gt;</code> box from a property and value.\n New <code>PropertyId</code> that represents the type and name.\n New <code>PropertyInfo</code> from property path.\n Gets the strong input storage types from a property path.\nPush the extension info.\nCalled for each raw event received.\nRegister info abound this extension on the info list.\nFrame render and metadata API.\nCalled when render is requested for windows and widgets.\nCalled just after <code>AppExtension::render</code>.\nIf headless rendering is enabled.\nPanics if the extension <code>E</code> is not present.\nStarts the app, then starts polling <code>start</code> to run.\nInitializes extensions in headless mode and returns an …\nExecute the async <code>task</code> in the UI thread, updating the app …\nReturns the amount of time elapsed from another instant to …\nSend an extension update and <code>msg</code>, blocks until the app …\nSend an extension update and <code>msg</code>, blocks until the app …\nResume a panic in the app main loop thread.\nSend an extension update and <code>msg</code>, blocks until the app …\nCauses an update cycle to happen in the app.\nSet the current <code>INSTANT.now</code>.\nKey combination types.\n Creates a <code>Shortcut</code>.\n New <code>SourceLocation</code> that represents the location you call …\nPause the <code>INSTANT.now</code> value, after this call it must be …\nDeclares a static unique ID that is lazy inited.\nModifies the <code>print_tracing</code> subscriber to panic for error …\nThird party licenses service and types.\nReturns the time left until the deadline is reached.\nNew deadline from now + <code>dur</code>.\nApp timers, deadlines and timeouts.\nInstant the event happened.\nReceive an update if any was send.\nExtension type ID.\nExtension type name.\nCreates an <code>UiVec</code> containing the arguments.\nApp updates API.\nCalled after every <code>update_ui</code> and <code>info</code>.\nDoes updates unobserved.\nCalled just after <code>AppExtension::update</code>.\nDoes updates observing <code>update</code> only.\nDoes updates observing <code>event</code> only.\nDoes updates with an <code>AppEventObserver</code>.\nCalled just before <code>update_ui</code>.\nCalled just after <code>AppExtension::update_preview</code>.\nCalled just before <code>update</code>.\nCalled just after <code>AppExtension::update_ui</code>.\nView process connection and other types.\nSet an env variable for the view-process.\nSet the path to the executable for the <em>View Process</em>.\nCreate an <code>Waker</code> that causes a <code>send_update</code>.\nWidget, UI node API.\n Implement a property on the widget to strongly associate …\n Sets properties and when condition on a widget builder.\n Gets the <code>WidgetType</code> info of a widget.\nWindow context API.\nReturns a <code>WindowMode</code> value that indicates if the app is …\nAccessibility service.\nRun the primary or context click action.\nAccessibility info is no longer required for the window.\nExpand or collapse the widget content.\nFocus or escape focus on a widget.\nSets the focus navigation origin.\nIncrement or decrement the widget value by steps.\nAccessibility info is now required for the window.\nReplace the number value.\nRun a scroll command.\nSelect text.\nReplace the text content.\nShow or hide the widget’s tooltip.\nArguments for the <code>ACCESS_CLICK_EVENT</code>.\nArguments for the <code>ACCESS_DEINITED_EVENT</code>.\nArguments for the <code>ACCESS_EXPANDER_EVENT</code>.\nArguments for the <code>ACCESS_FOCUS_EVENT</code>.\nArguments for the <code>ACCESS_FOCUS_NAV_ORIGIN_EVENT</code>.\nArguments for the <code>ACCESS_INCREMENT_EVENT</code>.\nArguments for the <code>ACCESS_INITED_EVENT</code>.\nArguments for the <code>ACCESS_NUMBER_EVENT</code>.\nArguments for the <code>ACCESS_SCROLL_EVENT</code>.\nArguments for the <code>ACCESS_SELECTION_EVENT</code>.\nArguments for the <code>ACCESS_TEXT_EVENT</code>.\nArguments for the <code>ACCESS_TOOLTIP_EVENT</code>.\nScroll page down.\nScroll page left.\nScroll page right.\nScroll page up.\nAccessibility scroll command.\nScroll until the widget is fully visible.\nScroll until the rectangle (in the widget space) is fully …\nSelection end.\nClick the widget in the window.\nScroll command.\nEvent is broadcast.\nEvent is broadcast.\nTarget the widget.\nTarget the widget.\nTarget the widget.\nTarget the widget.\nTarget the widget.\nTarget the widget.\nTarget the widget.\nTarget the widget.\nTarget the widget.\nTarget both widgets.\nIncrement steps.\nNew expanded value.\nIf the widget must be focused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHide tooltip for the widget in the window, if it has any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs context click.\nIs primary click (default action).\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nReplacement number.\nIf only the selected text is replaced.\nShow tooltip for widget in the window, if it has any …\nSelection start.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nReplacement text.\nNew tooltip visibility.\nTarget widget.\nTarget widget.\nTarget widget.\nTarget widget.\nTarget widget.\nTarget widget.\nTarget widget.\nTarget widget.\nTarget widget.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nTarget window.\nRepresents a frame parsed from a stack backtrace.\nArguments for the crash handler dialog function.\nCrash handler config.\nInfo about an app-process crash.\nPanic parsed from a <code>stderr</code> dump.\nEnvironment variable that causes the crash handler to not …\nInfo about the app-process crashes.\nAdd a closure that is called just before the app-process …\nArguments used.\nStack backtrace.\nIterate over frames parsed from the <code>backtrace</code>.\nProcess exit code.\nReads the code line + four surrounding lines if the code …\nColumn in the line of code that defines the panic.\nGets if <code>stderr</code> contains a panic that can be parsed by <code>find</code>.\nGets if <code>stderr</code> contains a panic that can be parsed by <code>find</code> …\n Register a <code>FnOnce(&amp;mut CrashConfig)</code> closure to be called …\nSet the crash dialog-handler used if <code>crash_dialog</code> is not …\nSet the crash dialog process handler.\nInfo about a crash in the dialog-process spawned to handle …\nAdd a closure that is called just before the …\nExit the monitor-process (application) with code.\nPath to file that defines the panic.\nSource code file.\nTry parse <code>stderr</code> for the crash panic.\nTry parse <code>stderr</code> for the crash panic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets if <code>stderr</code> contains a crash panic.\nGets if <code>stderr</code> contains a crash panic that traced …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this frame is inside the Rust panic code.\nGets if <code>stderr</code> does not contain any ANSI scape sequences.\nGets if <code>stdout</code> does not contain any ANSI scape sequences.\nLatest crash.\nLine of code that defines the panic.\nSource code line.\nBest attempt at generating a readable error message.\nPanic message.\nMinidump file.\nChange the minidump directory.\nPosition on the backtrace.\nFunction name.\nDoes not run with crash handler.\nDo not collect a minidump.\nOperating system.\nIterate over frames parsed from the <code>backtrace</code>.\nRemove ANSI escape sequences (CSI) from <code>s</code>.\nRestart the app-process with same argument as the latest …\nGets the number of crash restarts in the app-process.\nRestart the app-process with custom arguments.\nUnix signal that terminated the process.\nFull capture of the app stderr.\nGet <code>stderr</code> without any ANSI escape sequences (CSI).\nFull capture of the app stdout.\nGet <code>stdout</code> without any ANSI escape sequences (CSI).\nName of thread that panicked.\nCrash moment.\nSeconds since Unix epoch.\nWidget where the panic happened.\nRepresents an <code>Event</code> without the args type.\nMethods of <code>EventArgs</code> that are object safe.\nDefault scope, this is the scope of command types declared …\nArguments for <code>Command::on_event</code>.\nError when the app connected to a sender/receiver channel …\nConnected app has disconnected.\nConst rustc-hash hasher.\nIdentifies a command event.\nEvent args for command events.\nA handle to a <code>Command</code> subscription.\nAdds the <code>info</code> command metadata.\nAccess to metadata of a command.\nRead-write command metadata variable.\nUnique identifier of a command metadata state variable.\nAdds the <code>name</code> command metadata.\nRepresents a reference counted <code>dyn Any</code> object parameter …\nRepresents the scope of a <code>Command</code>.\nRegistered commands set.\nApp events and commands service.\nEVENTS L10N integration.\nRepresents an event.\n<code>Event&lt;A&gt;</code> arguments.\nRepresents an event widget subscription, handler callback …\nRepresents a collection of event handles.\nEvent propagation handle associated with one or multiple …\nAn event channel receiver.\nAn event update sender that can be used from any thread …\nRead-only command metadata variable.\nConnected app has not responded.\nError when the app connected to a sender channel has …\nScope of a widget.\nScope of a window.\nThe command args.\nAccess to <code>dyn Any</code> methods.\nGets the event without the args type.\nDrop all handles.\nClone the event into a type erased box.\nThe command.\n Declares new <code>Command</code> static items.\n Declares new <code>Command</code> static items.\nCommands that had handles generated in this app.\nInsert all targets of this event on the <code>UpdateDeliveryList</code>.\nBroadcast to all widget subscribers for <code>CommandScope::App</code>. …\nReturns <code>param</code> if is not <code>enabled</code>.\nGets a typed reference to the parameter if it is of type <code>T</code>.\nNew handle not connected to any command.\nEmpty collection.\nHandle to no event.\nIf the command handle was enabled when the command …\nReturns <code>param</code> if is <code>enabled</code>.\nEvent that receives from this sender.\nEvent that sends to this receiver.\nUnderlying event that represents this command in any scope.\n Declares new <code>Event&lt;A&gt;</code> static items.\n Declares new <code>EventArgs</code> types.\n Declares new <code>EventArgs</code> types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWidget scope.\nWidget scope.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nClone a meta value identified by a <code>StateId</code> if it is set.\nRetrieve the underlying value.\nClone a meta value identified by a <code>StateId</code>.\nClone a meta value identified by a <code>StateId</code>.\nClone a meta variable identified by a <code>CommandMetaVarId</code>, if …\nClone a meta variable identified by a <code>CommandMetaVarId</code>.\nClone a meta variable identified by a <code>CommandMetaVarId</code>.\nCalls <code>handler</code> and stops propagation if propagation is …\nCalls <code>handler</code> and stops propagation if propagation is …\nCalls <code>handler</code> if the update is for this event and …\nCalls <code>handler</code> if the update is for this event and …\nThe command handle held by the event handler.\nCall <code>handler</code> if propagation is not stopped and the command …\nReturns <code>true</code> if the update is for this event.\nReturns <code>true</code> if the update is for this command and scope.\nReturns <code>true</code> if the update is for this event.\nGets a variable that tracks if this command has any …\nGets if the command has handlers without creating a …\nReturns <code>true</code> if any app level callback is registered for …\nReturns <code>true</code> if any app level callback is registered for …\nReturns <code>true</code> if at least one widget is subscribed to this …\nReturns <code>true</code> if at least one widget is subscribed to this …\nRegister a callback that is called just before an event …\nGets a read-write variable that is a short informational …\nSet the metadata value only if it is not set.\nSets the initial info if it is not set.\nRegister a closure that is called to localize command …\nSets the initial name if it is not set.\nSet the metadata variable if it was not set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns into a future that receives the oldest send update, …\nReturns <code>true</code> if the parameter type is <code>T</code>.\nReturns <code>true</code> if <code>self</code> is the type erased <code>event</code>.\nIf the handle is not connected to any command.\nReturns <code>true</code> if empty or all handles are dummy.\nIf the handle is not actually registered in an event.\nReturns if this handle has enabled the command.\nGets a variable that tracks if this command has any …\nGets if the command is enabled without creating a tracking …\nIf the handler must skip this event instance.\nReturns <code>true</code> if the widget is subscribed to this event.\nReturns <code>true</code> if the widget is subscribed to this event.\nCreates a blocking iterator over event updates, if there …\nGets a read-write variable that is the display name for …\nName of the event static item.\nName of the event static item.\nGets a read-only variable that formats the name and first …\nNew in the not stopped default state.\nNew args from values that convert into the argument types.\nNew param.\nGenerates a new unique ID.\nCreate an event update for this event with delivery list …\nCreate and event update for this event with a custom …\nSchedules the raw event update.\nSchedule an event update.\nSchedule a command update without param.\nSchedule a command update without param for all scopes …\nSchedule a command update linked with an external event …\nSchedule a command update with custom <code>param</code>.\nArguments for event that happened now (<code>INSTANT.now</code>).\nGet the event update args if the update is for this event.\nGet the command update args if the update is for this …\nCreates an event handler.\nCreates an event handler for the command.\nCreates a preview event handler.\nCreates a preview event handler for the command.\nGet the event update args if the update is for this event …\nGet the event update args if the update is for this event …\nReturns a reference to a parameter of <code>T</code> if <code>parameter</code> is …\nOptional parameter for the command handler.\nDrop all handles without stopping their behavior.\nDrop the handle without un-registering it, the resource it …\nPropagation handle associated with this event instance.\nAdd <code>other</code> handle to the collection.\nCreates a receiver channel for the event. The event …\nReceives the oldest update, blocks until the event updates.\nReturns a future that receives the oldest send update, …\nReceives the oldest send update, blocks until the event …\nReceives the oldest send update, blocks until the event …\nCommand scope.\nScope of command that notified.\nGets the command in a new <code>scope</code>.\nSend an event update.\nCreates a sender channel that can notify the event.\nUn-scramble the underlying value to get the original …\nSet the meta value associated with the <code>StateId</code>.\nSets if the command event handler is active.\nSignal subsequent handlers that the event is already …\nRegister the widget to receive targeted events from this …\nCreate a new handle to this command.\nRegister the widget to receive targeted events from this …\nCreate a new handle for this command for a handler in the …\nGets the instant this event happened.\nInstant the event happened.\nCreate a non-blocking iterator over event updates, the …\nTries to receive the oldest sent update not received, …\nGets the <code>TypeId</code> of the parameter.\nCalls <code>visitor</code> for each scope of this command.\nCalls <code>visit</code> for each widget subscribed to this event.\nCalls <code>visit</code> for each widget subscribed to this event.\nCreate an <code>EventHandles</code> collection with <code>self</code> and <code>other</code>.\nVisit the command custom metadata of the current scope.\nRepresents an event handler in the app context.\nArguments for a call of <code>AppHandler::event</code>.\nRepresents a weak handle to an <code>AppHandler</code> subscription.\nApp handler wrapper that filters the events, only …\nWidget handler wrapper that filters the events, only …\nRepresents a handler in a widget context.\n Declare a mutable <em>clone-move</em> app event handler.\n Declare a <em>clone-move</em> app event handler that is only …\n Declare an async <em>clone-move</em> app event handler.\n Declare an async <em>clone-move</em> app event handler that is …\n Declare an async <em>clone-move</em> event handler.\n Declare an async <em>clone-move</em> event handler that is only …\nBox the handler.\nBoxes the handler.\nBoxes the handler if the <code>feature = &quot;dyn_closure&quot;</code> is …\nBoxes the handler if the <code>feature = &quot;dyn_closure&quot;</code> is …\nDynamic clone.\nCalled every time the handler’s event happens in the …\nCalled every time the event happens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle to the <code>AppHandler</code> subscription.\n Declare a mutable <em>clone-move</em> event handler.\n Declare a <em>clone-move</em> event handler that is only called …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the handler is invoked in a <em>preview</em> context.\nNew filter handler.\nNew filter handler.\nUnsubscribes the <code>AppHandler</code>.\nCalled every widget update.\nLet the renderer select the algorithm, currently this is …\nEnable synthetic bold. Font resolution finds the closest …\nValue that is updated with frame update requests.\nOutput of a <code>FrameBuilder</code>.\nOutput of a <code>FrameBuilder</code>.\nBuilder for a chain of render and hit-test clips.\nThe image is scaled with an algorithm that preserves …\nNo synthetic font generated, if font resolution does not …\nEnabled all synthetic font possibilities.\nWidget is not a part of the 3D space of the parent. If it …\nA text font.\nConfigure if a synthetic font is generated for fonts that …\nA full frame builder.\nA frame quick update.\nRepresents a frame value that may be updated.\nUnique key of an updatable value in the view-process frame.\nRepresents an update targeting a previously setup …\nBuilder for the hit-testable shape of the inner-bounds of …\nBuilder for a chain of hit-test clips.\nImage scaling algorithm in the renderer.\nA loaded or loading image.\nEnable synthetic oblique. If the font resolution does not …\nWhen scaling the image up, the image appears to be …\nWidget is a part of the 3D space of the parent. If it has …\nRepresents an unique key for a spatial reference frame …\nThe source image’s edge regions are tiled (repeated) to …\nNine-patch border repeat mode.\nRepresents a display list reuse range.\nThe source image’s edge regions are tiled (repeated) to …\nThe source image’s edge regions are tiled (repeated) to …\nUnique ID of a reference frame.\nThe source image’s edge regions are stretched to fill …\nDefines if a widget is part of the same 3D space as the …\nValue is not updated, a new frame must be send to change …\nGet a flags value with all known bits set.\nReturns a value that indicates if the image is already …\nIf the value is updating rapidly.\nCurrent culling rect, widgets with outer-bounds that don’…\nReturns <code>true</code> if hit-tests are automatically pushed by …\nReturns <code>true</code> if all transform updates are also applied to …\nCreate a binding with this key.\nLike <code>bind</code> but the key is modified to include the …\nCreate a binding with this key and <code>var</code>.\nLike <code>bind_var</code> but the key is modified to include the …\nCreate a binding with this key, <code>var</code> and already mapped …\nLike <code>bind_var_mapped</code> but the key is modified to include …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIf previously generated display list items are available …\nIf widget update can be <em>skipped</em> by setting reuse in …\nClear color selected for the frame.\nNew clear color.\nBound colors update.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n<code>FontSynthesis::ENABLED</code>\nThe intersection of a source flags value with the …\nBuilt display list.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nRenderer extension updates.\nFinalizes the build.\nFinalize the update.\nBound floats update.\nId of the new frame.\nId of the new frame.\nFrame that owns the reused items selected by this range.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert to full <code>ENABLED</code> or <code>DISABLED</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nKey from a <code>FrameValueKey&lt;PxTransform&gt;</code>.\nKey from a <code>FrameValueKey&lt;PxTransform&gt;</code> and <code>u32</code> index.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nKey from <code>SpatialFrameId</code>.\nKey from <code>SpatialFrameId</code> and <code>u32</code> index.\nKey from <code>WidgetId</code> and <code>u32</code> index.\nRetrieve the underlying value.\nCalls <code>update</code> with <code>is_visible</code> set to <code>false</code>.\nCalls <code>render</code> with <code>is_visible</code> set to <code>false</code>.\nGets the inner-bounds hit-test shape builder.\nValue ID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto the (initial) value.\nWhether all known bits in this flags value are set.\nIf the reuse range did not capture any display item.\nWhether all bits in this flags value are unset.\nGets if the font is the fallback that does not have any …\nReturns <code>true</code> if hit-testing is enabled in the widget …\nIf the widget is hit-testable, if this is <code>false</code> all …\nReturns <code>true</code> if the widget reference frame and stacking …\nReturns <code>true</code> if the widget stacking context is still being …\nReturns <code>true</code> if the widget inner transform update is still …\nIf is building a frame for a headless and renderless …\nReturns <code>true</code> if display items are actually generated, if …\nReturns <code>true</code> if view updates are actually collected, if …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nNew builder.\nNew frame update builder.\n<code>new</code> with only the inputs required for renderless mode.\nGenerates a new unique ID.\nGenerates a new unique ID.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCollect display list from <code>split</code> into <code>self</code>.\nCollect updates from <code>split</code> into <code>self</code>.\nCreate a new display list builder that can be built in …\nCreate an update builder that can be send to a parallel …\nPush a standalone backdrop filter.\nPush a border.\nPushes a composite hit-test that defines a border.\nPush a nine-patch border with conic gradient source.\nPush a nine-patch border with image source.\nPush a nine-patch border with linear gradient source.\nPush a nine-patch border with radial gradient source.\nPre-starts the scope of a widget with <code>offset</code> set for the …\nPush a clip ellipse.\nPush a clip ellipse that affects the <code>inner_hit_test</code>.\nCalls <code>render</code> with a new clip context that adds the …\nPushes the <code>clip_rect</code>.\nPush a clip <code>rect</code>.\nPush a clip <code>rect</code> that affects the <code>inner_hit_test</code>.\nCalls <code>render</code> with a new clip context that adds the …\nPush the <code>clip_rect</code> with rounded <code>corners</code>.\nPush a clip <code>rect</code> with rounded <code>corners</code>.\nPush a clip <code>rect</code> with rounded <code>corners</code> that affects the …\nCalls <code>clips</code> to push multiple clips that define a new clip …\nPush clips that affect the <code>inner_hit_test</code>.\nPush a color rectangle.\nPush a repeating conic gradient rectangle.\nPush a <code>color</code> dot to mark the <code>offset</code>.\nRecord the <code>offset</code> in the current context and <code>push_debug_dot</code>…\nPush a hit-test ellipse.\nPush a custom display extension context that wraps <code>render</code>.\nPush a custom display extension context with custom …\nPush a custom display extension item.\nPush a custom display extension item with custom encoding.\nCalls <code>render</code> with added <code>blend</code> and <code>filter</code> stacking context.\nPush an image.\nPush the widget reference frame and stacking context then …\nInclude a widget backdrop filter and continue the render …\nSets the widget blend mode and continue the render build.\nIncludes a widget filter and continues the render build.\nIncludes a widget opacity filter and continues the render …\nInclude the <code>transform</code> on the widget inner reference frame.\nPush a styled vertical or horizontal line.\nPush a repeating linear gradient rectangle.\nPush an image mask that affects all visual rendered by …\nCalls <code>render</code> with added opacity stacking context.\nPush a repeating radial gradient rectangle.\nPush a hit-test <code>rect</code>.\nCalls <code>render</code> inside a new reference frame transformed by …\nIf <code>group</code> has a range and <code>can_reuse</code> a reference to the …\nPush a hit-test <code>rect</code> with rounded <code>corners</code>.\nPush a text run.\nPushes a transform that affects the <code>inner_hit_test</code>.\nStart a new widget outer context, this sets <code>is_outer</code> to …\nThe intersection of a source flags value with the …\nConnection to the renderer that will render this frame.\nGets the instance key in the <code>renderer</code> namespace.\nGets the image ID in the <code>renderer</code> namespace.\nUpdate the info transforms of the widget and descendants.\nPixel scale factor used by the renderer.\nUn-scramble the underlying value to get the original …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the color used to clear the pixel frame before drawing …\nChange the color used to clear the pixel buffer when …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTo view key.\nTo view key with an extra <code>index</code> modifier.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCurrent transform.\nCurrent transform.\nBound transforms update.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreate a value update with this key.\nLike <code>update</code> but the key is modified to include the …\nUpdate a color value.\nUpdate a color value, if there is one.\nUpdate a custom extension value.\nUpdate a custom extension value with custom encoding.\nUpdate a float value.\nUpdate a float value, if there is one.\nUpdate the widget’s inner transform.\nUpdate a transform value that does not potentially affect …\nUpdate a transform value, if there is one.\nCreate a value update with this key and <code>var</code>.\nLike <code>update_var</code> but the key is modified to include the …\nCreate a value update with this key, <code>var</code> and already …\nLike <code>update_var_mapped</code> but the key is modified to include …\nUpdate the widget’s outer transform.\nReference the (initial) value.\nNew value.\nId of the current widget context.\nRuns <code>render</code> and <code>hide</code> all widgets with outer-bounds that don…\nRuns <code>render</code> with <code>auto_hit_test</code> set to a value for the …\nRuns <code>render_update</code> with <code>auto_hit_test</code> set to a value for …\nCalls <code>render</code> with back face visibility set to <code>visible</code>.\nCalls <code>render_update</code> with an <code>offset</code> that affects the first …\nRuns <code>render</code> with <code>aa</code> used as the default text anti-aliasing …\nRuns <code>render</code> with hit-tests disabled, inside <code>render</code> …\nUpdate the transform applied after the inner bounds …\nCalls <code>render</code> to render a separate nested window on this …\nCalls <code>update</code> to render update a separate nested window on …\nCalls <code>render</code> with <code>can_reuse</code> set to <code>false</code>.\nCalls <code>render_update</code> with <code>can_reuse_widget</code> set to <code>false</code>.\nUpdate a transform that potentially affects widget bounds.\nUpdate a transform that potentially affects widget bounds, …\nCalls <code>render_update</code> while the <code>transform</code> is updated to …\nIf the value will update rapidly.\nID that will be used to update the value.\nInitial value.\nAny “alt” key.\nAny of the ALT keys.\nShortcut only applies if the command is enabled.\nAny “control” key.\nSequence of two key gestures.\nGesture key identified by the physical key.\nAdds the <code>shortcut</code> metadata.\nAny of the CTRL keys.\nShortcut only applies if the scope is enabled.\nShortcut only applies if the scope is in the focused path.\nKey-press plus modifiers.\nA keyboard key used in a gesture.\nGesture key identified by the semantic key.\nA sequence of two keyboard combinations.\nA keyboard combination.\nAny “logo” key.\nThe left “alt” key.\nThe left “control” key.\nThe left “logo” key.\nThe left “shift” key.\nModifier press and release.\nA modifier key press and release without any other key …\nRepresents the current state of the keyboard modifiers.\nShortcut, gesture parsing error.\nThe right “alt” key.\nThe right “control” key.\nThe right “logo” key.\nThe right “shift” key.\nAny “shift” key.\nAny of the SHIFT keys.\nKeyboard gesture or chord associated with a command.\nConditions that must be met for the shortcut to apply.\nMultiple shortcuts.\nAny of the Windows/Apple keys.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns modifiers that set both left and right flags if …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAll key codes that when pressed form the modifiers state.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe second key gesture.\nIf the <code>shortcut</code> is present in the shortcuts.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nError message, usually in the pattern “<code>{invalid-input}</code> …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nTry to generate shortcuts that produce the <code>character</code>.\nModifier from <code>code</code>, returns empty if the key is not a …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nModifier from <code>key</code>, returns empty if the key is not a …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns <code>true</code> if any alt key is pressed.\nReturns <code>true</code> if any control key is pressed.\nReturns <code>true</code> if any shift key is pressed.\nReturns <code>true</code> if any logo key is pressed.\nSets the initial shortcuts.\nSets the initial shortcut filters.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns only the alt flags in <code>self</code>.\nReturns only the control flags in <code>self</code>.\nReturns only the logo flags in <code>self</code>.\nReturns only the shift flags in <code>self</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if only any flag in <code>part</code> is pressed.\nReturns <code>true</code> if only any alt key is pressed.\nReturns <code>true</code> if only any control key is pressed.\nReturns <code>true</code> if only any logo key is pressed.\nReturns <code>true</code> if only any shift key is pressed.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe key.\nAll keys that when pressed form the modifiers state.\nLeft modifier key.\nThe key modifiers.\nTo modifiers state.\nModifiers state required by shortcut.\nNew from modifiers and key.\nNew default (empty).\nNew from any error message.\nNew key gesture without modifiers.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGets a read-write variable that is zero-or-more shortcuts …\n Creates a <code>Shortcut</code>.\nGets a read-write variable that sets a filter for when the …\nGets a read-only variable that is the display text for the …\nThe first key gesture.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRemoves <code>part</code> and returns if it was removed.\nRemoves <code>ALT</code> and returns if it was removed.\nRemoves <code>CTRL</code> and returns if it was removed.\nRemoves <code>LOGO</code> and returns if it was removed.\nRemoves <code>SHIFT</code> and returns if it was removed.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee <code>from_char</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThird party licenses.\nRepresents a license id, name and text.\nRepresents a license and dependencies that use it.\nOpen or focus the third party licenses screen.\nRepresents a project or package that uses a license.\nRepresents a license user with license.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLicense SPDX id.\nIf view-process provided third party licenses are included …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLicense name and text.\nLicense used.\nAggregates all registered third party licenses, grouped by …\nLicense name.\nProject or package name.\nRegister a function that loads some third party licenses …\nLicense text.\nProject or package URL.\nProject or packages that use this license.\nLicense user.\nInvert data to be keyed by user.\nAggregates all registered third party licenses, by user, …\nPackage version.\nThird party licenses provided by the view-process, grouped …\nThird party licenses provided by the view-process, by …\nArguments for the handler of <code>on_deadline</code>.\nRepresents a <code>on_deadline</code> handler.\nA <code>deadline</code> timer.\nApp timers, deadlines and timeouts.\nRepresents a timer state in a <code>TimerVar</code> or interval handler.\nArguments for an <code>on_interval</code> handler.\nRepresents a <code>on_interval</code> handler.\nAn <code>interval</code> timer.\nWeak <code>DeadlineHandle</code>\nWeak <code>TimerHandle</code>.\nDrops the handle and forces the handler to drop.\nCount incremented by one every time the timer elapses.\nCount incremented by one every time the timer elapses.\nCount incremented by one every time the timer elapses.\nReturns a <code>DeadlineVar</code> that will update once when the …\nThe timeout deadline.\nThe next deadline.\nThe next deadline.\nTimer deadline, is less-or-equal to the <code>timestamp</code>.\nExpected deadline, is less-or-equal to the <code>timestamp</code>.\nCreate a weak handle to the deadline.\nCreate a weak handle to the timer.\nCreate a handle to nothing, the handle always in the …\nCreate a handle to nothing, the handle is always in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf the handler has executed. The handler executes once …\nReturns a <code>TimerVar</code> that will update every time the <code>interval</code>…\nThe timer interval. Enabled handlers are called every time …\nThe timer interval. Enabled variables update every time …\nThe timer interval. Enabled handlers are called every time …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the timeout handler will never execute. Returns <code>true</code> if …\nIf the timer is not ticking, but can be started again.\nIf the timer is not ticking, but can be started again.\nIf the timer is not ticking, but can be started again.\nIf <code>perm</code> was called in another handle.\nIf <code>perm</code> was called in another handle.\nIf the timer is ticking.\nIf the timer is ticking.\nIf the timer is ticking.\nIf the timer was stopped. The timer can be stopped from …\nIf the timer was stopped.\nIf the timer was stopped while the handler was running …\nThe timestamp of the last update. This can be different …\nNew weak handle that does not upgrade.\nNew weak handle that does not upgrade.\nThe next timer deadline.\nRegister a <code>handler</code> that will be called once when the …\nRegister a <code>handler</code> that will be called every time the …\nDisable the timer, this causes the timer to stop ticking …\nDisable the timer, this causes the timer to stop ticking …\nDisable the timer, this causes the timer to stop ticking …\nDrops the handle but does <strong>not</strong> drop the handler closure.\nDrops the handle but does <strong>not</strong> drop the handler closure.\nEnable the timer, this causes it to start ticking again.\nEnable the timer, this causes it to start ticking again.\nEnable the timer, this causes it to start ticking again.\nResets the <code>count</code>.\nResets the <code>count</code>.\nResets the <code>count</code>.\nSets the <code>interval</code>.\nSets the <code>interval</code>.\nSet the <code>interval</code>.\nDrops the handle and forces the handler to drop.\nPermanently stops the timer.\nLast elapsed time, or the start time if the timer has not …\nLast update time, or the start time if the timer has not …\nWhen the handler was called.\nWhen the handler was called.\nGet the strong handle is still waiting the deadline.\nGet the strong handle if the timer has not stopped.\nImplementation of the <code>task::deadline</code> function when called …\nUpdates that must be reacted by an app owner.\nRepresents a single event update.\nRebuilds info for the target.\nWidget info updates of the current cycle.\nLayouts the target.\nWidget layout updates of the current cycle.\nRepresents an <code>on_pre_update</code> or <code>on_update</code> handler.\nRender the target.\nUpdate frame bindings of the target.\nWidget render updates of the current cycle.\nUpdate schedule service.\nUpdates the target.\nArguments for an <code>on_pre_update</code>, <code>on_update</code> or <code>run</code> handler.\nRepresents all the widgets and windows marked to receive …\nIdentify node and app-extension operations that can be …\nRepresents a set of widgets that subscribe to an event …\nExtension methods for infinite loop diagnostics.\nWeak <code>OnUpdateHandle</code>.\nOutput of <code>widget_and_ancestors</code>.\nProvides an iterator of widget IDs and a window ID.\nWidget updates of the current cycle.\nThe update args.\nReturns <code>true</code> if the widget is one of the subscribers.\nNumber of times the handler was called.\nThe update delivery list.\nRequest delivery list.\nUpdates delivery list.\nRequest delivery list.\nRequest delivery list.\nMutable reference to the update delivery list.\nRequest delivery list.\nUpdates delivery list.\nRequest delivery list.\nRequest delivery list.\nCreate a weak handle.\nCreate a handle to nothing, the handle always in the …\nReturns <code>true</code> if the widget is on the list.\nReturns <code>true</code> if the window is on the list.\nThe event.\nEvents to notify.\nCopy all delivery from <code>other</code> onto <code>self</code>.\nCopy all delivery from <code>other</code> onto <code>self</code>.\nCopy all delivery from <code>other</code> onto <code>self</code>.\nCopy all delivery from <code>other</code> onto <code>self</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSearch all pending widgets in all <code>windows</code>, all search …\nIf the list has pending widgets that must be found before …\nIf has events, update, layout or render was requested.\nInfo rebuild requested.\nInfo rebuild targets.\nInsert the <code>wgt</code> and ancestors up-to the inner most that is …\nInsert the window by itself, the window root widget will …\nDefines a custom span.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> is render or render update is requested for …\nIf another handle has called <code>perm</code>.\nIf another handle has called <code>unsubscribe</code>.\nSchedules a layout update that affects the <code>target</code>.\nLayout requested.\nLayout targets.\nSchedules a layout update for the window only.\nNew list that only allows <code>subscribers</code>.\nNew with list.\nNew with list.\nNew with list.\nNew with list.\nNew weak handle that does not upgrade.\nNew list that allows all entries.\nNew list that does not allow any entry.\nCreate a preview update handler.\nCreate an update handler.\nDrops the handle but does <strong>not</strong> unsubscribe.\nSchedules a full render that affects the <code>target</code>.\nRender requested.\nSchedules a render update that affects the <code>target</code>.\nRender update targets.\nSchedules a render update for the window only.\nFull render targets.\nSchedules a new frame for the window only.\nSchedule the <code>future</code> to run in the app context, each future …\nSchedule an <em>once</em> handler to run when these updates are …\nRegister all subscribers for search and delivery.\nIf search for window a root is pending.\nRegister the widget of unknown location for search before …\nWidgets still pending search or not found.\nCreate an <code>AppEventSender</code> that can be used to awake the app …\nGets all subscribers as a set.\nDrops the handle and forces the handler to drop.\nSchedules an update that affects the <code>target</code>.\nUpdate requested.\nSchedules an info rebuild that affects the <code>target</code>.\nSchedules an info rebuild for the window only.\nSchedules an <code>UpdateOp</code> that optionally affects the <code>target</code> …\nSchedules an <code>UpdateOp</code> for the window only.\nUpdate targets.\nSchedules an update for the window only.\nCustom log entry in the app loop diagnostics.\nCustom span in the app loop diagnostics.\nGets the strong handle if it is still subscribed.\nCreate an std task waker that wakes the event loop and …\nIterate over the widget, parent, grandparent, .., root.\nFound widgets in the delivery list, can be targets or …\nThe window parent.\nWindows in the delivery list.\nCalls <code>handle</code> if the event targets the <code>WIDGET</code> and …\nCalls <code>handle</code> if update was requested for the <code>WIDGET</code>.\nCalls <code>handle</code> if the event targets the <code>WINDOW</code>.\nCalls <code>handle</code> if info rebuild was requested for the window.\nCalls <code>handle</code> if update was requested for the <code>WINDOW</code>.\nCalls <code>handle</code> if layout rebuild was requested for the …\nCalls <code>handle</code> if render frame rebuild or update was …\nAttempted to encode dummy image.\nEncode error.\nError returned by <code>ViewImage::encode</code>.\nHeadless surface view.\nConnection to the running view-process for the context app.\nView-Process finished initializing and is now online.\nView-Process suspended, all resources dropped.\nView-process clipboard methods.\nHandle to a headless surface/document open in the View …\nHandle to an image loading or loaded in the View Process.\nArguments for the <code>VIEW_PROCESS_INITED_EVENT</code>.\nThe View-Process disconnected or has not finished …\nArguments for the <code>VIEW_PROCESS_SUSPENDED_EVENT</code>.\nWeak handle to a window or view.\nHandle to a window open in the view-process.\nView window or headless surface.\nConnection to an image loading or loaded in the View …\nHeaded window view.\nInformation about a successfully opened window.\nUpdate the window’s accessibility info tree.\nAdd a sized font to the window renderer.\nAdd a raw font resource to the window renderer.\nSend an image for decoding.\nStarts sending an image for <em>progressive</em> decoding.\nSystem animations config.\nCall an extension with payload <code>request</code>.\nCall an extension with custom encoded payload.\nReturns the app that owns the view-process that is …\nMonitors list.\nReturns a future that awaits until this image is loaded or …\nBring the window the z top.\nSystem window chrome preferences.\nView-process clipboard methods.\nDrop <code>self</code>.\nSystem preferred color scheme and accent color.\nDelete the sized font.\nDelete the font resource in the window renderer.\nDelete the image resource in the window renderer.\nBroadcast to all widgets.\nBroadcast to all widgets.\nCreates a <code>WeakViewImage</code>.\nMoves the window with the left mouse button until the …\nResizes the window with the left mouse button until the …\nCreate a dummy image in the loaded or error state.\nTries to encode the image to the format.\nReturns the load error if one happened.\nGets the ID for the <code>extension_name</code> in the current …\nAPI extensions implemented by the view-process.\nShows a native file/folder dialog for the window.\nBrings the window to the front and sets input focus.\nSystem font font-aliasing config.\nCreate a new image resource from the current rendered …\nCreate a new image resource from a selection of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current view-process generation.\nReturns the view-process generation on which the window …\nReturns the view-process generation on which the renderer …\nReturns the view-process generation on which the image is …\nView-process generation.\nHandle an <code>Event::Disconnected</code>.\nImage id.\nReturns a list of image decoders supported by the …\nReturns a list of image encoders supported by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the <code>VIEW_PROCESS</code> can be used, this is only true in app …\nIf the image does not actually exists in the view-process.\nif <code>error</code> is <code>Some</code>.\nIf is running in headless renderer mode.\nReturns <code>true</code> if the image has successfully decoded.\nReturns if the image is a single channel mask (A8).\nView-process connected and ready.\nReturns if the image is fully opaque.\nReturns <code>true</code> if the image is progressively decoding and …\nIf this is not the first time a view-process was inited. …\nIf is running both view and app in the same process.\nSystem keyboard pressed repeat config.\nSystem locale config.\nShows a native message dialog for the window.\nMonitor that contains the window.\nSystem multi-click config.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nSends a request to open a headless renderer and associate …\nOpen system title bar context menu.\nSends a request to open a window and associate it with the …\nCopy the partially decoded pixels if the image is …\nActual size of the current pixels.\nNumber of frame send that have not finished rendering.\nReference the decoded pixels of image.\nFinal top-left offset of the window (excluding outer …\nReturns the “pixels-per-inch” metadata associated with …\nEvents directly from view-process not targeting any …\nEvents directly from the view-process targeting the app …\nRead <code>ClipboardType::Extension</code>.\nRead <code>ClipboardType::FileList</code>.\nRead <code>ClipboardType::Image</code>.\nRead <code>ClipboardType::Text</code>.\nRender a new frame.\nCall a render extension with serialized payload.\nCall a render extension with custom encoded payload.\nActual render mode, can be different from the requested …\nUpdate the current frame and re-render it.\nReference the window renderer.\nReference the window or surface renderer.\nReference the window renderer.\nReopen the view-process, causing another <code>Event::Inited</code>.\nPadding that must be applied to the window content so that …\nFinal scale factor.\nSet if the window is “top-most”.\nSets if the headed window is in <em>capture-mode</em>. If <code>true</code> the …\nSet the window cursor icon and visibility.\nSet the window cursor to a custom image.\nSet enabled window chrome buttons.\nSets the user attention request indicator, the indicator …\nSet the window icon.\nEnable or disable IME by setting a cursor area.\nSet if the user can drag-move the window.\nSet if the user can resize the window.\nResize the headless surface.\nSet the window state.\nAttempt to set a system wide shutdown warning associated …\nSet the window icon visibility in the taskbar.\nSet the window title.\nSet video mode used in exclusive fullscreen.\nSet the window visibility.\nReturns the pixel size, or zero if is not loaded or error.\nFinal dimensions of the client area of the window …\nWindow complete state.\nLicenses that may be required to be displayed in the app …\nInstant the event happened.\nInstant the event happened.\nSystem touch config.\nReplace the image resource in the window renderer.\nAttempt to upgrade the weak pointer to the image to a full …\nUse an image resource in the window renderer.\nCall a window extension with serialized payload.\nCall a window extension with serialized payload.\nCall a window extension with serialized payload.\nCall a window extension with custom encoded payload.\nCall a window extension with custom encoded payload.\nCall a window extension with custom encoded payload.\nWrite <code>ClipboardType::Extension</code>.\nWrite <code>ClipboardType::FileList</code>.\nWrite <code>ClipboardType::Image</code>.\nWrite <code>ClipboardType::Text</code>.\nButton press/release from a device, probably a mouse.\nArguments for the <code>BUTTON_EVENT</code>.\nA device event source was added/installed.\nA device event source was removed/un-installed.\nArguments for <code>DEVICE_ADDED_EVENT</code> and <code>DEVICE_REMOVED_EVENT</code>.\nUnique identifier of a device event source.\nKeyboard device key press.\nArguments for the <code>KEY_EVENT</code>.\nMotion on some analog axis.\nMouse device unfiltered move delta.\nMouse device unfiltered wheel motion delta.\nArguments for <code>MOTION_EVENT</code>.\nArguments for <code>MOUSE_MOTION_EVENT</code>.\nArguments for <code>MOUSE_WHEEL_EVENT</code>.\nRaw text input.\nArguments for the <code>TEXT_EVENT</code>.\nAnalog axis.\nButton raw id.\nCharacter received.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nMotion (x, y) delta.\nWheel motion delta, value is in pixels if the <em>wheel</em> is a …\nDevice that was added/removed.\nMouse device that generated the event.\nMouse device that generated the event.\nDevice that generated the event.\nDevice that generated the event.\nKeyboard device that generated the event.\nDevice that generated the event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nRetrieve the underlying value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPhysical key.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nGenerates a new unique ID.\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nUn-scramble the underlying value to get the original …\nIf the button was pressed or released.\nIf the key was pressed or released.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nMotion amount.\nVirtual generic device ID used in device events generated …\nVirtual keyboard ID used in keyboard events generated by …\nVirtual mouse ID used in mouse events generated by code.\nSystem low memory warning, some platforms may kill the app …\nArguments for <code>LOW_MEMORY_EVENT</code>.\nChange in system animation enabled config.\nMotion on some analog axis send to a window.\nSystem window chrome config changed.\nColor scheme or accent color preference changed for a …\nA file was drag-dropped on a window.\nCustom view-process extension event.\nChange in system font anti-aliasing config.\nChange in system text fonts, install or uninstall.\nImage generated from a frame is ready for reading.\nA frame finished rendering and was presented in a window.\nA headless surface has finished initializing in the …\nA dragging file was moved away from the window or the …\nA file was dragged over a window.\nImage loaded without errors.\nImage failed to load.\nImage metadata loaded without errors.\nProgressively decoded image has decoded more pixels.\nAn IME event was received by a window.\nA key press or release targeting a window.\nChange in system key repeat interval config.\nChange in system locale config.\nMonitors added, removed or modified.\nMouse pointer started hovering a window.\nMouse button was pressed or released when the mouse was …\nMouse pointer stopped hovering a window.\nMouse pointer moved over a window.\nMouse wheel scrolled when the mouse was over a window.\nChange in system “double-click” config.\nPixel scale factor for a monitor screen and its windows …\nTouchpad touched when the mouse was over a window.\nChange in system touch config.\nA window was touched.\nA window was moved, resized or has a state change.\nA window was destroyed.\nA window was requested to close.\nA window received or lost focus.\nA window has finished initializing in the view-process.\nA window or headless surface initialization failed in the …\nArguments for the <code>RAW_ANIMATIONS_CONFIG_CHANGED_EVENT</code>.\nArguments for the <code>RAW_AXIS_MOTION_EVENT</code>.\nArguments for the <code>RAW_CHROME_CONFIG_CHANGED_EVENT</code>.\nArguments for the <code>RAW_COLORS_CONFIG_CHANGED_EVENT</code>.\nArguments for the <code>RAW_DROPPED_FILE_EVENT</code>.\nArguments for the <code>RAW_EXTENSION_EVENT</code>.\nArguments for the <code>RAW_FONT_AA_CHANGED_EVENT</code>.\n<code>RAW_FONT_CHANGED_EVENT</code> arguments.\nArguments for the <code>RAW_FRAME_IMAGE_READY_EVENT</code>.\nArguments for the <code>RAW_FRAME_RENDERED_EVENT</code>.\nArguments for the <code>RAW_HEADLESS_OPEN_EVENT</code>.\nArguments for the <code>RAW_HOVERED_FILE_EVENT</code>.\nArguments for the <code>RAW_HOVERED_FILE_CANCELLED_EVENT</code>.\nArguments for the image events.\nArguments for the <code>RAW_IME_EVENT</code>.\nArguments for the <code>RAW_KEY_INPUT_EVENT</code>.\nArguments for the <code>RAW_KEY_REPEAT_CONFIG_CHANGED_EVENT</code>.\nArguments for the <code>RAW_LOCALE_CONFIG_CHANGED_EVENT</code>.\nArguments for the <code>RAW_MONITORS_CHANGED_EVENT</code>.\nArguments for the <code>RAW_MOUSE_ENTERED_EVENT</code> and …\nArguments for the <code>RAW_MOUSE_INPUT_EVENT</code>.\nArguments for the <code>RAW_MOUSE_MOVED_EVENT</code>.\nArguments for the <code>RAW_MOUSE_WHEEL_EVENT</code>.\nArguments for the <code>RAW_MULTI_CLICK_CONFIG_CHANGED_EVENT</code>.\nArguments for the <code>RAW_SCALE_FACTOR_CHANGED_EVENT</code>.\nArguments for the <code>RAW_TOUCH_EVENT</code>.\nArguments for the <code>RAW_TOUCH_CONFIG_CHANGED_EVENT</code>.\nArguments for the <code>RAW_TOUCHPAD_PRESSURE_EVENT</code>.\nArguments for the <code>RAW_WINDOW_CHANGED_EVENT</code>.\nArguments for the <code>RAW_WINDOW_CLOSE_EVENT</code>.\nArguments for the <code>RAW_WINDOW_CLOSE_REQUESTED_EVENT</code>.\nArguments for the <code>RAW_WINDOW_FOCUS_EVENT</code>.\nArguments for the <code>RAW_WINDOW_OPEN_EVENT</code>.\nArguments for the <code>RAW_WINDOW_OR_HEADLESS_OPEN_ERROR_EVENT</code>.\nThe new anti-aliasing config.\nArea of the frame that was captured.\nUp-to-date monitors list.\nAnalog axis.\nWhat button was pressed or released.\nIf the app or operating system caused the change.\nPositions of the mouse in between the previous event and …\nNew config.\nNew config.\nNew config.\nNew config.\nNew config.\nNew config.\nNew config.\nExtra data send by the view-process.\nExtra data send by the view-process.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nBroadcast to all widgets.\nWheel motion delta, value is in pixels if the <em>wheel</em> is a …\nKeyboard device that generated the event.\nDevice that generated this event.\nDevice that generated this event.\nDevice that generated this event.\nDevice that generated this event.\nDevice that generated this event.\nDevice that generated the event.\nDevice that generated this event.\nError message from the view-process.\nId of the sender extension.\nPath to file that was dropped.\nPath to file that was dragged over the window.\nFrame tag.\nFrame that was captured.\nThe frame pixels if it was requested when the frame …\nIf the view-process is blocking the event loop for a time …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImage that changed.\nFrame image that is ready.\nThe IME event.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSemantic key.\nPhysical key.\nThe location of the key on the keyboard.\nSemantic key modified by the current active modifiers.\nNew window monitor.\nMonitor that has changed.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nWindow that got focus.\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nEvent payload.\nTouch state if the device that generated the event is a …\nNew window position if it was moved.\nPosition of the mouse over the window, (0, 0) is the …\nPressure level between 0 and 1.\nWindow that load focus.\nNew window safe padding.\nNew pixel scale factor.\nNew window size if it was resized.\nClick level.\nIf the key was pressed or released.\nNew state if any part of it has changed.\nIf the button was pressed or released.\nLive connection to the headless surface in the …\nText typed.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nInstant the event happened.\nCoalesced touch updates.\nMotion amount.\nLive connection to the window in the view-process.\nWindow that received the event.\nWindow that received the event.\nWindow that presents the rendered frame.\nWindow that has moved, resized or has a state change.\nWindow that finished opening.\nWindow id that represents the headless surface that …\nWindow id that failed to open.\nWindow that was requested to close.\nWindow that has closed.\nWindow where it was dropped.\nWindow where it was dragged over.\nWindow where the file was previously dragged over.\nWindow the mouse was moved over.\nWindow the mouse entered or left.\nWindow that is hovered by the mouse.\nWindow that is hovered by the mouse.\nWindow that is touched.\nWindow that received the event.\nWindow that was touched.\nWindow that was captured.\nWindow in the monitor that has changed.\nExtension method to subscribe any widget to a variable.\nAll updates flagged after the closure call are retained …\nAll updates flagged during the closure call are discarded, …\nArguments for a var event handler.\nExtension methods to subscribe app handlers to a response …\nIntegrate <code>UiTask</code> with widget updates.\nExtension methods to layout var values.\nExtension methods to subscribe any widget to a variable or …\nCurrent context widget.\nDefines the backing data of <code>WIDGET</code>.\nDefines the backing data for <code>WIDGET.with_handles</code>.\nUnique ID of a widget.\nDefines how widget update requests inside …\nThe widget base, nodes and properties used in most widgets.\nBorder and line types.\nWidget border, updated every layout.\nGets the widget borders.\nWidget bounds, updated every layout.\nGets the widget bounds.\nWidget and property builder types.\nDrop all handles.\nReturns <code>true</code> if the <code>id</code> is set or flagged in the widget.\nCalls <code>named</code> in a debug build and <code>new_unique</code> in a release …\nDrops all var and event handles, clears all state.\nReference all custom tag values of type <code>T</code>.\nExpands a property assign to include a build action that …\nSets the widget state <code>id</code> without value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nCalls <code>WidgetId::named</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nRetrieve the underlying value.\nGet the widget state <code>id</code>, if it is set.\nGet the widget ID.\nGets the widget id.\nWidget info tree.\nGets the widget info.\nCalls <code>init</code> and sets <code>id</code> if it is not already set in the …\nSets the <code>id</code> to the default value if it is not already set.\nHelper types for inspecting an UI tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if called inside a widget.\nReturns <code>true</code> if reinit was requested for the widget.\nSchedule a re-layout for the current widget.\nCompute the pixel value in the current <code>LAYOUT</code> context.\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nReturns the name associated with the ID or <code>&quot;&quot;</code>.\nGet or generate an ID with associated name.\nGenerate a new ID with associated name.\nCreate a UI bound future executor.\nNew widget context.\nNew empty.\nNew from value and custom modify tags.\nGenerates a new unique ID.\nWidget nodes types, <code>UiNode</code>, <code>UiNodeList</code> and others.\nAdd a <code>handler</code> that is called every time this variable …\nAdd a preview <code>handler</code> that is called every time this …\nAdd a <code>handler</code> that is called once when the response is …\nAdd a <code>handler</code> that is called once when the response is …\nGets the parent widget or <code>None</code> if is root.\nExpands a function to a widget property.\nHold the event <code>handle</code> until the widget is deinited.\nHold the event <code>handles</code> until the widget is deinited.\nHold the var <code>handle</code> until the widget is deinited.\nHold the var <code>handles</code> until the widget is deinited.\nFlags the widget to re-init after the current update …\nSchedule a re-render for the current widget.\nSchedule a frame update for the current widget.\nRequire the widget state <code>id</code>.\nUn-scramble the underlying value to get the original …\nAssociate a <code>name</code> with the ID, if it is not named.\nSet the widget state <code>id</code> to <code>value</code>.\nClone a reference to the widget context.\nSubscribe to receive events from <code>event</code> when the event …\nSubscribe to receive updates when the <code>var</code> changes.\nSubscribe to receive info rebuild requests when the <code>var</code> …\nSubscribe to receive info rebuild requests when the <code>var</code> …\nSubscribe to receive layout requests when the <code>var</code> changes.\nSubscribe to receive layout requests when the <code>var</code> changes …\nSubscribe to receive <code>UpdateOp</code> when the <code>var</code> changes.\nSubscribe to receive <code>UpdateOp</code> when the <code>var</code> changes and …\nSubscribe to receive render requests when the <code>var</code> changes.\nSubscribe to receive render update requests when the <code>var</code> …\nSubscribe to receive render update requests when the <code>var</code> …\nSubscribe to receive render requests when the <code>var</code> changes …\nSubscribe to receive updates when the <code>var</code> changes and the …\nRegister the widget to receive an <code>UpdateOp</code> when this …\nRegister the widget to receive an <code>UpdateOp</code> when this …\nCustom tag objects that where set when the value was …\nReturns <code>true</code> if an <code>WIDGET.reinit</code> request was made.\nGets a text with a detailed widget id.\nGets a text with detailed path to the current widget.\nGet the widget ID, if called inside a widget.\nExpands an impl into a <code>UiNode</code> impl.\nSchedule an update for the current widget.\nSchedule an info rebuild for the current widget.\nSchedule an <code>UpdateOp</code> for the current widget.\nThe new value.\nExpands a struct to a widget and macro.\n Implement a property on the widget to strongly associate …\nExpands a generic struct to a widget mixin.\n Sets properties and when condition on a widget builder.\nTransform point in the window space to the widget inner …\nGets the transform from the window space to the widget …\nCalls <code>f</code> while the widget is set to <code>ctx</code>.\nCalls <code>f</code> with an override target for var and event …\nCalls <code>f</code> while no widget is available in the context.\nCalls <code>f</code> with a read lock on the current widget state map.\nCall <code>f</code> with an exclusive lock to the widget state.\nCalls <code>f</code> with a write lock on the current widget state map.\nWidget is hit by any point that intersects the transformed …\nDescendants <code>UiNode::deinit</code> can run in parallel.\nWidget is hit by any point that intersects the hit-test …\nWidget is never hit.\nDescendants <code>UiNode::event</code> can run in parallel.\nDefines the hit-test mode for a widget and descendants.\nDefines if and how a widget is hit-tested.\nDescendants <code>UiNode::info</code> can run in parallel.\nDescendants <code>UiNode::init</code> can run in parallel.\nDescendants <code>UiNode::measure</code> and <code>UiNode::layout</code> can run in …\nBase <em>widget</em> for types that build to a custom type that is …\nDefines what node list methods can run in parallel in a …\nNode list methods that are made parallel.\nDescendants <code>UiNode::render</code> and <code>UiNode::render_update</code> can …\nSame as <code>Bounds</code>, but also excludes the outside of rounded …\nDescendants <code>UiNode::update</code> can run in parallel.\nBase widget.\nTrait implemented by all <code>#[widget]</code>.\nGet a flags value with all known bits set.\nReference the parent <code>WidgetBase</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nEnd the current <code>when</code> block, all properties set after this …\nEnd the current <code>when</code> block, all properties set after this …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nc  Unique ID of the widget instance.\nc  Unique ID of the widget instance.\nThe inherit function.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if is any mode other then <code>Disabled</code>.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nBasic nodes for widgets, some used in <code>WidgetBase</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nStart building a <code>when</code> block, all properties set after this …\nStart building a <code>when</code> block, all properties set after this …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nBuild the widget.\nFinishes the build.\nReturns a mutable reference to the widget builder.\nReturns a mutable reference to the widget builder.\nReturns a mutable reference to the importance of the next …\nReturns a mutable reference to the importance of the next …\nStarts building a new <code>WidgetBase</code> instance.\nStarts building a new <code>NonWidgetBase</code> instance.\nTakes the widget builder, finishing the widget macro build.\nTakes the widget builder, finishing the widget macro build.\nGets the type of <code>WidgetBase</code>.\nGets the type of <code>NonWidgetBase</code>.\nReturns a mutable reference to the <code>when</code> block if called …\nReturns a mutable reference to the <code>when</code> block if called …\nCapture the <code>id</code> property and builds the base widget.\nInsert <code>widget_child</code> and <code>widget_inner</code> in the widget.\nCreate a widget node that wraps <code>child</code> and introduces a new …\nReturns a node that wraps <code>child</code> and potentially applies …\nReturns a node that wraps <code>child</code> and marks the …\nCoordinates nested borders and corner-radius.\nHow much a widget’s border offsets affects the widget’…\nIf the border is rendered over the child nodes.\nThe line style and color for the sides of a widget’s …\nThe line style and color for each side of a widget’s …\nThe line style for the sides of a widget’s border.\nCorner radius fit.\nCorner radius.\nRadius of each corner of a border defined from <code>Size</code> values.\nDefines how the corner radius is computed for each usage.\nDashed line.\nDisplays a series of short square-ended dashes or line …\nDotted line.\nDisplays a series of rounded dots.\nTwo solid lines in parallel.\nDisplays two straight lines that add up to the pixel size …\nFaux shadow with carved appearance.\nDisplays a border with a carved appearance.\nFully transparent line.\nFully transparent line.\nLeft-to-right line.\nDisplays a border that makes the widget appear embedded.\nOrientation of a straight line.\nRepresents a line style.\nCorner radius is computed for each usage.\nDisplays a border that makes the widget appear embossed.\nFaux shadow with extruded appearance.\nDisplays a border with an extruded appearance.\nA solid line.\nDisplays a single, straight, solid line.\nCorner radius is computed on the first usage in the …\nTop-to-bottom line.\nA wavy line, like an error underline.\nCorner radius is computed for the first usage in the …\nIf all corners are the same value.\nIf all sides are equal.\nGets the computed border rect and side offsets for the …\nGets the accumulated border offsets on the outside of the …\nGets the corner radius for the border at the current …\nColor and style of the bottom border.\nBottom-left corner.\nBottom-right corner.\nLine color.\nNew border side with <code>Dashed</code> style.\nAll sides a dashed color.\nReturns <code>hidden</code>.\nReturns <code>hidden</code>.\nIf top and bottom are equal; and left and right are equal.\nNew border side with <code>Dotted</code> style.\nAll sides a dotted color.\nNew border side with <code>Double</code> style.\nAll sides a double line solid color.\nGets the bounds and corner radius for the widget fill …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n(color, style) side.\nReturns the argument unchanged.\nSolid color.\nSolid color.\nSolid color.\nSide transparent black with the style.\nFrom layout corner-radius.\nReturns the argument unchanged.\nAll corners same.\nAll corners same relative length.\n(top-left, top-right, bottom-left, bottom-right) corners.\nAll corners same length.\nAll corners same relative length.\nAll corners same exact length.\nAll corners same exact length.\nAll sides transparent black with the style.\n(top-color, right-color, bottom-color, left-color, style) …\n(color, style) sides.\n(top, right, bottom, left) sides.\nReturns the argument unchanged.\nAll sides solid color.\n(top-bottom-color, left-right-color, style) sides.\nAll sides solid color.\nAll sides solid color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNew border side with <code>Groove</code> style.\nAll sides a grooved color.\nNew border side with <code>Hidden</code> style and transparent color.\nAll sides hidden.\nGets the accumulated border offsets including the current …\nGets the corner radius for the inside of the current …\nNew border side with <code>Inset</code> style.\nAll sides a inset color.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSide transparent black with the style.\nAll sides transparent black with the style.\nMeasure a border node, adding the <code>offsets</code> to the context …\nColor and style of the left border.\nReturns <code>self</code> for <code>step &lt; 1.fct()</code> or <code>to</code> for <code>step &gt;= 1.fct()</code>.\nMeasure a border node, adding the <code>offsets</code> to the context …\nNew border side from color and style value.\nNew every corner unique.\nNew top, right, bottom left.\nNew all corners the same.\nAll sides equal.\nNew bottom only, other sides hidden.\nNew left only, other sides hidden.\nNew right only, other sides hidden.\nNew top only, other sides hidden.\nTop-bottom and left-right equal.\nGets the corner radius for the outside of the outer border …\nNew border side with <code>Outset</code> style.\nAll sides a outset color.\nNew border side with <code>Ridge</code> style.\nAll sides a ridged color.\nColor and style of the right border.\nNew border side with <code>Solid</code> style.\nAll sides a solid color.\nLine style.\nColor and style of the top border.\nTop-left corner.\nTop-right corner.\nSets the border layout for the context of <code>f</code>.\nIndicates a boundary point where the <code>CORNER_RADIUS_VAR</code> …\nNo corner radius.\nRepresents a type erased <code>ArcWidgetHandler&lt;A&gt;</code>.\nRepresents any <code>PropertyBuildAction&lt;I&gt;</code>.\nA <code>when</code> builder for <code>AnyArcWidgetHandler</code> values.\nRepresents a <code>WidgetHandler&lt;A&gt;</code> that can be reused.\nProperty renders a border visual.\nRepresents a property removed from <code>WidgetBuilding</code>.\nRepresents a mutable reference to property in <code>WidgetBuilder</code>…\nRepresents a property in <code>WidgetBuilder</code> or <code>WidgetBuilding</code>.\nMaximum nest position, property is inside all others and …\nProperty defines contextual value or variable for the …\nProperty defines the layout and size of the child or …\nProperty defines a contextual value or variable.\nProperty defines an event handler, or state monitor, they …\nProperty defines a visual of the widget.\nImportance of values defined in the widget instantiation.\nDefault index used for intrinsic nodes, is <code>u16::MAX / 3</code>.\nAll groups, from outermost(<code>WIDGET</code>) to innermost(<code>CHILD</code>).\nValue that indicates the override importance of a property …\nMember was accessed by index.\nKind of property input.\nProperty defines the position and size of the widget …\nMember was accessed by name.\nProperty nest position group.\nRepresents the sort index of a property or intrinsic node …\nDefault index used for properties, is <code>INTRINSIC_INDEX * 2</code>.\nRepresents a property instantiation request.\nRepresents a custom build action targeting a property …\nArguments for <code>PropertyBuildAction&lt;I&gt;</code>.\nProperty build actions that must be applied to property …\nData for property build actions associated with when …\nUnique ID of a property implementation.\nProperty info.\nProperty input info.\nRepresents the strong types of each input of a property.\nArgs for <code>PropertyInfo::new</code>.\nProperty strongly enforces a widget size.\nA location in source-code.\nInput is <code>impl UiNode</code>, build value is <code>ArcNode&lt;BoxedUiNode&gt;</code>.\nError value used in a reference to an <code>UiNode</code> property …\nInput is <code>impl UiNodeList</code>, build value is …\nError value used in a reference to an <code>UiNodeList</code> property …\nInput is <code>impl IntoValue&lt;T&gt;</code>, build value is <code>T</code>.\nInput is <code>impl IntoVar&lt;T&gt;</code>, build value is <code>BoxedVar&lt;T&gt;</code>.\nMinimal nest position, property is outside even context …\nImportance of default values defined in the widget …\nMinimal widget visual position, any property or node can …\nData for a custom when build action associated with an …\nRepresents a <code>when</code> block in a widget.\nInput var read in a <code>when</code> condition expression.\nRepresents what member and how it was accessed in a …\nRepresents a <code>WhenInput</code> variable that can be rebound.\nWidget instance builder.\nDirect property access in <code>WidgetBuilder</code> and <code>WidgetBuilding</code>.\nRepresents a finalizing <code>WidgetBuilder</code>.\nInput is <code>impl WidgetHandler&lt;A&gt;</code>, build value is …\nError value used in a reference to an <code>UiNodeList</code> property …\nUnique identifier of a widget type.\nValues for each input in the same order they appear in …\nProperty args.\nProperty args.\nProperty args.\nAccess to <code>dyn Any</code> methods.\nAs any.\nProperties assigned in the <code>when</code> block, in the build widget …\nBuild the handler.\nInstantiate the widget.\nRun the build action on a input.\nData associated with the when condition in the build …\nThe property build actions can be empty or each item must …\nWhen build action data for each <code>build_actions</code>.\nProperty is “capture-only”, no standalone …\nFlags the property as captured and returns a reference to …\nFlags the property as captured and get the input node.\nFlags the property as captured and get the input list.\nFlags the property as captured and get the input list, or …\nFlags the property as captured and get the input list, or …\nFlags the property as captured and get the input node, or …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input …\nFlags the property as captured and downcast the input var.\nFlags the property as captured and downcast the input var, …\nFlags the property as captured and downcast the input var, …\nFlags the property as captured and downcast the input …\nIf the property was <em>captured</em> before removal.\nIf the property was <em>captured</em>.\nIf the property was <em>captured</em>.\nRemove all registered build actions.\nRemove the custom build handler, if any was set.\nRemove all registered property build actions.\nClone the handler reference.\nClones the arguments.\nClone the action into a new box.\n<code>std::column!</code>\nData for all inputs.\nGets the property input current value as a debug text.\nNew default property args.\nClosure that generates the default build actions, used …\nInstantiate the widget.\nDon’t insert the inspector node and inspector metadata …\nDon’t insert property/intrinsic trace nodes on build.\nDon’t insert the widget trace node on build.\nShorter <code>ty_name</code>.\nGets a strongly typed <code>widget_handler</code>.\nGets a strongly typed <code>value</code>.\nGets a strongly typed <code>var</code>.\nThe condition expression code.\nApply <code>other</code> over <code>self</code>.\n<code>std::file!</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a raw value.\nCreates an ID from a <code>sequential</code> number.\nRetrieve the underlying value.\nThe major position.\nProperty nest position group.\nIf an innermost node is defined.\nIf any property is present in the builder.\nIf any unset filter is present in the builder.\nIf any when block is present in the builder.\nUnique ID.\nUnique ID that identifies the property implementation.\nProperty importance at the time of removal.\nProperty current importance.\nProperty current importance.\nExtra sorting within items of the same group.\nThe property input value.\nGets the index that can be used to get a named property …\nProperty inputs info.\nProperties referenced in the when condition expression.\nCreate a property instance with args clone or taken.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess to <code>Box&lt;dyn Any&gt;</code> methods.\nNew position for intrinsic node.\nReturns <code>true</code> if a custom build handler is registered.\nInput kind.\n<code>std::line!</code>\nGets the property input as a debug variable.\nProperty declaration location.\nSource code location.\nWhen declaration location.\nWhat member and how it was accessed for this input.\nGroup name.\nGet the last part of the path.\nProperty name.\nInput name.\nNew from default value.\nNew empty default.\nNew build action.\nNew from <code>handler</code>.\nNew input setter and input var.\nNew from strongly typed values.\nNew property args from dynamically typed args.\nCall <code>new</code> with the same instance info and args, but with …\nNew from data, is only used if the action is provided by …\nGenerates a new unique ID.\nNew build action that just pass the input.\nThe widget public macro path.\nProperty group and index at the time of removal.\nProperty current group and index.\nProperty current group and index.\nIterate over the current properties.\niterate over mutable references to the current properties.\nProperty info.\nReference the property, if it is present.\nNew position for property.\nProperty.\n New <code>Box&lt;PropertyArgs&gt;</code> box from a property and value.\nConstructor that generates the default property instance.\n New <code>PropertyId</code> that represents the type and name.\n New <code>PropertyInfo</code> from property path.\n Gets the strong input storage types from a property path.\nModify the property, if it is present.\nPush a conditional handler.\nAdd an <code>action</code> closure that is called every time this …\nInsert intrinsic node, that is a core functionality node …\nInsert intrinsic node with custom nest position.\nInsert/override a property.\nAdd or override custom builder actions that are called to …\nInsert property with custom nest position.\nInsert a <code>name = unset!;</code> property.\nInsert a property build action filter.\nInsert a <code>when</code> block.\nRemoves the property.\nUn-scramble the underlying value to get the original …\nSet/replace the innermost node of the widget.\nSet a <code>build</code> closure to run instead of <code>default_build</code> when …\n New <code>SourceLocation</code> that represents the location you call …\nMove all <code>properties</code> to a new builder.\nOutput of the when expression.\nType as defined by kind.\nType name.\nWidget type ID.\nGets a <code>InputKind::UiNode</code>.\nGets a <code>InputKind::UiNodeList</code>.\nUnit value.\nGets a <code>InputKind::Value</code>.\nGets a <code>InputKind::Var</code>.\nInput var.\nThe <code>WhenBuildAction::data</code> for each when assign that …\nGets a <code>InputKind::WidgetHandler</code>.\nThe widget that started this builder.\nThe widget that started this builder.\n Gets the <code>WidgetType</code> info of a widget.\nNo interaction allowed, the widget must behave like a …\n<code>BLOCKED</code> with <code>DISABLED</code> visuals.\nWidget was hit on a hit-test shape rendered before the …\nThe widget is not visible and does not affect layout.\nOnly “disabled” interactions allowed and disabled …\nNormal interactions allowed.\nWidget was hit on a hit-test shape rendered after the …\nThe widget is not visible, but still affects layout.\nA hit-test hit.\nA hit-test result.\nWidget interactivity has changed after an info update.\nInfo about a segment in the first or last row of an …\nRepresents a <code>WidgetPath</code> annotated with each widget’s …\nRepresents the level of interaction allowed for a widget.\n<code>INTERACTIVITY_CHANGED_EVENT</code> args.\nArgument for a interactivity filter function.\nWidget was not hit.\nWidget was hit on a hit-test shape rendered after the …\nRepresents a builder split from the main builder that can …\nHit-test result on a widget relative to it’s descendants.\nA widget global inner transform has changed after render.\n<code>TRANSFORM_CHANGED_EVENT</code> args.\nWidget visibility has changed after render.\nWidget visibility.\n<code>VISIBILITY_CHANGED_EVENT</code> args.\nThe widget is visible.\nA window widget tree was rebuild.\nShared reference to the combined <em>border</em> and corner radius …\nShared reference to layout size, offsets, rendered …\nRepresents the descendants of a widget, allows checking if …\nReference to a widget info in a <code>WidgetInfoTree</code>.\nWidget info tree builder.\n<code>WIDGET_INFO_CHANGED_EVENT</code> args.\nTag for the <code>WidgetInfo::meta</code> state-map.\nA tree of <code>WidgetInfo</code>.\nStats over the lifetime of a widget info tree.\nInfo about the inlined rows of the widget.\nInfo about the input inline connecting rows of the widget.\nRepresents the in-progress layout pass for a widget tree.\nRepresents the in-progress measure pass for a widget tree.\nFull address of a widget.\nAccessibility metadata types.\nAccessibility metadata builder.\nAccessibility info, if the widget is accessible.\nDescendant branches that have accessibility info.\nIf this tree contains accessibility information.\nFirst ancestor that is accessible.\nGet a flags value with all known bits set.\nAll widgets including <code>root</code>.\nSets if the widget only renders if <code>outer_bounds</code> intersects …\nMake a path to an ancestor id that is contained in the …\nMake a path to an ancestor id that is contained in the …\nWidgets that contain <code>widget_id</code>, root first.\nIterator over parent -&gt; grandparent -&gt; .. -&gt; root.\nDereferences to the path.\nThe baseline offset up from the inner bounds bottom line.\nGets the baseline offset up from the inner bounds bottom …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>Collapsed</code> | <code>Hidden</code> | <code>Visible</code> short circuit from left to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the previous and new interactivity if the widget …\nIndex of first <code>BLOCKED</code>.\nClone a reference to the widget border and corner radius …\nAll the transforms introduced by this widget, starting …\nCount of moved or resized widgets in the last …\nLast window frame that moved or resized the inner bounds …\nCustom metadata associated with the tree during info build.\nDuration of the <code>UiNode::info</code> call for the window content.\nGets if the widget only renders if <code>outer_bounds</code> intersects …\nWidget inner bounds center in the window space.\nSpatial iterator over self and descendants with center …\nSpatial iterator over self and descendants with center …\nGets the previous and new inner transform of the widget.\nAll event subscribers that changed inner-transform mapped …\nAll event subscribers that changed visibility mapped to …\nAll event subscribers that changed interactivity in this …\nGets the widget’s child offset inside the inner bounds.\nIterator over the direct descendants of the widget.\nCount of <code>children</code>.\nReturn info to default state, but retain memory for reuse.\nCollapse the layout of <code>self</code> and descendants, the size and …\nCollapse layout of the child and all its descendants, the …\nCollapse layout of all descendants, the size and offsets …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIf the <code>widget_id</code> is part of the path.\nIf the tree contains the widget.\nWhether all set bits in a source flags value are also set …\nIf the widget is a descendant.\nIf the widget was hit.\nCorner radius set on the widget, this is the <em>outer</em> curve …\n<code>ENABLED</code>.\n<code>Visibility::Visible</code>\nBroadcast to all widgets.\nTarget the <code>changed</code> widgets.\nTarget the <code>changed</code> widgets.\nTarget the <code>changed</code> widgets.\nCount of ancestors.\nIterator over all widgets contained by this widget.\nTotal number of <code>descendants</code>.\nGets a value that can check if widgets are descendant of …\nThe intersection of a source flags value with the …\nSets <code>is_inline</code> to <code>false</code>.\nIndex of first <code>DISABLED</code>.\nValue that indicates the distance between this widget …\nGet a flags value with all bits unset.\nGets the <code>ENABLED</code> part of the path, or none if the widget …\nReturns the previous and new interactivity if the widget …\nPaths are equal if they share the same window and widget …\nPaths are equal if the are the same window, widgets and …\nPaths are equal if the are the same window, widgets and …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGets the baseline of the widget after <code>inner_offset</code> is …\nBuild the info tree.\nSearch the widget in the hit-test result.\nPreferred first size.\nReference to the first widget within this widget.\nInline segments in the first row.\nSegments of the first row.\nIndicates that <code>first</code> starts in the next row, not in the …\nSets the info tree build metadata <code>id</code> without value.\nSets the widget info metadata <code>id</code> without value.\nThe window frame that was hit-tested.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> -&gt; <code>ENABLED</code><code>false</code> -&gt; <code>DISABLED</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> -&gt; <code>Visible</code><code>false</code> -&gt; <code>Collapsed</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nNew interactivity path with all widgets enabled.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nNumber of times info was rebuild for the window.\nReference to the widget in the tree, if it is present.\nReference to the widget or first parent that is present.\nIf the widget has at least one child.\nIf the parent widget has multiple children.\nGets all widgets of self and descendants hit by a <code>point</code>, …\nReturns <code>true</code> if a hit-test clip that affects the <code>child</code> …\nGets the relative hit-test Z for <code>window_point</code> against the …\nAll hits, from top-most.\nWidget id.\nWidget being filtered.\nMutable reference to the current widget’s inline info.\nMutable reference to the current widget’s inline info.\nExclusive read the latest inline layout info.\nSize of the widget child area, not transformed.\nCalculate the bounding box that envelops the actual size …\nWidget inner rectangle in the window space.\nSpatial iterator over self and descendants with inner …\nIterator over self and all descendants with inner bounds …\nSpatial iterator over self and descendants with inner …\nComputes the <code>corner_radius</code> deflated by <code>offsets</code>, this is …\nSpatial iterator over self and descendants with inner …\nGets the widget’s inner bounds offset inside the outer …\nCompute the inner offset plus <code>offsets</code> left, top.\nIf the <code>baseline</code> is added from the <code>inner_offset</code>.\nGets the widget’s inner bounds size.\nCompute the inner size offset by <code>offsets</code>.\nSize of the widget inner area, not transformed.\nWidget inner size when the rows where last updated.\nGets the global transform of the widget’s inner bounds …\nCompute the inner transform offset by the <code>offsets</code>.\nWidget inner transform in the window space.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInteractivity for each widget, root first.\nFull path to this widget with <code>interactivity</code> values.\nInteractivity of the widget.\nGet or compute the interactivity of the widget.\nSearch for the interactivity value associated with the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nGets a clone of <code>self</code> that only contains the hits that also …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto internal parts.\nInvalidates the <code>negative_space</code> cache.\nWhether all known bits in this flags value are set.\nIf <code>self</code> is an ancestor of <code>maybe_descendant</code>.\nWidget was unblocked or did not exist, now is blocked.\nNo interaction allowed, may still be visually enabled.\nIf the widget and descendants was collapsed during layout.\nIs collapsed.\nIf all value are not different from initial.\nIf all value are not different from initial.\nIf <code>self</code> is inside <code>maybe_ancestor</code>.\nWidget was enabled or did not exist, now is disabled.\nOnly “disabled” interactions allowed and disabled …\nWhether all bits in this flags value are unset.\nWidget was disabled or did not exist, now is enabled.\nNormal interactions allowed.\nIs hidden.\nGets if the <code>inner_bounds</code> are fully inside the parent inner …\nReturns <code>true</code> if this widget’s inner bounds are fully …\nIf the parent widget is doing inline flow layout.\nIf the parent widget is doing inline layout and this …\nWidget is new, no previous interactivity state is known, …\nIf the widgets in this tree have been rendered at least …\nIf the widget info and all descendants did not change in …\nWidget was blocked or did not exist, now is unblocked.\nWidget was visually enabled or did not exist, now is …\nDisabled visuals, maybe also blocked.\nWidget was visually disabled or did not exist, now is …\nEnabled visuals, may still be blocked.\nIs visible.\nWidget info tree iterators.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nPreferred last size.\nReference to the last widget within this widget.\nLast window frame that rendered this tree.\nInline segments in the last row.\nSegments of the last row.\nIndicates that <code>last</code> starts in a next row, not in the same …\nLayout the child node in a context without inline …\nLayout the child node with inline enabled in the <code>child</code> …\nTotal number of widgets in the tree.\nDisable inline and measure child with no inline …\nMeasure the child node with inline enabled for the <code>child</code> …\nGets the latest inline measure info.\nGets the widget’s last measured outer bounds size.\nCustom metadata associated with the widget during info …\nSnapshot of the <code>LayoutMetrics</code> on the last layout.\nAll <code>metrics</code> fields used by the widget or descendants on …\nFind the descendant with center point nearest of <code>origin</code> …\nFind the widget, self or descendant, with center point …\nFind the widget with center point nearest to <code>origin</code> center …\nFind the widget with center point nearest to <code>origin</code> center …\nFind the widget, self or descendant, with center point …\nFind the widget with center point nearest of <code>origin</code> within …\nFind the widget with center point nearest of <code>origin</code> within …\nGets or computes the negative space of the <code>rows</code> in the …\nStarts building a info tree with the root information.\nNew custom widget path.\nNew custom path.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew args from values that convert into the argument types.\nNew default.\nNew default.\nNew from <code>info</code>.\nNew custom path with all widgets enabled.\nGets the <code>interaction_path</code> if it is different from <code>old_path</code>.\nNew interactivity of the widget.\nGets the <code>path</code> if it is different from <code>old_path</code>.\nNew with no widget layouts invalidated.\nNew info with bound sizes known.\nReference to the next widget within the same parent.\nIterator over all next widgets within the same parent.\nIterator over all next widgets within the same <code>ancestor</code>, …\nNo hits info\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nArguments for event that happened now (<code>INSTANT.now</code>).\nGets the movement between previous and new transformed …\nSum of the widths of all borders set on the widget.\nThe <code>center</code> orientation in relation to an <code>origin</code>.\nSpatial iterator over all widgets, self and descendants, …\nSpatial iterator over all widgets, self and descendants, …\nIterator over all widgets with inner-bounds not fully …\nIterator over all descendants with inner bounds not fully …\nOuter bounding box, updated after every render.\nWidget outer rectangle in the window space.\nGets the widget’s last layout outer bounds size.\nSize of the widget outer area, not transformed.\nGets the global transform of the widget’s outer bounds …\nWidget outer transform in window space.\nCollect info from <code>split</code> into <code>self</code>.\nCollect the parallel changes back.\nCollect the parallel changes back.\nCreate a new info builder that can be built in parallel …\nStart a parallel measure.\nStart a parallel layout.\nReference to the widget that contains this widget.\nOffset rendered in the widget inner set by the parent …\nThe widget parent, if it is not the root widget.\nFull path to this widget.\nGets the widget perspective and perspective origin (in the …\nGets the 3D perspective for this widget.\nThe point in the window that was hit-tested.\nPrevious interactivity of this widget.\nReference to the previous widget within the same parent.\nIterator over all previous widgets within the same parent.\nIterator over all previous widgets within the same <code>ancestor</code>…\nPrevious widget tree.\nPrevious tree with old interactivity values.\nAdd the <code>interactivity</code> bits to the current widget’s …\nRegister a closure that returns the <code>Interactivity</code> allowed …\nCalls <code>f</code> to build the context widget info.\nThe intersection of a source flags value with the …\nGets the widget’s latest render info, if it was rendered …\nEnsure that the parent <code>with_child</code> will receive a reference …\nCount of widgets that where reused from a previous tree.\nReference to the root widget in the tree.\nReference to the root widget.\nGets a path to the root widget of this path.\nGets a path to the root widget of this path.\nLast layout rows of the widget.\nScale factor of the last rendered frame.\nIterator over self -&gt; parent -&gt; grandparent -&gt; .. -&gt; root.\nIterator over the widget and the direct descendants of the …\nIterator over the widget and all widgets contained by it.\nIterator over self and all next widgets within the same …")