searchState.loadedDescShard("zng_unique_id", 0, "Macros for generating unique ID types.\nThe id is already named, id names are permanent.\nBuild <code>IdHasher</code>.\nEntry in <code>IdMap</code>.\nNo-op hasher.\nMap specialized for unique IDs that are already a …\nError when trying to associate give a name with an …\nOccupied entry in an <code>IdEntry</code>.\nSet specialized for unique IDs that are already a …\nVacant entry in an <code>IdEntry</code>.\nThe name is already used for another id, names must be …\nAn occupied entry.\nTrait implemented for all generated unique ID types.\nA vacant entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeclares a patchable static.\nStatic reference to a <code>hot_static!</code>.\nImplement <code>bytemuck</code> trait for the unique ID.\nImplement debug and display for an unique ID type that …\nImplement debug and display for an unique ID type that …\nExtend an unique ID type to have an optional attached name …\nExtend an unique ID type to have an optional attached name …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplementation of <code>lazy_static!</code> that supports hot reloading.\nInitializes a <code>lazy_static!</code> with a custom value if it is …\nNew <code>const</code> default.\nNew <code>const</code> default.\nNew unique ID.\nDeclares a static unique ID that is lazy inited.\nDeclare a new unique id type that is backed by a <code>NonZeroU32</code>…\nDeclare a new unique id type that is backed by a <code>NonZeroU64</code>…")