searchState.loadedDescShard("zng_layout", 0, "Contextual layout units.\nLayout context.\nAngle, factor, length, time, byte and resolution units.\nAny strong right-to-left (Arabic-type) character.\nAny Arabic-Indic digit.\nBidi control character.\nMost format characters, control codes, or non-characters.\nOpen or close bidi bracket.\nThe <code>LayoutMetrics::constraints</code>, …\nCommas, colons, and slashes.\nThe <code>default_value</code>.\nThe <code>LayoutMetrics::direction</code>.\nWrap direction of text in a widget context.\nEmoji chars, components and zero-width-joiner between …\nAny ASCII digit or Eastern Arabic-Indic digit.\nPlus and minus signs.\nA terminator in a numeric format context, includes …\nThe <code>LayoutMetrics::font_size</code>.\nConstraints for inline measure or layout.\nConstraints for inline layout.\nConstraints for inline measure.\nRepresents a segment in an inlined widget first or last …\nPosition of an inline segment set by the inlining parent.\nCurrent layout context.\nThe <code>LayoutMetrics::leftover</code>.\nleft-to-right.\nConstraints the layout pass.\nDefines the layout flow direction.\nMask of values that can affect the layout operation of a …\nLayout metrics in a <code>LAYOUT</code> context.\nLayout metrics snapshot.\nIdentifies the layout pass of a window.\nAny strong left-to-right character.\nVarious newline characters.\nConstraints for the measure pass.\nAny non-spacing mark.\nMost other symbols and punctuation marks.\nThe <code>LayoutMetrics::root_font_size</code>.\nRight-to-left.\nAny strong right-to-left (non-Arabic-type) character.\nThe <code>LayoutMetrics::scale_factor</code>.\nThe <code>LayoutMetrics::screen_ppi</code>.\nSpaces.\nA sequence of <code>&#39;\\t&#39;, &#39;\\v&#39;</code> or <code>&#39;\\u{1F}&#39;</code>.\nThe type of an inline/text segment.\nThe <code>LayoutMetrics::viewport</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet more info about the bracket char if <code>self</code> is <code>Bracket(_)</code> …\nIf multiple segments of this same kind can be represented …\nCapture all layout metrics used in <code>f</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCurrent size constraints.\nCurrent size constraints.\nThe <code>constraints</code>.\nCurrent length constraints for the given axis.\nWhether all set bits in a source flags value are also set …\nDefault is <code>LTR</code>.\nEmpty.\nThe intersection of a source flags value with the …\nCurrent layout direction.\nGets the inline or text flow direction.\nThe <code>direction</code>.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFirst row rect, defined by the parent.\nAvailable space on the first row.\nPosition of inline segments of the first row.\nCurrent font size.\nCurrent computed font size.\nThe <code>font_size</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCurrent inline constraints.\nCurrent inline constraints.\nThe <code>inline_constraints</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if the segment terminates the current line.\nMatches <code>LTR</code>.\nMatches <code>RTL</code>.\nReturns <code>true</code> if the segment can be considered part of …\nReturns <code>true</code> if the segment can be considered part of a …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nInfo for bidirectional reorder.\nLast row rect, defined by the parent.\nPosition of inline segments of the last row.\nGet the <code>Layout</code> data or default.\nContext leftover length for the widget, given the …\nComputed leftover length for the widget, given the …\nThe <code>leftover</code>.\nContext leftover length for the given axis.\nGets if all of the fields in <code>mask</code> are equal between <code>self</code> …\nGet the <code>Measure</code> data or default.\nGets the context metrics.\nExtra space in-between the first row and the mid-rows that …\nCurrent height of the row in the parent. If the widget …\nNew default.\nNew root <code>LayoutMetrics</code>.\nGets the next layout pass ID.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGets the current window layout pass.\nRegister that the node layout depends on these contextual …\nThe intersection of a source flags value with the …\nRoot font size.\nComputed font size at the root widget.\nThe <code>root_font_size</code>.\nCurrent scale factor.\nPixel scale factor.\nThe <code>scale_factor</code>.\nCurrent screen PPI.\nThe current screen “pixels-per-inch” resolution.\nThe <code>screen_ppi</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nClones all current metrics into a snapshot.\nGets the layout direction this segment will always be in, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCurrent viewport size.\nComputed size of the nearest viewport ancestor.\nThe <code>viewport</code>.\nCurrent viewport length for the given axis.\nCurrent largest dimension of the viewport.\nLargest dimension of the <code>viewport</code>.\nCurrent smallest dimension of the viewport.\nSmallest dimension of the <code>viewport</code>.\nWidth of the segment, in pixels.\nRuns a function <code>f</code> in a layout context that has its max …\nCalls <code>f</code> with the <code>constraints</code> in context.\nSets the <code>constraints</code> to <code>constraints</code>.\nCalls <code>f</code> with the <code>constraints</code> in context.\nCalls <code>f</code> in a new layout context.\nCalls <code>f</code> with <code>direction</code> in the context.\nSets the <code>direction</code>.\nCalls <code>f</code> with <code>font_size</code> in the context.\nSets the <code>font_size</code>.\nSet the <code>inline_constraints</code>.\nCalls <code>f</code> with <code>leftover</code> set to <code>with</code> and <code>height</code>.\nSets the <code>leftover</code>.\nCalls <code>f</code> without a layout context.\nCalls <code>f</code> with no inline constraints.\nCalls <code>f</code> in a new layout pass.\nCalls <code>f</code> with <code>scale_factor</code> in the context.\nSets the <code>scale_factor</code>.\nCalls <code>f</code> with <code>screen_ppi</code> in the context.\nSets the <code>screen_ppi</code>.\nRuns a function <code>f</code> in a context that has its max size …\nCalls <code>f</code> with <code>viewport</code> in the context.\nSets the <code>viewport</code>.\nCalls <code>f</code> with the <code>constraints</code> for perspective in context.\nSets the <code>z_constraints</code> to <code>constraints</code>.\nSeg offset to the right from the row origin, in pixels.\nCurrent perspective constraints.\nCurrent perspective constraints.\nThe <code>z_constraints</code>.\nPoint is above the origin.\nComputes the absolute layout length.\nSums the both layout length.\n<code>x</code> and <code>y</code> alignment.\nAngle in degrees.\nAngle in gradians.\nAngle in radians.\nAngle in turns (complete rotations).\nExtension methods for initializing angle units.\n<code>Self</code> equivalent in <code>Dip</code> units.\n<code>Self</code> equivalent in <code>Px</code> units.\n(f32::INFINITY, f32::NEG_INFINITY)\n(0.5, f32::NEG_INFINITY)\n(1.0, f32::NEG_INFINITY)\n(0.0, f32::NEG_INFINITY)\n(1.0, f32::NEG_INFINITY)\n(0.0, f32::NEG_INFINITY)\n(0.5, 1.0)\n(1.0, 1.0)\n(0.0, 1.0)\n(1.0, 1.0)\n(0.0, 1.0)\nPoint is below the origin.\nA 2d vector of booleans, useful for component-wise logic …\nA length in bytes.\nExtension methods for initializing <code>ByteLength</code> values.\n(0.5, 0.5)\nEllipses that define the radius of the four corners of a …\nThe default (initial) value.\nDevice independent pixel.\nThe exact length in device independent units.\nA rectangle box in device independent pixels.\nCorner-radius in device independent pixels.\nThe exact length in device independent units, defined …\nA point in device independent pixels.\nA rectangle in device independent pixels.\nSide-offsets in device independent pixels.\nA size in device pixels.\nConversion from <code>Dip</code> to <code>Px</code> units.\nA vector in device independent pixels.\nComparable key that represents the absolute distance …\nDivide the layout length by the factor.\n(1.0, 0.5)\nMinimal difference between values in around the 0.0..=1.0 …\nMinimal difference between values in around the …\nRelative to the font-size of the widget.\nExpression.\n(f32::INFINITY, f32::INFINITY)\n(f32::INFINITY, 1.0)\n(1.0, f32::INFINITY)\n(0.0, f32::INFINITY)\n(1.0, f32::INFINITY)\n(0.0, f32::INFINITY)\n(f32::INFINITY, 0.0)\n(f32::INFINITY, 0.5)\n(0.5, f32::INFINITY)\nNormalized multiplication factor.\nRelative to the fill length.\nScale factor applied to <em><strong>x</strong></em> and <em><strong>y</strong></em> dimensions.\nMultiplication factor in percentage (0%-100%).\nScale factor applied to margins.\nExtension methods for initializing factor units.\nSpacing in-between grid cells in <code>Length</code> units.\n(0.0, 0.5)\nRepresents a one-dimensional length value that can be …\nRepresents a two-dimensional value that can be converted …\nRepresents a layout dimension.\nPoint is to the left of the origin.\nRelative to the leftover fill length.\n1D length units.\nRepresents an unresolved <code>Length</code> expression.\nExtension methods for initializing <code>Length</code> units.\nLinear interpolate between lengths by factor.\n2D line in <code>Length</code> units.\nBuild a <code>Line</code> using the syntax <code>(x1, y1).to(x2, y2)</code>.\nMaximum representable byte length.\nMaximum distance.\n<code>i32::MAX</code>.\nMaximum DIP value.\nMinimum distance.\n<code>i32::MIN</code>.\nMinimum DIP value.\nMaximum layout length.\nMinimum layout length.\nMultiplies the layout length by the factor.\nValue that is always greater than any distance key.\nValue that is always smaller than any distance key.\nNegate the layout length.\nSimple offset.\nOrientation of two 2D items.\n2D point in <code>Length</code> units.\nPixels-per-inch resolution.\nPixels-per-meter resolution.\nThe exact length in font points.\nDevice pixel.\nThe exact length in device pixel units.\nPixel type.\nA rectangle box in device pixels.\nPixel length constraints.\nPixel <em>size</em> constraints.\nCorner-radius in device pixels.\nThe exact length in device pixel units, defined using a <code>f32</code>…\nComputed <code>GridSpacing</code>.\nComputed <code>Line</code>.\nA point in device pixels.\nA rectangle in device pixels.\nSide-offsets in device pixels.\nA size in device pixels.\nConversion from <code>Px</code> to <code>Dip</code> units.\nA transform in device pixels.\nA vector in device pixels.\n(1.0, 0.5)\n2D rect in <code>Length</code> units.\nBuild a <code>Rect</code> using the syntax <code>(width, height).at(x, y)</code>.\nExtension methods for initializing resolution units.\nRGB + alpha.\nColor functions argument conversion helper.\nPoint is to the right of the origin.\nRelative to the font-size of the root widget.\n(0.0, 0.5)\n2D size offsets in <code>Length</code> units.\nA group of 2D side offsets, which correspond to …\n2D size in <code>Length</code> units.\nSubtracts the first layout length from the second.\n(0.5, 0.0)\n(1.0, 0.0)\n(0.0, 0.0)\n(1.0, 0.0)\n(0.0, 0.0)\nExtension methods for initializing <code>Duration</code> values.\nA transform builder type.\nFull transform.\n2D vector in <code>Length</code> units.\nRelative to the height of the nearest viewport ancestor.\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the width of the nearest viewport ancestor.\nHorizontal.\nVertical.\nDepth.\n<code>f32</code> equality used in floating-point units.\n<code>f32</code> hash compatible with <code>about_eq</code> equality.\n<code>f32</code> ordering compatible with <code>about_eq</code> equality.\nComputes the absolute value of self.\nComputes the saturating absolute value of <code>self</code>.\nComputes the saturating absolute value of <code>self</code>.\nComputes the absolute value of x and y.\nReturns a length that computes the absolute layout length …\nReturns a vector that computes the absolute layout vector …\nCompute a <code>LayoutMask</code> that flags all contextual values that …\nCompute a <code>LayoutMask</code> that flags all contextual values that …\nIf all sides are equal.\nAlpha channel value, in the <code>[0.0..=1.0]</code> range.\nReturns <code>[x, y]</code>.\nReturns <code>[width, height]</code>.\nReturns <code>[x, y]</code>.\nCast to <code>Point</code>.\nCast to <code>Size</code>.\nReturns <code>(x, y)</code>.\nReturns <code>(width, height)</code>.\nReturns <code>(x, y)</code>.\nCast to <code>Vector</code>.\nReturns a vector of x: width and y: height.\nNew <code>Rect</code> from <code>self</code> as the size placed at the <code>x, y</code> origin.\nBlue channel value, in the <code>[0.0..=1.0]</code> range.\nPoint at the bottom-middle of the available space.\nBottom offset.\nBottom offset.\nBottom offset.\nFactor of bottom offset.\nSpacing bellow, in length units.\nPoint at the bottom-left of the available space.\nBottom-left corner radius.\nBottom-left corner radius.\nBottom-left corner radius.\nPoint at the bottom-right of the available space.\nBottom-right corner radius.\nBottom-right corner radius.\nBottom-right corner radius.\nBounding box that fits the line points, in layout units.\nCheck if <code>b</code> is orientation from <code>origin</code>.\nBytes.\nLength in bytes.\nPoint at the center.\nAdds the two lengths, returns <code>None</code> if the sum overflows.\nDivides the two lengths, returns <code>None</code> if the subtraction …\nMultiplies the two lengths, returns <code>None</code> if the sum …\nSubtracts the two lengths, returns <code>None</code> if the subtraction …\nConstraints that must be used to layout a child node with …\nCompute the offset for a given child size, parent size and …\nReturns <code>self</code> if <code>min &lt;= self &lt;= max</code>, returns <code>min</code> if …\nClamp the <code>px</code> by min and max.\nReturns a length that constraints the computed layout …\nClamp factor to <code>[0.0..=1.0]</code> range.\nClamp factor to [0.0..=100.0] range.\nClamp the <code>size</code> by min and max.\nSpacing in-between columns, in length units.\nSpacing in-between columns, in layout pixels.\nIdentity.\n<code>Align::START</code>.\n<code>Length::Default</code>\n96ppi.\n96ppi.\nCalculate the corner radius of an inner border inside <code>self</code> …\nDegrees\nIf top and bottom are equal; and left and right are equal.\nExact size in device independent pixels.\nCompletes the distance calculation.\nSame as <code>ppi</code>.\nSame as <code>ppi</code>.\nFactor of the font-size of the widget.\nPercentage of the font-size of the widget.\nEnd point in length units.\nEnd point in layout units.\nGets the fixed length if the constraints only allow one …\nNormalized factor.\nConvert to <code>Factor</code>.\nFactor of the fill length.\nGets the fill length, if fill is <code>true</code> this is the maximum …\nLength that fills the available space.\nRect that fills the available space.\nSize that fills the available space.\nFill preference, when this is <code>true</code> and the constraints …\nGets the maximum if fill is preferred and max is bounded, …\nGets the max size if is fill and has max bounds, or gets …\nGets the max size if is fill and has max bounds, or gets …\nGets the maximum fill size that preserves the <code>size</code> ratio.\nGets the fill size, if fill is <code>true</code> this is the maximum …\nGets the maximum if fill is preferred and max is bounded, …\nReturns a boolean vector of the fill values.\nGets the fixed size if the constraints only allow one …\nFlip factor, around <code>0.5</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNew exact.\nNew exact.\nNew range, the minimum and maximum is computed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNew top, right, bottom, left.\nAll sides equal.\nNew dimension, top-bottom, left-right.\nAll sides equal.\nColumn and row equal relative length.\nSame spacing for both columns and rows.\nColumn and row equal exact length.\nColumn and row in device pixel length.\nColumn and row equal exact length.\nColumn and row equal relative length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConversion to <code>Length::Dip</code>\nReturns the argument unchanged.\nConversion to <code>Length::Factor</code>\nConversion to <code>Length::Px</code>\nConversion to <code>Length::DipF32</code>\nConversion to <code>Length::Factor</code>\nConversion to <code>Length::Dip</code>\nReturns the argument unchanged.\nFrom exact lengths.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSplat exact length.\nTo relative length x and y.\nSplat.\nReturns the argument unchanged.\nSplat relative length.\nSplat relative length.\nSplat exact length.\nNew in exact length.\nNew from origin and size.\nNew in exact length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n(top-bottom, left-right)\nAll sides equal relative length.\nAll sides equal exact length.\nReturns the argument unchanged.\nFrom exact lengths.\n(top, right, bottom, left)\nAll sides equal.\nAll sides equal relative length.\nAll sides equal exact length.\nSplat relative length.\nReturns the argument unchanged.\nSplat exact length.\nSplat exact length.\nTo relative width and height.\nSplat relative length.\nSplat.\nReturns the argument unchanged.\nConversion to <code>Length::Px</code> then to vector.\nUse the length for x and y.\nConversion to <code>Length::Dip</code> then to vector.\nConversion to <code>Length::Factor</code> then to vector.\nConversion to <code>Length::Factor</code> then to vector.\nConversion to <code>Length::Dip</code> then to vector.\nConversion to <code>Length::Dip</code> then to vector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom bytes.\nSee <code>DipToPx</code>.\nNew distance key from already computed actual distance.\nFrom gibi-bytes.\nFrom giga-bytes.\nFrom kibi-bytes.\nFrom kilo-bytes.\nFrom mebi-bytes.\nFrom mega-bytes.\nReturns the named alignment.\nNew distance key computed from two points.\nSee <code>PxToDip</code>.\nNew rectangle at <code>Point::zero</code>. The size is in any <code>Length</code> …\nFrom tebi-bytes.\nFrom tera-bytes.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nGibi-bytes.\nLength in gibi-bytes.\nGiga-bytes.\nLength in giga-bytes.\nGradians\nGreen channel value, in the <code>[0.0..=1.0]</code> range.\nLength that fills 50% of the available space.\nSum total memory used in nested <code>Length::Expr</code> heap memory.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\n<em>height</em> in length units.\nLeft + right.\nHours.\nIdentity transform.\nNo scaling.\nNo transform.\nCalculate the corner radius of an outer border around <code>self</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a translate transform from <code>self</code>.\nNew exact.\nNew in exact length.\nNew in exact length.\nFrom exact lengths.\nColumn and row equal relative length.\nSplat relative length.\nAll sides equal relative length.\nConversion to <code>Length::Factor</code> then to vector.\nSplat relative length.\nAll sides equal.\nConversion to <code>Length::Factor</code>\nConversion to <code>Length::Factor</code> then to vector.\nSplat relative length.\nAll sides equal.\nSplat relative length.\nAll sides equal relative length.\nConversion to <code>Length::Factor</code>\nColumn and row equal relative length.\nConversion to <code>Length::Px</code> then to vector.\nNew exact.\nConversion to <code>Length::Px</code>\nConversion to <code>Length::Dip</code> then to vector.\nConversion to <code>Length::Dip</code>\nTo relative length x and y.\nTo relative width and height.\nColumn and row in device pixel length.\nSplat.\nSplat.\nUse the length for x and y.\nAll sides equal.\nSame spacing for both columns and rows.\nFrom exact lengths.\nReturns the inverse transform if possible.\nReturns <code>true</code> if this transform can be represented with a …\nReturns <code>true</code> if <code>y</code> is a special value that indicates the …\nGets if the constraints have an upper bound.\nGets if the constraints have an upper bound.\nIf is <code>Length::Default</code>.\nReturns <code>true</code> if all values are <code>Length::Default</code>.\nReturns <code>true</code> if all values are <code>Length::Default</code>.\nReturns <code>true</code> if all values are <code>Length::Default</code>.\nReturns <code>true</code> if all values are <code>Length::Default</code>.\nGets if the constraints only allow one length.\nGets if the constraints only allow one length.\nGets if the context prefers the maximum length and there …\nGets if the context prefers the maximum length over the …\nGets if the context prefers the maximum length over the …\nGets if the context prefers the maximum length over the …\nReturns <code>true</code> if <code>x</code> is a special value that indicates the …\nReturns <code>true</code> if <code>y</code> is a special value that indicates the …\nReturns <code>true</code> it is the identity transform.\nReturns whether it is possible to compute the inverse …\nIf the key is the <code>NONE_MAX</code> or <code>NONE_MIN</code>.\nGets if the constraints have no upper bound.\nGets if the constraints have no upper bound.\nIf the scale is the same for both <em><strong>x</strong></em> and <em><strong>y</strong></em>.\nReturns <code>true</code> if all side offsets are zero.\nIf this length is zero in any finite layout context.\nKibi-bytes.\nLength in kibi-bytes.\nKilo-bytes.\nLength in kilo-bytes.\nCompute the pixel value in the current <code>LAYOUT</code> context.\nCompute the pixel value in the current <code>LAYOUT</code> context.\nApplies the alignment transform to <code>wl</code> and returns the size …\nCompute a <code>PxTransform</code> in the current <code>LAYOUT</code> context.\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context.\nCompute the pixel value in the current <code>LAYOUT</code> context with …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>x</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>y</strong></em> …\nCompute the pixel value in the current <code>LAYOUT</code> context <em><strong>z</strong></em> …\nPoint at the middle-left of the available space.\nLeft offset.\nLeft offset.\nLeft offset.\nFactor of left offset.\nSpacing to the left ,in length units.\nLine length in rounded pixels.\nLinear interpolation.\nLinear interpolation.\nLinear interpolation.\nLinear interpolation.\nFactor of the leftover layout space.\nCompares and returns the maximum of two lengths.\nReturns the maximum of two factors.\nCompares and returns the maximum of two pixel values.\nCompares and returns the maximum of two pixel values.\nGets the maximum allowed length, or <code>None</code> if is unbounded.\nReturns a length that resolves to the maximum layout …\nMax x and y, this is the sum of <code>origin</code> and <code>size</code>.\nReturns the maximum of the two resolutions.\nReturns the maximum of the two resolutions.\nGets the maximum length if it is bounded, or the minimum …\nGets the maximum size if bounded, or the minimum if not.\nGets the maximum length if bounded or <code>length</code> clamped by …\nGets the maximum allowed size, or <code>None</code> if is unbounded in …\nGets the maximum size if bounded, or the <code>size</code> clamped by …\nMax x, this is the <code>origin.x + width</code>.\nMax y, this is the <code>origin.y + height</code>.\nComputes the size returned by <code>layout</code> for the given child …\nComputes the width returned by layout for the given child …\nComputes the height returned by layout for the given child …\nMebi-bytes.\nLength in mebi-bytes.\nMega-bytes.\nLength in mega-bytes.\nGets the total memory allocated by this length.\nGets the total memory allocated by this length expression.\nCompares and returns the minimum of two lengths.\nReturns the minimum of two factors.\nCompares and returns the minimum of two pixel values.\nCompares and returns the minimum of two pixel values.\nGets the minimum allowed length. The minimum is inclusive.\nReturns a length that resolves to the minimum layout …\nMin x and y, this is the <code>origin</code>.\nReturns the minimum of the two resolutions.\nReturns the minimum of the two resolutions.\nGets the minimum allowed size. The minimum is inclusive.\nMin x, this is the <code>origin.x</code>.\nMin y, this is the <code>origin.y</code>.\nMinutes.\nRadians in <code>[0.0 ..= TAU]</code>.\nGradians in <code>[0.0 ..= 400.0]</code>.\nDegrees in <code>[0.0 ..= 360.0]</code>.\nTurns in <code>[0.0 ..= 1.0]</code>.\nMilliseconds.\nReturns the alignment <code>const</code> name if <code>self</code> is equal to one …\nReturns <code>true</code> if this transform is affected by the layout …\nNew from RGB of a the same type and A that can be of a …\nNew with distinct values.\nNew from round integer value.\nConstructor taking a scalar for each side.\nNew scale with different scales for each dimension.\nFactors applied to each offset.\nNew column, row from any <code>Length</code> unit..\nNew grid spacing\nNew line defined by two points of any type that converts …\nNew layout line defined by two layout points.\nNew x, y from any <code>Length</code> unit.\nNew rectangle defined by an origin point (top-left) and a …\nNew top, right, bottom left offsets. From any <code>Length</code> type.\nNew width, height from any <code>Length</code> unit.\nNew x, y from any <code>Length</code> unit.\nNew all corners same radius.\nUniform scale applied to all offsets.\nSame spacing for both columns and rows.\nAll sides equal. From any <code>Length</code> type.\nConstructor setting the same value to all sides, taking a …\nNew bounded between zero and <code>max</code> with no fill.\nNew bounded between zero and <code>max_y</code>, <code>max_y</code> with no fill.\nNew bounded between zero and <code>max</code> with no fill.\nNew bounded to only allow the <code>length</code> and fill.\nNew bounded to only allow the <em>size</em> and fill.\nNew bounded to only allow the <code>size</code> and fill.\nnew from floating point.\nNew bounded to fill the <code>length</code>.\nNew bounded to fill the maximum <code>x</code> and <code>y</code>.\nNew bounded to fill the maximum <code>size</code>.\nCreate a 3d perspective transform.\nNew bounded to a inclusive range.\nNew bounded to a inclusive range.\nCreate a 2d rotation transform.\nCreate a 3d rotation transform.\nCreate a 3d rotation transform around the <em><strong>x</strong></em> axis.\nCreate a 3d rotation transform around the <em><strong>y</strong></em> axis.\nSame as <code>new_rotate</code>.\nCreate a 2d scale transform.\nCreate a 2d scale transform on the X dimension.\nCreate a 2d scale transform.\nCreate a 2d scale transform on the Y dimension.\nCreate a 2d skew transform.\nCreate a 2d skew transform in the X dimension.\nCreate a 2d skew transform in the Y dimension.\nCreate a 2d translation transform.\nCreate a 3d translation transform.\nCreate a 2d translation transform in the X dimension.\nCreate a 2d translation transform in the Y dimension.\nCreate a 3d translation transform in the z dimension.\nNew unbounded constrain.\nNew unbounded constrain.\nSame scale applied to parallel offsets.\nTop-bottom and left-right equal. From any <code>Length</code> type.\nReturns a line that starts from the left-top most point …\nUniform 100%.\n<code>(1, 1)</code>.\n<code>(1.px(), 1.px())</code>.\nTop-left origin of the rectangle in length units.\nReturns a 2D box that encompasses the result of …\nReturns a 2D box that encompasses the result of …\nPercent factor.\nFactor as percentage.\nPercentage of the fill length.\nNew 3D perspective distance.\nChange <code>self</code> 3d perspective distance.\nCheck if <code>point</code> is orientation from <code>origin</code>.\nPixels-per-inch.\nPixels-per-meter.\nReturns a transform with a translation applied before self…\nProject the 2D point onto the transform Z-plane.\nProject the 2D point onto the transform Z-plane.\nExact size in font units.\nConvert a <code>pt</code> unit value to <code>Px</code> given a <code>scale_factor</code>.\nSame operation as <code>pt_to_px</code> but without rounding to nearest …\nExact size in device pixels.\nConvert a <code>Px</code> unit value to a <code>Pt</code> value given a <code>scale_factor</code>.\nRadians\nRed channel value, in the <code>[0.0..=1.0]</code> range.\nFactor of the font-size of the root widget.\nPercentage of the font-size of the root widget.\nReplaces <code>self</code> with <code>overwrite</code> if <code>self</code> is <code>Default</code>.\nReplaces <code>Length::Default</code> values with <code>overwrite</code> values.\nReplaces <code>Length::Default</code> values with <code>overwrite</code> values.\nReplaces <code>Length::Default</code> values with <code>overwrite</code> values.\nReplaces <code>Length::Default</code> values with <code>overwrite</code> values.\nPoint at the middle-right of the available space.\nRight offset.\nRight offset.\nRight offset.\nFactor of right offset.\nSpacing to the right, in length units.\nChange <code>self</code> to apply a 2d rotation after its …\nChange <code>self</code> to apply a 3d rotation.\nChange <code>self</code> to apply a 3d rotation around the <em><strong>x</strong></em> axis.\nChange <code>self</code> to apply a 3d rotation around the <em><strong>y</strong></em> axis.\nSame as <code>rotate</code>.\nNew 2D rotation.\nNew 3D rotation.\nConvert <code>PxF32</code> to <code>Px</code> and <code>DipF32</code> to <code>Dip</code>.\nSpacing in-between rows, in length units.\nSpacing in-between rows, in layout pixels.\nAdds the two lengths without overflowing or wrapping.\nMultiplies the two lengths without overflowing or wrapping.\nSubtracts the two lengths without overflowing or wrapping.\nNew 2D scale.\nChange <code>self</code> to apply a uniform 2d scale after its …\nNew 3D scale.\nChange <code>self</code> to apply a <em><strong>x</strong></em> scale after its transformation.\nChange <code>self</code> to apply a 2d scale after its transformation.\nChange <code>self</code> to apply a <em><strong>y</strong></em> scale after its transformation.\nIterator that yields quadrants for efficient search in a …\nSeconds.\nSet the <code>alpha</code> component from any type that converts to …\nSet the <code>blue</code> component from any type that converts to …\nSet the <code>green</code> component from any type that converts to …\nSet the <code>red</code> component from any type that converts to …\nSize of the rectangle in length units.\nNew 2D skew.\nChange <code>self</code> to apply a 2d skew after its transformation.\nChange <code>self</code> to apply a <em><strong>x</strong></em> skew after its transformation.\nChange <code>self</code> to apply a <em><strong>y</strong></em> skew after its transformation.\nSpherical linear interpolation.\nSpherical linear interpolation.\nSpherical linear interpolation.\nSpherical linear interpolation.\nNew x, y from single value of any <code>Length</code> unit.\nNew width, height from single value of any <code>Length</code> unit.\nNew x, y from single value of any <code>Length</code> unit.\nStart point in length units.\nStart point in layout units.\nTebi-bytes.\nLength in tebi-bytes.\nTera-bytes.\nLength in tera-bytes.\nReturns the multiplication of the two matrices such that …\nChange <code>self</code> to apply <code>other</code> after its transformation.\nReturns a transform with a translation applied after self…\nNew <code>Line</code> from <code>self</code> as a start point to <code>x2, y2</code> end point.\nLine that traces the length from top to bottom.\nLine that traces the length from top-right to bottom-left.\nLine that traces the length from top-left to bottom-right.\nConvert a copy to [R, G, B, A] bytes.\nDivide the <code>Px</code> self by the scale.\nReturns <code>self</code> as <code>f32</code>.\nReturns <code>self</code> as <code>i32</code>.\nLine that traces the length from right to left.\nConvert to <code>Length::Expr</code>, logs warning for memory use above …\nMultiply the <code>Dip</code> self by the scale.\nLine that traces the length from left to right.\nLine that fills the available length from bottom to top.\nLine that traces the length from bottom-right to top-left.\nLine that traces the length from bottom-left to top-right.\nTo full transform.\nConvert to vector.\nPoint at the top-middle of the available space.\nTop offset.\nTop offset.\nTop offset.\nFactor of top offset.\nSpacing above, in length units.\nPoint at the top-left of the available space.\nTop-left corner radius.\nTop-left corner radius.\nTop-left corner radius.\nPoint at the top-right of the available space.\nTop-right corner radius.\nTop-right corner radius.\nTop-right corner radius.\nTransform the pixel point.\nTransform the pixel point.\nTransform the pixel vector.\nTransform the pixel vector.\nReturns a rectangle of same size that adds the vector to …\nChange <code>self</code> to apply a 2d translation after its …\nChange <code>self</code> to apply a 3d translation after its …\nChange <code>self</code> to apply a <em><strong>x</strong></em> translation after its …\nChange <code>self</code> to apply a <em><strong>y</strong></em> translation after its …\nChange <code>self</code> to apply a <em><strong>z</strong></em> translation after its …\nNew simple 2D translation.\nNew 3D translation.\nReturns a copy of the color with the alpha set to <code>0</code>.\nCompute a <code>PxTransform</code> if it is not affected by the layout …\nTurns\nUniform scale applied to both <em><strong>x</strong></em> and <em><strong>y</strong></em>.\nTop + bottom.\nFactor of the height of the nearest viewport ancestor.\nPercentage of the height of the nearest viewport ancestor.\nFactor of the largest of the nearest viewport’s …\nPercentage of the largest of the nearest viewport’s …\nFactor of the smallest of the nearest viewport’s …\nPercentage of the smallest of the nearest viewport’s …\nFactor of the width of the nearest viewport ancestor.\nPercentage of the width of the nearest viewport ancestor.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\n<em>width</em> in length units.\nReturns a copy of the color with a new <code>alpha</code> value.\nReturns a copy of the color with a new <code>blue</code> value.\nReturns a copy <code>with_new_exact</code> if the new length clamped by …\nReturns a copy with min and max bounds set to <code>x</code> and <code>y</code> …\nReturns a copy with min and max bounds set to <code>size</code> clamped …\nReturns a copy of the current constraints with the <strong>x</strong> …\nReturns a copy of the current constraints with the <strong>y</strong> …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the current constraints that sets the …\nReturns a copy of the color with a new <code>green</code> value.\nReturns a copy of the current constraints with <code>sub</code> …\nReturns a copy of the current constraints with <code>sub_x</code> and …\nReturns a copy of the current constraints with <code>sub</code> …\nReturns a copy of the current constraints with <code>sub_x</code> …\nReturns a copy of the current constraints with <code>sub_y</code> …\nReturns a copy <code>with_new_max</code> if <code>max</code> is less then the …\nReturns a copy of the current constraints that has <code>max_x</code> …\nReturns a copy of the current constraints that has <code>max</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>max_y</code> …\nReturns a copy <code>with_new_min</code> if <code>min</code> is greater then the …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>min</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>min_y</code> …\nReturns a copy of the current constraints with <code>add</code> added …\nReturns a copy of the current constraints with <code>add_x</code> and …\nReturns a copy of the current constraints with <code>add</code> added …\nReturns a copy of the current constraints that has max and …\nReturns a copy with min and max bounds set to <code>x</code> and <code>y</code>.\nReturns a copy with min and max bounds set to <code>size</code>.\nReturns a copy of the current constraints with the <strong>x</strong> …\nReturns a copy of the current constraints with the <strong>y</strong> …\nReturns a copy of the current constraints that has <code>max</code> as …\nReturns a copy of the current constraints that has <code>max_x</code> …\nReturns a copy of the current constraints that has <code>max</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>max_y</code> …\nReturns a copy of the current constraints that has <code>min</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>min</code> as …\nReturns a copy of the current constraints that has <code>min_x</code> …\nReturns a copy of the current constraints that has <code>min_y</code> …\nReturns a copy of the color with a new <code>red</code> value.\nReturns a copy of the current constraints without upper …\nReturns a copy of the current constraints without upper …\nReturns a copy of the current constraints without a upper …\nReturns a copy of the current constraints without a upper …\nReturns a copy of the current constraints with <code>x</code> modified …\nReturns a copy of the current constraints with <code>y</code> modified …\nAdds the two lengths wrapping overflows.\nDivides the two lengths wrapping overflows.\nMultiplies the two lengths wrapping overflows.\nSubtracts the two lengths wrapping overflows.\nGets the best finite <code>x</code> align value.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\n<em>x</em> alignment in a <code>[0.0..=1.0]</code> range.\nConstraints of lengths in the <em>x</em> or <em>width</em> dimension.\nScale factor applied in the <em><strong>x</strong></em> dimension.\n<em>x</em> offset in length units.\n<em>x</em> displacement in length units.\nIf <code>x</code> is flipped (around <code>0.5</code>) in right-to-left contexts.\nGets the best finite <code>x</code> and <code>y</code> align values.\nGets the best finite <code>y</code> align value.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\n<em>y</em> alignment in a <code>[0.0..=1.0]</code> range.\nConstraints of lengths in the <em>y</em> or <em>height</em> dimension.\nScale factor applied in the <em><strong>y</strong></em> dimension.\n<em>y</em> offset in length units.\n<em>y</em> displacement in length units.\nSwap x and y.\nSwap <code>x</code> and <code>y</code>.\nSwap <code>x</code> and <code>y</code>.\nAll zeros.\nConstructor, setting all sides to zero.\nUniform 0%.\nZero spacing.\nLength of exact zero.\nLine from zero to zero.\nLine from (0, 0) to (0, 0).\n<em><strong>x:</strong></em> <code>Length::zero</code>, <em><strong>y:</strong></em> <code>Length::zero</code>.\nNew rectangle at <code>Point::zero</code> and <code>Size::zero</code>.\nAll sides zero.\n<em><strong>width:</strong></em> <code>Length::zero</code>, <em><strong>height:</strong></em> <code>Length::zero</code>\n<em><strong>x:</strong></em> <code>Length::zero</code>, <em><strong>y:</strong></em> <code>Length::zero</code>.\nAn angle in radians\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d axis aligned rectangle represented by its minimum and …\nAn axis aligned 3D box represented by its minimum and …\nHomogeneous vector in 3D space.\nA one-dimensional distance, with value represented by <code>T</code> …\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nA 2d Rectangle optionally tagged with a unit.\nA rigid transformation. All lengths are preserved under …\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nA scaling factor between two different units of …\nA group of 2D side offsets, which correspond to …\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nA 2d transform represented by a column-major 3 by 3 …\nA 3d transform stored as a column-major 4 by 4 matrix.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nTrait for basic trigonometry functions, so they can be …\nThe default unit.\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nComputes the absolute value of each component.\nComputes the absolute value of each component.\nComputes the vector with absolute values of each component.\nComputes the vector with absolute values of each component.\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns new vector with by-component AND operation applied.\nReturns new vector with by-component AND operation applied.\nAngle in radians\nReturns the signed angle between this vector and the x …\nReturns the signed angle between this vector and another …\nReturns the positive angle between this vector and another …\nReturns the shortest signed angle between two angles.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nUtilities for testing approximate ordering - especially …\nReturns result of multiplication of both components\nCreates a rotation around a given axis.\nCreates a rotation around the x axis.\nCreates a rotation around the y axis.\nCreates a rotation around the z axis.\nShorthand for …\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit\nCast the unit.\nCast the unit.\nCast the unit\nCast the unit\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nRounds each component to the smallest integer equal or …\nSee Point2D::ceil()\nRounds each component to the smallest integer equal or …\nSee Point3D::ceil()\nRounds each component to the smallest integer equal or …\nSee <code>Size2D::ceil()</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Size3D::ceil()</code>.\nSee <code>Vector2D::ceil()</code>\nRounds each component to the smallest integer equal or …\nSee <code>Vector3D::ceil()</code>\nRounds each component to the smallest integer equal or …\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the vector each component of which is clamped by …\nReturns the vector each component of which is clamped by …\nReturns the point each component of which clamped by …\nReturn this vector with minimum and maximum lengths …\nReturn this vector with minimum and maximum lengths …\nReturns the component-wise division of the two vectors.\nReturns the component-wise division of the two vectors.\nReturns the component-wise multiplication of the two …\nReturns the component-wise multiplication of the two …\nReturns <code>true</code> if this box2d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns true if this rectangle contains the point. Points …\nReturns <code>true</code> if this box contains the interior of the …\nReturns <code>true</code> if this box3d contains the interior of the …\nReturns <code>true</code> if this box contains the point <code>p</code>. A point is …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns true if this rectangle contains the interior of …\nReturns the norm of the cross product [self.x, self.y, 0] …\nCross product.\nDecompose this into a translation and an rotation to be …\nA set of aliases for all types, tagged with the default …\nReturns the identity transform.\nReturns the identity transform.\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nDeserializes 2d size from tuple of width and height.\nComputes and returns the determinant of this transform.\nCompute the determinant of the transform.\nCalculates Euclidean division, the matching method for …\nCalculates Euclidean division, the matching method for …\nDot product.\nDot product.\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nCreates a rotation from Euler angles.\nCreate a 3d point from this one, using the specified z …\nCreate a 3d vector from this one, using the specified z …\nRounds each component to the biggest integer equal or …\nSee Point2D::floor()\nRounds each component to the biggest integer equal or …\nSee Point3D::floor()\nRounds each component to the biggest integer equal or …\nSee <code>Size2D::floor()</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Size3D::floor()</code>.\nSee <code>Vector2D::floor()</code>\nRounds each component to the biggest integer equal or …\nRounds each component to the biggest integer equal or …\nSee <code>Vector3D::floor()</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructor taking angle and length\nCreate a transform providing its components via an array …\nCreate a transform providing its components via an array …\nEquivalent to <code>from_array</code> with elements packed two at a time\nEquivalent to <code>from_array</code> with elements packed four at a …\nConstructor setting the same value to all sides, taking a …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking scalar strongly typed lengths.\nConstructor taking scalar strongly typed lengths.\nConstructor taking properly  Lengths instead of scalar …\nConstructor taking properly  Lengths instead of scalar …\nConstructor taking a typed Length for each side.\nConstructor.\nConstructor.\nReturns the smallest box containing all of the provided …\nReturns the smallest box containing all of the provided …\nReturns the smallest rectangle defined by the …\nConvenience function to create a scale transform from a …\nCreates a Box2D of the given size, at offset zero.\nCreates a Box3D of the given size, at offset zero.\nCreates a rect of the given size, at offset zero.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unit-less value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nUnpack the underlying value from the wrapper.\nReturns the underlying scalar scale factor.\nReturns self.angle as a strongly typed <code>Angle&lt;T&gt;</code>.\nReturns vector with results of “greater then” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nCreates no-op translation (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nConstruct an identity transform\nCreates the identity rotation.\nCreates the identity rotation.\nCreates an identity scale (1.0).\nCreate an identity matrix:\nCreates an identity matrix:\nCreates no-op translation (both <code>x</code> and <code>y</code> is <code>zero()</code>).\nInflates the box by the specified sizes on each side …\nInflates the box by the specified sizes on each side …\nCalculate the size and position of an inner box.\nCalculate the size and position of an inner rectangle.\nComputes the intersection of two boxes, returning <code>None</code> if …\nComputes the intersection of two boxes without check …\nReturns <code>true</code> if the two boxes intersect.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inverse transformation.\nInverts the transformation\nReturns the inverse of this rotation.\nReturns the inverse of this rotation.\nThe inverse Scale (1.0 / self).\nReturns the inverse transform if possible.\nReturns the inverse transform if possible.\nReturn the inverse transformation.\nReturns <code>true</code> if this transform can be represented with a …\nCheck whether shapes on the XY plane with Z pointing …\nReturns <code>true</code> if any component of size is zero, negative, …\nReturns <code>true</code> if any component of size is zero, negative or …\nReturns true if the size is zero, negative or NaN.\nReturns true if the size is zero, negative or NaN.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if the angle is a finite number.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nCheck if translation does nothing (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nReturns <code>true</code> if this scale has no effect.\nCheck if translation does nothing (both x and y is <code>zero()</code>).\nReturns whether it is possible to compute the inverse …\nReturns whether it is possible to compute the inverse …\nReturns true if the box has a negative area.\nReturns true if the box has a negative volume.\nReturns <code>true</code> if norm of this quaternion is (approximately) …\nReturns <code>true</code> if both components is positive and <code>false</code> any …\nReturns <code>true</code> if all components is positive and <code>false</code> any …\nReturns <code>true</code> if all side offsets are zero.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nReturns the vector length.\nReturns the vector length.\nLinearly interpolate between this length and another …\nLinearly interpolate between this point and another point.\nLinearly interpolate between this point and another point.\nLinearly interpolate each component between this size and …\nLinearly interpolate between this size and another size.\nLinearly interpolate each component between this vector …\nLinearly interpolate each component between this vector …\nLinear interpolation between two angles, using the …\nLinearly interpolate between this box and another box.\nLinearly interpolate between this box3d and another box3d.\nLinearly interpolate between this rectangle and another …\nBasic Linear interpolation between this rotation and …\nReturns vector with results of “lower then” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this vector.\nApply the function <code>f</code> to each component of this vector.\nReturns maximum between this length and another length.\nReturns the size each component of which are maximum of …\nReturns the size each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns minimum between this length and another length.\nReturns the size each component of which are minimum of …\nReturns the size each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nMultiplies all of the transform’s component by a scalar …\nConstructor taking scalar values directly.\nAssociate a value with a unit of measure.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nConstructor taking scalar values.\nConstructor taking scalar values.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nConstructor.\nConstructor.\nConstructor.\nConstruct a new rigid transformation, where the <code>rotation</code> …\nCreates a rotation from an angle in radians.\nConstructor taking a scalar for each side.\nCreate a transform specifying its components in using the …\nCreate a transform specifying all of it’s component as a …\nCreate a transform representing a 2d transformation from …\nConstructor setting the same value to all sides, taking a …\nConstruct a new rigid transformation, where the <code>translation</code>…\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nComputes the norm of this quaternion.\nReturns the vector with length of one unit.\nReturns the vector with length of one unit\nReturns a unit quaternion from this one.\nReturns new vector with results of negation operation on …\nReturns new vector with results of negation operation on …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nA one-dimensional length, tagged with its units.\nConstructor, setting all components to one.\nConstructor, setting all components to one.\nReturns new vector with by-component OR operation applied.\nReturns new vector with by-component OR operation applied.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nCreate an orthogonal projection transform.\nCalculate the b and position of an outer box.\nCalculate the size and position of an outer rectangle.\nReturns a box that encompasses the result of transforming …\nReturns a 2d box that encompasses the result of …\nReturns a 3d box that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nCreate a simple perspective transform, projecting to the …\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nReturns this angle in the [0..2*PI[ range.\nApplies a rotation before self’s transformation and …\nReturns a transform with a rotation applied before self’…\nApplies a scale before self’s transformation and returns …\nReturns a transform with a scale applied before self’s …\nApplies a translation before self’s transformation and …\nReturns a transform with a translation applied before self…\nReturns this vector projected onto another one.\nReturns this vector projected onto another one.\nReturns a projection of this transform in 2d space.\nCreates a rotation around from a quaternion representation.\nThe real part.\nCreates a rotation from an angle in radians.\nShorthand for …\nReturns a reflection vector using an incident ray and a …\nReturns a reflection vector using an incident ray and a …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nReturn the normalized vector even if the length is larger …\nReturn the normalized vector even if the length is larger …\nReturns a rotation transform.\nCreate a 3d rotation transform from an angle / axis. The …\nRounds each component to the nearest integer value.\nSee Point2D::round()\nSee Point3D::round()\nRounds each component to the nearest integer value.\nSee <code>Size2D::round()</code>.\nRounds each component to the nearest integer value.\nSee <code>Size3D::round()</code>.\nRounds each component to the nearest integer value.\nRounds each component to the nearest integer value.\nSee <code>Vector2D::round()</code>\nRounds each component to the nearest integer value.\nSee <code>Vector3D::round()</code>\nReturn a box with edges rounded to integer coordinates, …\nReturn a box3d with edges rounded to integer coordinates, …\nReturn a rectangle with edges rounded to integer …\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nCreate a 2d scale transform:\nCreate a 3d scale transform:\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns vector, each component of which or from <code>a</code>, or from …\nReturns vector, each component of which or from <code>a</code>, or from …\nSerializes 2d size to tuple of width and height.\nChange the size of the box by adjusting the max endpoint …\nReturns this angle in the ]-PI..PI] range.\nReturns (sin(self), cos(self)).\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nCreate a 2d skew transform.\nSpherical linear interpolation between this rotation and …\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nReturns the vector’s length squared.\nReturns the vector’s length squared.\nComputes the squared norm of this quaternion.\nReturns the multiplication of the two transforms such that …\nReturns a rotation representing the other rotation …\nReturns a rotation representing this rotation followed by …\nReturns the multiplication of the two matrices such that …\nReturns the multiplication of the two matrices such that …\nApplies a rotation after self’s transformation and …\nReturns a transform with a rotation applied after self’s …\nApplies a scale after self’s transformation and returns …\nReturns a transform with a scale applied after self’s …\nApplies a translation after self’s transformation and …\nReturns a transform with a translation applied after self…\nConvert into a 2d point.\nConvert into a 2d vector.\nCreate a 2D transform picking the relevant terms from this …\nConvert into a 3d point with z-coordinate equals to zero.\nConvert into a 3d vector with <code>z</code> coordinate equals to …\nCreates a 3d rotation (around the z axis) from this 2d …\nCreate a 3D transform from the current transform\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturn this size as an array of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into an array with x, y and z.\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturns an array containing this transform’s terms.\nReturns an array containing this transform’s terms.\nCast into an array with x and y.\nCast into an array with x, y, z and 0.\nReturns an array containing this transform’s terms …\nReturns an array containing this transform’s terms …\nEquivalent to <code>to_array</code> with elements packed two at a time …\nEquivalent to <code>to_array</code> with elements packed four at a time …\nEquivalent to <code>to_array_transposed</code> with elements packed …\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast angle to <code>f32</code>.\nCast into an <code>f32</code> box.\nCast into an <code>f32</code> box3d.\nCast into an <code>f32</code> rectangle.\nCast into an <code>f32</code> vector.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast angle <code>f64</code>.\nCast into an <code>f64</code> box.\nCast into an <code>f64</code> box3d.\nCast into an <code>f64</code> rectangle.\nCast into an <code>f64</code> vector.\nCast into an i32 point, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an <code>i32</code> vector, truncating decimals if any.\nCast into an <code>i32</code> box, truncating decimals if any.\nCast into an <code>i32</code> box3d, truncating decimals if any.\nCast into an <code>i32</code> rectangle, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i64 point, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an <code>i64</code> vector, truncating decimals if any.\nCast into an <code>i64</code> box, truncating decimals if any.\nCast into an <code>i64</code> box3d, truncating decimals if any.\nCast into an <code>i64</code> rectangle, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast this vector into a point.\nCast this vector into a point.\nConvert into Cartesian 2D point.\nConvert into Cartesian 3D point.\nCast this vector into a size.\nReturns the matrix representation of this translation.\nCreates translation by this vector in vector units.\nCreates translation by this vector in vector units\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this translation.\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nReturn this size as a tuple of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into a tuple with x, y and z.\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x and y.\nCast into a tuple with x, y, z and 0.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> box, truncating decimals if any.\nCast into an <code>u32</code> box3d, truncating decimals if any.\nCast into an <code>u32</code> rectangle, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u64</code> size, truncating decimals if any.\nCast into an <code>u64</code> rectangle, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> box, truncating decimals if any.\nCast into an <code>usize</code> box3d, truncating decimals if any.\nCast into an <code>usize</code> rectangle, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast this point into a vector.\nCast this point into a vector.\nReturn this size as a vector with width and height.\nReturn this size as a vector with width, height and depth.\nCast into a 3D vector.\nCast into a 2D vector.\nTranslate a 2D box and cast its unit.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 3D box and cast its unit.\nReturns the given box transformed by this scale.\nReturns the given 2d point transformed by this rotation.\nReturns the given point transformed by this scale.\nReturns the given point transformed by this transform.\nTranslate a point and cast its unit.\nTranslate a point and cast its unit.\nReturns the given 2d point transformed by this rotation …\nReturns the given 2d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nTranslate a point and cast its unit.\nReturns the given 3d point transformed by this rotation.\nReturns the given point transformed by this scale.\nReturns the given 3d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nTranslate a rectangle and cast its unit.\nReturns the given rect transformed by this scale.\nTranslate a rectangle and cast its unit.\nNo-op, just cast the unit.\nReturns the given size transformed by this scale.\nNo-op, just cast the unit.\nReturns the given 2d vector transformed by this rotation.\nReturns the given vector transformed by this scale.\nReturns the given vector transformed by this matrix.\nReturns the given 2d vector transformed by this rotation …\nReturns the given 2d vector transformed by this matrix.\nReturns the given 3d vector transformed by this rotation.\nReturns the given 3d vector transformed by this matrix.\nReturns the same box, translated by a vector.\nReturns the same box3d, translated by a vector.\nReturns the same rectangle, translated by a vector.\nCreate a 2d translation transform:\nCreate a 3d translation transform:\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another.\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns the vector with length of one unit.\nReturns the vector with length of one unit.\nComputes the union of two boxes.\nComputes the union of two boxes.\nCreates a rotation around from a quaternion representation …\nConvenience constructor.\nConvenience constructor.\nReturns the vector part (i, j, k) of this quaternion.\nReturns result of multiplication of all components\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nReturns the same transform with a different destination …\nReturns the same transform with a different destination …\nReturn this vector scaled to fit the provided length.\nReturn this vector capped to a maximum length.\nReturn this vector capped to a maximum length.\nReturn this vector with a minimum length applied.\nReturn this vector with a minimum length applied.\nReturns the same transform with a different source unit.\nReturns the same transform with a different source unit.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nReturns a 2d point using this point’s x and y coordinates\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s x and z …\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nSwap x and y.\nSwap x and y.\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s y and z …\nThe <code>z</code> (traditionally, depth) coordinate.\nThe same as <code>origin()</code>.\nThe same as <code>origin()</code>.\nThe same as <code>Zero::zero()</code> but available without importing …\nThe same as <code>Zero::zero()</code> but available without importing …\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> is this object is approximately equal to the …\nReturns <code>true</code> is this object is approximately equal to the …\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.")