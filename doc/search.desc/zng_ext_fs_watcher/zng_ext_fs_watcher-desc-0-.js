searchState.loadedDescShard("zng_ext_fs_watcher", 0, "File system events and service.\nEvent sent by the <code>WATCHER</code> service on directories or files …\nRepresents a single file system change, annotated.\nRepresents a <code>FsChange</code> note.\nHandle that holds a <code>WATCHER.annotate</code> note.\n<code>FS_CHANGES_EVENT</code> arguments.\nApplication extension that provides file system change …\nError reading the file.\nError parsing the file.\nFile system watcher service.\nRepresents an open read-only file provided by <code>WATCHER.read</code>.\nError for <code>WatchFile::parse</code>.\nRepresents an active file or directory watcher in <code>WATCHER</code>.\nRepresents a status type for <code>WATCHER</code> read-only operations.\nRepresents a status type for <code>WATCHER.sync_status</code>.\nAnnotation for file watcher events and var update tags.\nRepresents an open write file provided by <code>WATCHER.sync</code>.\nPush a <code>note</code> that will be cloned on all subsequent change …\nAccess any.\nDeref.\nCancel write, the file will not be updated.\nAll notify changes since the last event.\nIterate over all changes that affects paths selected by …\nIterate over all changes that affects paths that are equal …\nCommit write, flush and replace the actual file with the …\nGets a read-write variable that defines interval awaited …\nNone, only app level handlers receive this event.\nHandle to no watcher.\nIterate over all file watcher errors.\nThe actual notify event or error.\nIterate over all change events.\nIterate over all change events that affects that are equal …\nIterate over all change events that affects paths that are …\nForce drops the watcher, meaning it will be dropped even …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFile system change event types.\nNew idle value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the watcher is dropped.\nIf the change affects any path matched by the glob pattern.\nIf the change affects the <code>path</code>.\nIf <code>perm</code> was called in another clone of this handle.\nDeserialize the file contents as JSON.\nNew args from values that convert into the argument types.\nIterate over all notes of the type <code>T</code>.\nAll <code>WATCHER.annotate</code> that where set when this event …\nArguments for event that happened now (<code>INSTANT.now</code>).\nWatch <code>dir</code> and calls <code>handler</code> every time something inside it …\nWatch <code>file</code> and calls <code>handler</code> every time it changes.\nOpen or create the file.\nOpen read the file.\nRead file and parse it.\nDrop the handle without dropping the watcher, the watcher …\nGets a read-write variable that defines the fallback poll …\nRead a file into a variable, the <code>init</code> value will start the …\nRead a directory into a variable, the <code>init</code> value will …\nSame operation as <code>read_dir</code> but also tracks the operation …\nNew read error value.\nSame operation as <code>read</code> but also tracks the operation …\nNew reading value.\nReturns <code>true</code> is some events where lost.\nDeserialize the file content as RON.\nMaximum time the service keeps the process alive to …\nRead the file contents as a string.\nBind a file with a variable, the <code>file</code> will be <code>read</code> when it …\nGets a read-write variable that defines interval awaited …\nSame operation as <code>sync</code> but also tracks the operation …\nRead the file contents as a text string.\nInstant the event happened.\nDeserialize the file contents as TOML.\nEnable file change events for the <code>file</code>.\nEnable file change events for files inside <code>dir</code>, also …\nNew write error value.\nSerialize and write.\nSerialize and write.\nWrite the text string.\nSerialize and write.\nSerialize and write.\nNew writing value.\nDeserialize the file content as YAML.\nAn event describing non-mutating access operations on …\nAn event describing non-mutating access operations on …\nAn event describing open or close operations on files.\nAn event emitted when the access time of the file or …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all case, to be used when the specific kind of …\nThe catch-all event kind, for unsupported/unknown events.\nA single event emitted with both the <code>From</code> and <code>To</code> paths.\nAn event emitted when the file, or a handle to the file, …\nAn event emitted when the content of the data is changed.\nAn event describing creation operations on files.\nAn event describing creation operations on files.\nAn event emitted when the data content of a file is …\nAn event emitted when the data content of a file is …\nNotify error type.\nError kinds\nNotify event.\nTop-level event kind.\nAn event emitted when the file is executed, or the folder …\nAn event emitted when an extended attribute of the file or …\nAn event which results in the creation of a file.\nAn event emitted when a file is removed.\nAn event which results in the creation of a folder.\nAn event emitted when a folder is removed.\nAn event emitted on the file or folder that was renamed.\nGeneric error\nAn invalid value was passed as runtime configuration.\nI/O errors.\nCan’t watch (more) files, limit on the total number of …\nAn event emitted when the metadata of a file or folder is …\nAn event emitted when the metadata of a file or folder is …\nAn event describing mutation of content, name, or metadata.\nAn event describing mutation of content, name, or metadata.\nAn event emitted when the name of a file or folder is …\nAn event emitted when the file, or a handle to the file, …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event which specific kind is known but cannot be …\nAn event not fitting in any of the above four categories.\nAn event emitted when the ownership of the file or folder …\nA path does not exist.\nAn event emitted when the permissions of the file or …\nAn event emitted when the file is opened for reading.\nAn event emitted when the file is read.\nAn event describing removal operations on files.\nAn event describing removal operations on files.\nAn event emitted when the name of a file or folder is …\nAn event emitted when the size of the data is changed.\nAn event emitted on the file or folder resulting from a …\nAttempted to remove a watch that does not exist.\nAn event emitted when the file is opened for writing.\nAn event emitted when the write or modify time of the file …\nAdds a path to the event.\nAdds a path to the error.\nAdds a path to the event if the argument is Some.\nAdditional attributes of the event.\nRetrieves the Notify flag for an event directly, if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new generic Error from a message.\nRetrieves the additional info for an event directly, if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new “invalid config” error from the given …\nCreates a new i/o Error from a stdlib <code>io::Error</code>.\nIndicates whether an event is an Access variant.\nIndicates whether an event is a Create variant.\nIndicates whether an event is a Modify variant.\nIndicates whether an event is an Other variant.\nIndicates whether an event is a Remove variant.\nKind or type of the event.\nKind of the error.\nReturns whether some events may have been missed. If true, …\nCreates a new <code>Event</code> given a kind.\nCreates a new Error with empty paths given its kind.\nCreates a new “path not found” error.\nPaths the event is about, if known.\nRelevant paths to the error, if any.\nSets the Notify flag onto the event.\nSets additional info onto the event.\nSets the kind.\nReplaces the paths for the error.\nSets the process id onto the event.\nSets the tracker.\nRetrieves the source for an event directly, if present.\nRetrieves the tracker ID for an event directly, if present.\nCreates a new “watch not found” error.")