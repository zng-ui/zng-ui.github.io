searchState.loadedDescShard("zng_ext_font", 0, "Font loading, text segmenting and shaping.\nAllow line breaks in between any character including …\nAny strong right-to-left (Arabic-type) character.\nAny Arabic-Indic digit.\nThe same rule used by other languages.\nHyphens are inserted like <code>Manual</code> and also using language …\nSelects the justification mode based on the language.\nLine as both left-to-right and right-to-left segments.\nBlack weight (900), the thickest value.\nBold weight (700).\nBidi control character.\nEmbedding Level\nMost format characters, control codes, or non-characters.\nOpen or close bidi bracket.\nLine breaks can be inserted between any letter.\nCondensed width (75%).\nDefines an insert offset in a shaped text.\nRepresents all layer glyphs selected by the font to …\nCOLR table.\nRepresents a color palette entry.\nRepresents a color palette v1 flag.\nCPAL table.\nColored glyph.\nCommas, colons, and slashes.\nCustom transform function.\nCustom font builder.\nCustom fonts change caused by call to <code>FONTS.register</code> or …\nSelect first font palette tagged …\nThe default (initial) value.\nThe default (initial) value.\nThe default (initial) value.\nThe default (initial) value.\nThe default (initial) value.\nThe default (initial) value.\nThe default (initial) value.\nThe default (initial) value.\nThe default (initial) value.\nThe exact length in device independent units.\nThe exact length in device independent units.\nThe exact length in device independent units.\nThe exact length in device independent units.\nThe exact length in device independent units.\nThe exact length in device independent units.\nThe exact length in device independent units.\nThe exact length in device independent units.\nThe exact length in device independent units.\nThe exact length in device independent units, defined …\nThe exact length in device independent units, defined …\nThe exact length in device independent units, defined …\nThe exact length in device independent units, defined …\nThe exact length in device independent units, defined …\nThe exact length in device independent units, defined …\nThe exact length in device independent units, defined …\nThe exact length in device independent units, defined …\nThe exact length in device independent units, defined …\nExpanded width (125%).\nExtra-bold weight (800).\nExtra-condensed width (62.5%).\nExtra-expanded width (150%).\nExtra light weight (200).\nRelative to the font-size of the widget.\nRelative to the font-size of the widget.\nRelative to the font-size of the widget.\nRelative to the font-size of the widget.\nRelative to the font-size of the widget.\nRelative to the font-size of the widget.\nRelative to the font-size of the widget.\nRelative to the font-size of the widget.\nRelative to the font-size of the widget.\nEmoji chars, components and zero-width-joiner between …\nAny ASCII digit or Eastern Arabic-Indic digit.\nPlus and minus signs.\nA terminator in a numeric format context, includes …\nExpression.\nExpression.\nExpression.\nExpression.\nExpression.\nExpression.\nExpression.\nExpression.\nExpression.\nFont loading, custom fonts and app font configuration.\nChange in <code>FONTS</code> that may cause a font query to now give a …\nRelative to the fill length.\nRelative to the fill length.\nRelative to the fill length.\nRelative to the fill length.\nRelative to the fill length.\nRelative to the fill length.\nRelative to the fill length.\nRelative to the fill length.\nRelative to the fill length.\nA new fallback font was set for the language.\nA sized font face.\nPossible changes in a <code>FontChangedArgs</code>.\n<code>FONT_CHANGED_EVENT</code> arguments.\nColor palette selector for colored fonts.\nReference to in memory font data.\nA font face selected from a font family.\nA list of <code>FontFace</code> resolved from a <code>FontName</code> list, plus the …\nVarious metrics that apply to the entire <code>FontFace</code>.\nA list of <code>Font</code> created from a <code>FontFaceList</code>.\nReasons why a loader might fail to load a font.\nApplication extension that manages text fonts.\nVarious metrics about a <code>Font</code>.\nFont family name.\nA list of font names in priority order.\nText font size.\nThe width of a font as an approximate fraction of the …\nThe italic or oblique form of a font.\nThe degree of stroke thickness of a font. This value …\nOne of the <code>GenericFonts</code> was set for the language.\nGeneric fonts configuration for the app.\nReasons why a font might fail to load a glyph.\nHyphenation service.\nRepresents a hyphenation data source that searches a …\nRepresents embedded hyphenation data.\nRepresents a hyphenation dictionary source.\nHyphenation mode.\nSelect one of the font provided palette by index.\nThe text is justified by adding space between letters.\nThe text is justified by adding space between words.\nA disk or similar I/O error occurred while attempting to …\nA form that is generally cursive in nature.\nText alignment justification mode.\nLine breaks are not inserted between any letter.\nLight weight (300).\nLine has left-to-right segments.\nIdentifies what direction segments a <code>ShapedLine</code> has.\nAny strong left-to-right character.\nRelative to the leftover fill length.\nRelative to the leftover fill length.\nRelative to the leftover fill length.\nRelative to the leftover fill length.\nRelative to the leftover fill length.\nRelative to the leftover fill length.\nRelative to the leftover fill length.\nRelative to the leftover fill length.\nRelative to the leftover fill length.\nExtra spacing added in between text letters.\nSelect first font palette tagged …\nConfiguration of text wrapping for Chinese, Japanese, or …\nVarious newline characters.\nText line height.\nExtra spacing in-between text lines.\nThe least restrictive rule, good for short lines.\nto lowercase.\nMedium weight (500, higher than normal).\nWord breaks only happen in specially marked break …\nReplace white spaces with a single <code>U+0020 SPACE</code> and trim …\nReplace white spaces and line breaks with <code>U+0020 SPACE</code> and …\nNormal width (100%).\nNormal (400).\nAttempted to load a font from the filesystem, but there is …\nAttempted to load an invalid index in a TrueType or …\nThe font didn’t contain a glyph with that ID.\nAny non-spacing mark.\nHyphens are never inserted in word breaks.\nNo transform.\nSequence of not colored glyphs, use the base color to fill.\nThe regular form.\nThe most common rule.\nLine breaks can be inserted in between letters of …\nA skewed version of the regular form.\nMost other symbols and punctuation marks.\nReceives Bézier path rendering commands from <code>Font::outline</code>…\nExtra spacing in-between paragraphs.\nAttempted to load a malformed or corrupted font.\nA platform function returned an error.\nText is not changed, all white spaces and line breaks are …\nThe exact length in font points.\nThe exact length in font points.\nThe exact length in font points.\nThe exact length in font points.\nThe exact length in font points.\nThe exact length in font points.\nThe exact length in font points.\nThe exact length in font points.\nThe exact length in font points.\nThe exact length in device pixel units.\nThe exact length in device pixel units.\nThe exact length in device pixel units.\nThe exact length in device pixel units.\nThe exact length in device pixel units.\nThe exact length in device pixel units.\nThe exact length in device pixel units.\nThe exact length in device pixel units.\nThe exact length in device pixel units.\nThe exact length in device pixel units, defined using a <code>f32</code>…\nThe exact length in device pixel units, defined using a <code>f32</code>…\nThe exact length in device pixel units, defined using a <code>f32</code>…\nThe exact length in device pixel units, defined using a <code>f32</code>…\nThe exact length in device pixel units, defined using a <code>f32</code>…\nThe exact length in device pixel units, defined using a <code>f32</code>…\nThe exact length in device pixel units, defined using a <code>f32</code>…\nThe exact length in device pixel units, defined using a <code>f32</code>…\nThe exact length in device pixel units, defined using a <code>f32</code>…\nLine has right-to-left segments.\nCustom request caused by call to <code>FONTS.refresh</code>.\nAny strong right-to-left (non-Arabic-type) character.\nRelative to the font-size of the root widget.\nRelative to the font-size of the root widget.\nRelative to the font-size of the root widget.\nRelative to the font-size of the root widget.\nRelative to the font-size of the root widget.\nRelative to the font-size of the root widget.\nRelative to the font-size of the root widget.\nRelative to the font-size of the root widget.\nRelative to the font-size of the root widget.\nSemi-bold weight (600).\nSemi-condensed width (87.5%).\nSemi-expanded width (112.5%).\nA string segmented in sequences of words, spaces, tabs and …\nSegmented text iterator.\nRepresents normal and colored glyphs in …\nRepresents a line selection of a <code>ShapedText</code>.\nRepresents a word or space selection of a <code>ShapedText</code>.\nOutput of text layout.\nSpaces.\nThe most stringent rule.\nOS fonts change.\nThin weight (100), the thinnest value.\nA sequence of <code>&#39;\\t&#39;, &#39;\\v&#39;</code> or <code>&#39;\\u{1F}&#39;</code>.\nLength of a <code>TAB</code> space.\nHeight of the text overline or strikethrough decoration.\nInfo about a shaped text overflow in constraint.\nRepresents a single text segment in a <code>SegmentedText</code>.\nThe type of an inline/text segment.\nExtra configuration for <code>shape_text</code>.\nText transform function.\nUltra-condensed width (50%), the narrowest possible.\nUltra-expanded width (200%), the widest possible.\nPalette is appropriate to use when displaying the font on …\nPalette is appropriate to use when displaying the font on …\nHeight of the text underline decoration.\nThe data was of a format the loader didn’t recognize.\nTo UPPERCASE.\nRelative to the height of the nearest viewport ancestor.\nRelative to the height of the nearest viewport ancestor.\nRelative to the height of the nearest viewport ancestor.\nRelative to the height of the nearest viewport ancestor.\nRelative to the height of the nearest viewport ancestor.\nRelative to the height of the nearest viewport ancestor.\nRelative to the height of the nearest viewport ancestor.\nRelative to the height of the nearest viewport ancestor.\nRelative to the height of the nearest viewport ancestor.\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the smallest of the nearest viewport ancestor…\nRelative to the width of the nearest viewport ancestor.\nRelative to the width of the nearest viewport ancestor.\nRelative to the width of the nearest viewport ancestor.\nRelative to the width of the nearest viewport ancestor.\nRelative to the width of the nearest viewport ancestor.\nRelative to the width of the nearest viewport ancestor.\nRelative to the width of the nearest viewport ancestor.\nRelative to the width of the nearest viewport ancestor.\nRelative to the width of the nearest viewport ancestor.\nText white space transform.\nConfigure line breaks inside words during text wrap.\nExtra spacing added to the Unicode <code>U+0020 SPACE</code> character.\nFirst position.\nReturns the line or first next line that is not …\nReturns the line or first previous line that is not …\nGets the text range of the actual line, excluding the line …\nGets the text range of the actual line, joining shaped …\nSegment exact <em>width</em> in pixels.\nLast applied alignment.\nLast applied alignment area.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe maximum amount the font rises above the baseline, in …\nThe maximum amount the font rises above the baseline, in …\nFind the range that must be removed to backspace before …\nFind the range that must be removed to backspace words …\nContextual direction.\nVertical offset from the line bottom up that is the text …\nThe font face that best matches the requested properties.\nThe font that best matches the requested properties.\nGenerate a character type based on a level (as specified …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSize of the text, if it is not inlined.\nFind a single font face with bold weight, normal style and …\nA rectangle that surrounds all bounding boxes of all …\nA rectangle that surrounds all bounding boxes of all …\nGet more info about the bracket char if <code>self</code> is <code>Bracket(_)</code> …\nReference the font file bytes.\nIf multiple segments of this same kind can be represented …\nCheck if any line can be better wrapped given the new wrap …\nThe approximate amount that uppercase letters rise above …\nThe approximate amount that uppercase letters rise above …\nGets the top-middle origin for a caret visual that marks …\nThe change that happened.\nRestore text to initial shape.\nClip under/overline to a text <code>clip_range</code> area, if <code>clip_out</code> …\nCloses the path, returning to the first point in it.\nGlyphs per cluster in the segment, paired with the …\nMap glyph -&gt; char.\nCOLR table.\nCPAL table.\nGlyphs by font and palette color.\nGlyphs in a range by font and palette color.\nPalette colors.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nDraws a cubic Bézier curve to a point.\nGets the fallback <em>cursive</em> font for the given language.\nNew “cursive” font name.\nNew <code>Custom</code>.\nGets all registered font families.\nEmpty.\n<code>LineBreak::Auto</code>\n<code>Hyphens::Auto</code>\n<code>WordBreak::Normal</code>\n<code>Justify::Auto</code>\n<code>WhiteSpace::Preserve</code>.\nFind the range that must be removed to delete starting by …\nFind the range that must be removed to delete words …\nBroadcast to all widgets.\nThe maximum amount the font descends below the baseline, …\nThe maximum amount the font descends below the baseline, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDirection of the glyphs in the segment.\nLast applied alignment direction.\nLayout direction of glyphs in the segment.\nText flow direction.\nLayout directions of segments in this line.\nDon’t use font letter spacing.\nFont full name.\nNo palettes.\nGet a flags value with all bits unset.\nNo color glyphs.\nCreate an empty <code>ShapedText</code> with the same metrics as <code>self</code>.\nGet a flags value with all bits unset.\nEmpty list.\nNew empty font face.\nNew list with only the <code>FontFace::empty</code>.\nExclusive end index on the source text.\nReturns <code>true</code> if this line was ended by the wrap algorithm.\nBoth are equal if each point to the same fonts in the same …\nBoth are equal if each point to the same fonts in the same …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>f32</code> comparison, panics for <code>NaN</code>.\nReference the font face source of this font.\nGets the font synthesis to use to better render the given …\nGets the font synthesis to use to better render the given …\nGets the ultimate fallback font used when none of the …\nFont family name.\nGets the fallback <em>fantasy</em> font for the given language.\nNew “fantasy” font name.\nFind a single font face that best matches the query.\nIf the first line starts in a new inline row because it …\nPalette v1 flags.\nFont features and variation types.\nFinalized font features.\nInitialize a <code>FontVariations</code> map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate level by number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nA custom font loaded from a shared byte slice.\nA custom font loaded from a file.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nA custom font that maps to another font.\nNew segmented text from parts.\nConverts a byte slice to a slice of Levels\nNew font name from <code>&amp;&#39;static str</code>.\nCopy bytes from embedded font.\nActual name of generic fonts.\nReturns the text segment if <code>index</code> is in bounds.\nReturns a clone of the text segment if <code>index</code> is in bounds.\nIterate over color glyphs that replace the <code>base_glyph</code> to …\nGets the specific glyph and font.\nGlyphs by font.\nGlyphs in the line.\nGlyphs in the word or space.\nGlyphs in a range by font.\nGlyphs in the line paired with the <em>x-advance</em>.\nGlyphs in the segment, paired with the <em>x-advance</em>.\nRay cast an horizontal line across the glyph and returns …\nLoads the harfbuzz face.\nGets the sized harfbuzz font.\nIf the shaped text has any Emoji glyph associated with a …\nIf the segment contains the last glyph of the line.\nIf this font provides custom positioned carets for some or …\nIf the font provides glyph substitutions.\nHeight of the line.\nRectangles of the text selected by <code>range</code>.\nCharacter rendered when text is hyphenated by break.\nTry to hyphenate the <code>word</code> using the <code>lang</code> dictionary and …\nTry to hyphenate the <code>word</code> using the <code>lang</code> dictionary and …\nHyphenate with language already resolved.\nHyphen breaks config.\nDon’t use font ligatures.\nGlyphs not overflown in the last not overflown line.\nGets the line index.\nGets the segment index in the line.\nIndex of the font face in the font file.\nChar byte offset in the full text.\nSet the hyphenation dictionaries source and clear cache.\nInline constraints for initial text shaping and wrap.\nSegment info for widget inline segments.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to the level number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructs <code>self</code> into the text and segments.\nUnwraps into a <code>Txt</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nGets if the text contains segments not in the base …\nIf this font face is cached. All font faces are cached by …\nIf the font does not have any color palette.\nWhether all bits in this flags value are unset.\nIf the font does not have any colored glyphs.\nReturns <code>true</code> if text and segments are empty.\nNo segments.\nWhether all bits in this flags value are unset.\nIs empty font face.\nIs length <code>1</code> and only contains the empty face.\nIf the text first and last lines is defined externally by …\nReturns <code>true</code> if the segment terminates the current line.\nIf this level is left-to-right.\nFont is monospace (fixed-width).\nIf this level is right-to-left.\nReturns <code>true</code> is <code>self</code> is sized from the <code>faces</code> list.\nReturns <code>true</code> if the segment can be considered part of …\nReturns <code>true</code> if the segment can be considered part of a …\nFind a single font face with italic style, normal weight …\nIterate over the layer glyphs and palette color from back …\nIterate over color palettes.\nYield a set of contained flags values.\nSegments iterator.\nYield a set of contained flags values.\nIterate over font faces, more specific first.\nIterate over font faces, more specific first.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nSegment kind.\nSegment kind.\nPrimary language of the text.\nGet the best <code>hyphenation::Language</code> for the <code>lang</code>.\nNumber of layer glyphs that replace the colored glyph.\nNumber of palettes.\nNumber of base glyphs that have colored replacements.\nNumber of font faces in the list.\nNumber of font faces in the list.\nExtra spacing to add after each character.\nSegment bidi level.\nDirection of the segment in the context of other segments …\nIterate over pixel offsets relative to <code>lig</code> glyph start …\nNumber of next segments that are empty because their text …\nGets the line by index.\nFirst overflow line.\nLine index in the shaped text.\nLine break config for Chinese, Japanese, or Korean text.\nFind the end of the line that contains <code>from</code>.\nDistance between baselines, in font units.\nDistance between baselines, in pixels.\nHeight of a single line.\nThe font line height.\nHeight of each line.\nVertical spacing in between lines.\nExtra spacing added in between lines.\nFind the start of the line that contains <code>from</code>.\nDraws a line to a point.\nIterate over <code>ShapedLine</code> selections split by <code>LineBreak</code> or …\nReturns the number of text lines.\nReturns the default UI font names for Linux.\nGets a font list that best matches the query.\nLoad the dictionary for the <code>lang</code>.\nLoad the table, if present in the font.\nLoad the table, if present in the font.\nLower level by <code>amount</code>, fail if number goes below zero.\nNew LTR level with smallest number value (0).\nReturns the default UI font names for MacOS/iOS.\nMaximum depth of the directional status stack during …\nMaximum depth of the directional status stack during …\nMaximum line width.\nFont metrics in font units.\nSized font metrics.\nLast applied extra spacing between the first and second …\nBounding box of the mid-lines, that is the lines except …\nGets the fallback <em>monospace</em> font for the given language.\nNew “monospace” font name.\nMoves the pen to a point.\nReference the font name string.\nGets the const name, if this value is one of the constants.\nGets the const name, if this value is one of the constants.\nGets the insert index in the segment text that is nearest …\nGets the line that contains the <code>y</code> offset or is nearest to …\nGets the segment that contains <code>x</code> or is nearest to it.\nCreate new level, fail if number is larger than …\nNew from <code>dir</code> and file name pattern.\nNew segmented text from any text type.\nNew empty text.\nNew font name.\nNew args from values that convert into the argument types.\nCreate new level, fail if number is larger than <code>max_depth</code>.\nThe next LTR (even) level greater than this, or fail if …\nThe next RTL (odd) level greater than this, or fail if …\nThe lowest RTL (odd) level greater than or equal to this, …\nFind the next grapheme cluster, after <code>from</code>.\nFind the next word segment end or the next line-break …\nFind the start of the next word or the next line-break …\nFind a single font face with all normal properties.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nArguments for event that happened now (<code>INSTANT.now</code>).\nThe level number.\nObscure the text with the replacement char.\nInitial size of the line, before any line reshaping.\nSends the sized vector path for a glyph to <code>sink</code>.\nLast applied overflow alignment.\nGets the first char and glyph with advance that overflows …\nGets a full overflow analysis.\nGets the first line that overflows the <code>max_height</code>. A line …\nVertical offset from the line bottom up that is the …\nFull overline, start point + width.\nOverline spanning the word or spaces, start point + width.\nGets the requested palette or the first if it is not found.\nGets the requested palette.\nFont globally unique name.\nFind the previous grapheme cluster, before <code>from</code>.\nFind the start of the previous word segment or the …\nRemove all unused fonts from cache.\nPush a font name from any type that converts to <code>FontName</code>.\nDraws a quadratic Bézier curve to a point.\nRaise level by <code>amount</code>, fail if number is larger than …\nRaise level by <code>amount</code>, fail if number is larger than …\nBounds of the line.\nBounds of the word or spaces.\nClear cache and notify <code>Refresh</code> in <code>FONT_CHANGED_EVENT</code>.\nLoad and register a custom font.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCompute a map of segments in <code>segs_range</code> to their final LTR …\nFont size requested in the query that generated this font …\nStretch requested in the query that generated this font …\nStretch requested in the query that generated this font …\nStyle requested in the query that generated this font face …\nStyle requested in the query that generated this font list.\nWeight requested in the query that generated this font …\nWeight requested in the query that generated this font …\nReshape text lines.\nReturns the font name registered for the generic <code>name</code> and …\nNew RTL level with smallest number value (1).\nGets the fallback <em>sans-serif</em> font for the given language.\nNew “sans-serif” font name.\nGet the segment by index.\nGet segment index from a char index.\nThe text segments.\nIterate over word and space segments in this line.\nNumber of segments in this line.\nGets the fallback <em>serif</em> font for the given language.\nNew “serif” font name.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the fallback <em>cursive</em> font for the given language.\nSets the ultimate fallback font used when none of other …\nSets the fallback <em>fantasy</em> font for the given language.\nSets the fallback <em>monospace</em> font for the given language.\nSets the fallback <em>sans-serif</em> font for the given language.\nSets the fallback <em>serif</em> font for the given language.\nCalculates a <code>ShapedText</code>.\nCalculates a <code>ShapedText</code> using the best font in this list …\nBounding box size, the width is the longest line or the …\nFont size.\nMultiply this to a font EM value to get the size in pixels.\nGets a cached sized <code>Font</code>.\nGets a sized font list.\nCompute <code>FontMetrics</code> given a font size in pixels.\nChanges the caret line if the current line cannot contain …\nFind the nearest next char boundary from the byte index <code>i</code>.\nFind the nearest grapheme cluster boundary from the byte …\nGlyph index for the space <code>&#39; &#39;</code> character.\nReturns the horizontal advance of the space <code>&#39; &#39;</code> character.\nReturns <code>true</code> if this line was started by the wrap …\nFont stretch.\nSet the <code>FontStretch</code>.\nVertical offset from the line bottom up that is the …\nFull strikethrough line, start point + width.\nStrikethrough spanning the word or spaces, start point + …\nGets the layout direction this segment will always be in, …\nFont style.\nSet the <code>FontStyle</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nPlacement of the suffix (ellipses or custom).\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets what font synthesis to use to better render this font …\nGets the system font anti-aliasing config as a read-only …\nQuery all font families available in the system.\nReturns the default UI font names for the current …\nWidth of the TAB character.\nThe text string.\nSelect the string represented by this line.\nSelect the string represented by this segment.\nGet the text bytes range of this line in the original …\nFirst overflow character in the text.\nGet the text byte range end of this segment in the …\nGet the text bytes range of the <code>glyph_range</code> in this segment…\nConvert a segments range to a text bytes range.\nGet the text bytes range of this line in the original text.\nGet the text bytes range of this segment in the original …\nGet the text byte range start of this segment in the …\nInstant the event happened.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nApply the text transform.\nTransform the white space of the text.\nVertical offset from the line bottom up that is the font …\nFull underline, not skipping.\nUnderline spanning the word or spaces, not skipping.\nVertical offset from the line bottom up that is the …\nFull underline, not skipping.\nUnderline spanning the word or spaces, not skipping.\nUnderline, skipping spaces.\nThe suggested distance of the top of the underline from …\nThe suggested distance of the top of the underline from …\nUnderline, skipping glyph descends that intersect the …\nUnderline spanning the word or spaces, skipping glyph …\nUnderline, skipping spaces and glyph descends that …\nUnderline, skipping spaces.\nA suggested value for the underline thickness, in font …\nA suggested value for the underline thickness, in pixels.\nCompute initial bidirectional levels of each segment of a …\nCompute a map of segments in <code>line</code> to their final LTR …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe number of font units per em.\nRemoves a custom font family. If the font faces are not in …\nCustom font variations.\nFont weight.\nSet the <code>FontWeight</code>.\nReturns the default UI font names for Windows.\nWorld break config.\nExtra spacing to add after each space (U+0020 SPACE).\nThe approximate amount that non-ascending lowercase …\nThe approximate amount that non-ascending lowercase …\nGets the segment x offset and advance.\nThe glyph that is replaced by <code>glyphs</code>.\nThe colored glyph components.\nPoint that must be used for all <code>glyphs</code>.\nEnable petite caps alternative for lower and upper case …\nEnable small caps alternative for lower and upper case …\nNo caps variant.\nUses the default numeric glyphs, in most fonts this is the …\nUses the default numeric width, usually this is <code>Tabular</code> …\nDon’t use fraction variants.\nDon’t use alternative style set.\nDon’t use sub/super script positions.\nUses the font default glyphs.\nUses the font default glyphs.\nUses the font default glyphs and spacing.\nFont capital letters variant features.\nAll possible char_variant features (<code>cv00..=cv99</code>).\nLogographic glyph variants for Chinese fonts.\nVariant where the numerator and denominator are made …\nThe sizing and spacing of figures used for East Asian …\nThe raw value used when a feature is set to <code>false</code>.\nThe raw value used when a feature is set to <code>true</code>.\nRepresents a feature in a <code>FontFeatures</code> configuration.\nRepresents a set of exclusive boolean in a <code>FontFeatures</code> …\nRepresents <code>enum</code> like types that represents a exclusive set …\nRepresents a set of exclusive boolean in a <code>FontFeatures</code> …\nRepresents <code>enum</code> like types that represents a exclusive set …\nName of a font feature.\nRepresents a set of features in a <code>FontFeatures</code> …\nState of a font feature.\nFont features configuration.\nA builder for <code>FontFeatures</code>.\nSub-script and super-script variants.\nAll possible style_set features.\nName of a font variation axis.\nA small map of font variations.\nUses the set of glyphs designed for full-width monospace.\nUses the set of glyphs designed for half-width monospace.\nUses the set of glyphs designed for full-width but …\nJIS X 0213 (2004)\nJIS X 0208-1978 (first standard)\nJIS X 0208-1983 (second standard)\nJIS X 0208-1990 (third standard)\nLogographic glyph variants for Japanese fonts.\nUses numeric glyphs that rest on the baseline.\nNLC new shapes for JIS (2000).\nFont numeric fraction features.\nFont numeric spacing features.\nFont numeric variant features.\nUses old-style numeric glyphs, where some numbers, like 3, …\nEnable petite caps alternative for lowercase letters.\nNumeric glyphs take different space depending on the …\nUses the set of glyphs designed for proportional spacing.\nUses the set of glyphs designed for full-width but …\nLike <code>Proportional</code> but only affects kana and kana related …\nUses the set of glyphs designed for a quarter-width …\nFinalized <code>FontFeatures</code>.\nFinalized <code>FontVariations</code>.\nSimplified Chinese glyphs.\nEnable small caps alternative for lowercase letters.\nVariant where the numerator and denominator are made …\nUses sub-script position and alternative glyphs.\nUses super-script position and alternative glyphs.\nNumeric glyphs take the same space even if the glyphs …\nUses the set of glyphs designed for a third-width …\nEnable title caps alternatives. This uses alternative …\nTraditional Chinese glyphs.\nEnables unicase, using small caps for upper case letters …\nGets the enabled alternative.\nFont annotation alternatives, like circled digits or …\nFont annotation alternatives, like circled digits or …\nAs UTF-8.\nAs UTF-8.\nNew <code>Auto</code>.\nNew <code>Auto</code>.\nSet the feature to auto.\nSet the feature to auto.\nAutomatic state.\nNew auto.\nFinish building.\nNew builder.\nFont capital glyph variants.\nFont capital glyph variants.\nFont stylistic alternatives for individual characters.\nFont stylistic alternatives for individual characters.\nChinese logographic set selection.\nChinese logographic set selection.\nThe most common ligatures, like for <code>fi</code>, <code>ffi</code>, <code>th</code> or similar.\nThe most common ligatures, like for <code>fi</code>, <code>ffi</code>, <code>th</code> or similar.\nIf the variation is set.\nAlternative letters that adapt to their surrounding …\nAlternative letters that adapt to their surrounding …\n<code>CapsVariant::Auto</code>\n<code>NumVariant::Auto</code>\n<code>NumSpacing::Auto</code>\n<code>NumFraction::Auto</code>\n<code>FontStyleSet::Auto</code>\n<code>FontPosition::Auto</code>\n<code>JpVariant::Auto</code>\n<code>CnVariant::Auto</code>\n<code>EastAsianWidth::Auto</code>\nDisable the feature.\nDisable the feature.\nDisabled state.\nLigatures specific to the font, usually decorative.\nLigatures specific to the font, usually decorative.\nEast Asian figure width control\nEast Asian figure width control\nEnable the feature.\nEnable the feature.\nEnable the feature with alternative selection.\nEnabled state.\nEnabled state with alternative selected.\nAccess to the named feature.\nSet the named feature.\nAccess to a set of named features where only one of the …\nSets a single feature of a set of features.\nAccess to a set of named features where only one or more …\nSets the features that represent the <code>state</code>.\nAccess to a set of named features that are managed …\nSets all the named features to the same value.\nGenerate the harfbuzz font features.\nFinalize variations config for use in a font.\nInitialize a <code>FontVariations</code> map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>0</code> is disabled, <code>&gt;=1</code> is enabled with the alt value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>v == 0 || v &gt; 99</code> is Auto, <code>v &gt;= 1 &amp;&amp; v &lt;= 99</code> maps to their …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNew font variations from pairs of name, value.\nNew from feature variant.\nNew from feature variant.\nGets a copy of the variation value if it is set.\nExclusive borrow the variation value if it is set.\nUse glyphs that were common in the past but not today.\nUse glyphs that were common in the past but not today.\nLigatures used historically, in old books, like the German …\nLigatures used historically, in old books, like the German …\nUse kana glyphs optimized for horizontal writing.\nUse kana glyphs optimized for horizontal writing.\nInsert the font variation, returns the previous value if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the feature is auto enabled.\nIf the features are auto enabled , or in a mixed state.\nIf state is <code>Auto</code>.\nIf state is <code>Auto</code>.\nIs <code>auto</code>.\nIs auto.\nIf the feature is explicitly disabled.\nIf the features are explicitly disabled.\nIs <code>disabled</code>.\nIf not font variation is set.\nIf the feature is explicitly enabled.\nIf the features are explicitly enabled.\nIs <code>enabled</code> or <code>enabled_alt</code>.\nJapanese logographic set selection.\nJapanese logographic set selection.\nAllow glyphs boundaries to overlap for a more pleasant …\nAllow glyphs boundaries to overlap for a more pleasant …\nCount of font variations set.\nGets the OpenType name of the feature.\nAll the names of features, must have more then one name.\nAll the names of features, must have more then one sub-set.\nGets the OpenType name of the features.\nGets the OpenType names of all the features affected.\nGets the OpenType names of all the features affected.\nNew default.\nNew variant.\nNew empty.\nFont numeric spacing variants.\nFont numeric spacing variants.\nFont numeric spacing variants.\nFont numeric spacing variants.\nFont numeric glyph variants.\nFont numeric glyph variants.\nForce usage of ordinal special glyphs, 1a becomes 1ª.\nForce usage of ordinal special glyphs, 1a becomes 1ª.\nReplace letter with fleurons, dingbats and border elements.\nReplace letter with fleurons, dingbats and border elements.\nFont sub/super script alternatives.\nFont sub/super script alternatives.\nRemove the font variation, returns the value if the …\nRestore feature states that where overridden in <code>set_all</code>.\nForce the use of ruby (rubi) glyph variants.\nForce the use of ruby (rubi) glyph variants.\nSet the feature state.\nSet the feature state.\nSets the features.\nSets the features.\nSet or override the features of <code>self</code> from <code>other</code>.\nForce use of a slashed zero for <code>0</code>.\nForce use of a slashed zero for <code>0</code>.\nGets the current state of the feature.\nGets the current state of the features.\nGets the current state of the features.\nGets the current state of the features.\nFont stylistic alternatives for sets of characters.\nFont stylistic alternatives for sets of characters.\nUse stylistic alternatives.\nUse stylistic alternatives.\nUse swashes flourish style.\nUse swashes flourish style.\n<code>None</code> if <code>Auto</code> or <code>Some(NonZeroUsize)</code> if is a feature.\n<code>None</code> if <code>Auto</code> or <code>Some(NonZeroUsize)</code> if is a feature.\nNew empty with pre-allocated capacity.")