searchState.loadedDescShard("zng_txt", 0, "String type optimized for sharing.\nText data is stored as an <code>Arc&lt;str&gt;</code>.\nText data is a small string stored as a null terminated …\nText data is stored as a <code>&amp;&#39;static str</code>.\nText data is stored as a <code>String</code>.\nA trait for converting a value to a <code>Txt</code>.\nText string type, can be one of multiple internal …\nIdentifies how a <code>Txt</code> is currently storing the string data.\nCopy the inner static <code>str</code> if this text represents one.\nBorrow the text as a string slice.\nCalls <code>String::clear</code> if the text is owned, otherwise …\nEmpty.\nConvert the inner representation of the string to not be …\n Creates a <code>Txt</code> by formatting using the <code>format_args!</code> syntax.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNew from a shared arc str.\nNew text that is an inlined <code>char</code>.\nNew text from <code>format_args!</code>, avoids allocation if the text …\nNew text that is a <code>&amp;&#39;static str</code>.\nNew cloned from <code>s</code>.\nNew text from a <code>String</code> optimized for editing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the owned string.\nRemoves the last character from the text and returns it.\nPush the character to the end of the text.\nPush the string to the end of the text.\nIdentifies how the text is currently stored.\nSplits the text into two at the given index.\nAcquires a mutable reference to a <code>String</code> buffer.\nConverts the given value to an owned <code>Txt</code>.\nShortens this <code>Txt</code> to the specified length.")